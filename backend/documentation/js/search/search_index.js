var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActualizarPreguntaDto.html",[0,0.098,1,2.077]],["body/classes/ActualizarPreguntaDto.html",[0,0.153,1,3.268,2,1.533,3,0.3,4,0.261,5,0.261,6,4.983,7,3.176,8,0.382,9,1.05,10,2.078,11,1.755,12,1.944,13,0.536,14,0.026,15,1.128,16,1.128,17,3.61,18,0.65,19,4.269,20,2.378,21,4.269,22,4.269,23,0.378,24,3.579,25,2.996,26,3.176,27,2.031,28,4.269,29,1.15,30,0.833,31,1.887,32,1.128,33,2.068,34,2.593,35,1.758,36,3.268,37,0.959,38,1.255,39,2.192,40,0.816,41,0.838,42,3.61,43,1.641,44,3.176,45,1.481,46,0.846,47,3.61,48,2.593,49,0.3,50,4.551,51,1.39,52,2.56,53,2.56,54,3.268,55,3.268,56,2.996,57,1.099,58,2.996,59,2.379,60,2.593,61,5.382,62,0.773,63,3.61,64,1.255,65,2.593,66,0.02,67,0.02]],["title/modules/AppModule.html",[68,1.314,69,2.285]],["body/modules/AppModule.html",[0,0.091,3,0.225,4,0.195,5,0.195,12,1.396,13,0.318,14,0.026,23,0.441,29,1.201,30,0.867,32,0.931,37,0.998,40,0.917,43,1.229,49,0.225,51,0.718,54,1.942,57,1.615,59,1.414,62,0.951,64,1.307,66,0.016,67,0.016,68,1.962,69,4.394,70,1.521,71,1.521,72,1.78,73,1.78,74,1.521,75,1.78,76,1.78,77,2.704,78,2.704,79,3.644,80,3.644,81,3.644,82,3.341,83,2.474,84,1.78,85,1.642,86,3.198,87,3.101,88,1.005,89,1.317,90,3.198,91,3.549,92,0.624,93,1.521,94,4.443,95,4.666,96,2.379,97,0.867,98,1.964,99,1.521,100,3.198,101,4.443,102,3.198,103,4.318,104,3.812,105,3.198,106,3.198,107,2.282,108,1.942,109,1.317,110,2.136,111,1.144,112,3.198,113,3.198,114,3.198,115,4.443,116,0.88,117,3.198,118,3.198,119,3.198,120,4.443,121,3.198,122,2.704,123,3.198,124,1.501,125,3.198,126,3.198,127,3.198,128,3.198,129,3.198,130,2.704,131,3.198,132,3.198,133,1.78,134,4.443,135,3.198,136,3.198,137,2.625,138,2.003,139,3.198,140,3.198,141,3.198,142,3.198,143,3.198,144,3.198,145,3.198,146,3.198,147,4.443,148,3.198,149,3.198,150,3.198,151,2.704,152,3.198,153,3.198,154,2.379,155,3.198,156,3.198,157,3.198,158,3.198,159,3.198,160,1.148,161,3.198,162,2.136,163,3.198,164,3.198,165,2.136,166,3.198,167,1.942,168,2.136,169,2.379,170,3.198,171,3.198,172,3.198,173,1.414,174,3.198,175,3.198,176,3.198,177,4.443,178,3.198,179,1.414,180,3.198,181,2.136]],["title/classes/CreateEncuestaDto.html",[0,0.098,182,1.756]],["body/classes/CreateEncuestaDto.html",[0,0.149,2,1.208,3,0.236,4,0.205,5,0.205,8,0.301,9,0.898,10,2.047,11,0.925,13,0.632,14,0.026,15,1.277,16,1.237,18,0.713,23,0.396,24,2.794,25,3.139,27,1.6,29,1.218,30,0.898,31,2.034,32,1.099,33,2.015,40,0.804,43,1.292,45,1.443,49,0.236,51,1.369,53,2.681,56,3.394,57,1.606,58,2.919,59,2.318,60,2.042,62,0.847,64,1.658,65,2.042,66,0.017,67,0.017,89,1.385,92,1.1,97,0.656,116,1.677,124,0.989,160,2.12,167,2.042,182,2.362,183,3.394,184,2.502,185,3.502,186,3.502,187,3.184,188,4.601,189,3.363,190,3.363,191,2.794,192,3.363,193,3.363,194,2.502,195,3.363,196,4.244,197,2.844,198,3.363,199,2.502,200,3.363,201,3.585,202,1.6,203,2.042,204,3.184,205,1.6,206,2.844,207,2.502,208,1.872,209,2.246,210,2.844,211,3.363,212,4.601,213,3.073,214,4.601,215,2.561,216,3.073,217,2.246,218,2.844,219,2.502,220,1.1,221,1.872,222,2.246,223,2.246,224,1.727,225,3.073,226,2.188,227,2.794,228,1.208,229,5.154,230,3.363,231,2.844,232,1.487,233,2.844,234,3.502,235,2.246,236,1.894,237,2.246,238,1.872,239,2.246,240,2.502,241,2.844,242,2.502,243,1.872,244,2.246,245,3.89,246,3.363,247,1.872,248,2.246]],["title/classes/CreateEncuestaResponseDto.html",[0,0.098,249,2.285]],["body/classes/CreateEncuestaResponseDto.html",[0,0.102,2,1.283,3,0.251,4,0.218,5,0.218,8,0.319,9,0.935,10,1.609,13,0.656,14,0.026,15,1.42,16,1.35,18,0.778,23,0.251,29,1.257,40,0.819,48,2.91,49,0.251,62,0.925,66,0.018,67,0.018,92,1.128,167,3.509,183,3.633,185,3.612,186,3.612,187,3.284,191,3.509,201,3.963,202,1.699,220,1.338,243,3.454,244,3.2,245,4.886,247,3.454,248,3.2,249,3.2,250,3.02,251,2.572,252,2.572,253,4.023,254,4.573,255,1.263,256,6.442,257,3.572,258,4.299,259,3.572,260,4.299,261,2.967,262,3.572,263,3.572,264,3.572,265,3.572,266,3.2,267,3.2,268,3.2,269,4.052,270,4.792,271,4.052,272,3.572,273,0.746,274,3.572,275,3.587]],["title/classes/CreateOpcionDto.html",[0,0.098,276,1.904]],["body/classes/CreateOpcionDto.html",[0,0.152,2,1.505,3,0.294,4,0.256,5,0.256,8,0.375,9,1.038,11,1.784,13,0.529,14,0.026,15,1.115,16,1.115,18,0.642,23,0.374,25,2.962,27,1.994,29,1.14,30,0.818,31,2.351,32,0.878,33,2.044,40,0.771,43,1.611,45,1.464,49,0.294,51,1.425,53,2.53,56,3.422,57,1.633,58,3.422,59,2.351,60,2.545,62,0.882,64,1.233,66,0.02,67,0.02,89,1.726,92,1.14,173,1.853,183,3.253,194,3.118,201,3.549,202,1.994,203,2.545,204,3.549,215,3.253,217,2.8,221,2.334,222,2.8,223,2.8,224,2.152,225,3.553,226,2.53,227,3.23,273,0.828,276,2.962,277,3.544,278,2.362,279,3.544,280,4.192,281,4.192,282,3.553,283,2.246,284,2.732,285,1.611,286,3.544,287,3.544]],["title/classes/CreatePreguntaDto.html",[0,0.098,196,2.285]],["body/classes/CreatePreguntaDto.html",[0,0.145,2,1.14,3,0.223,4,0.194,5,0.194,7,2.361,8,0.284,9,0.863,11,1.647,12,1.817,13,0.611,14,0.026,15,0.926,16,1.152,18,0.664,20,2.113,23,0.406,24,2.684,25,2.461,26,2.361,27,1.51,29,1.199,30,0.863,31,1.954,32,1.066,33,1.954,34,1.927,35,1.307,36,1.927,38,1.3,39,1.63,40,0.84,41,0.688,43,1.22,45,1.513,46,0.86,49,0.223,51,1.448,52,1.51,53,2.75,55,2.684,56,3.543,57,1.638,58,3.42,59,2.647,60,1.927,62,0.899,63,2.684,64,1.7,65,1.927,66,0.016,67,0.016,89,1.307,92,1.199,97,0.619,124,0.933,173,1.403,183,3.219,194,2.361,196,2.952,197,2.684,199,2.361,201,3.511,202,1.51,203,1.927,204,3.511,205,1.51,206,2.684,207,2.361,208,1.767,209,2.12,210,2.684,213,2.952,215,3.062,216,2.952,217,2.12,218,2.684,221,1.767,222,2.12,223,2.12,224,1.63,225,3.673,226,2.419,227,3.088,228,1.587,229,4.651,234,2.952,235,2.12,236,1.82,237,2.12,238,1.767,239,2.12,240,2.361,242,2.361,268,2.952,269,2.684,273,0.688,276,3.488,278,2.113,279,2.684,282,2.952,284,2.27,285,1.22,286,2.684,287,2.684,288,1.761,289,3.174,290,2.361,291,3.174,292,3.174,293,3.174,294,2.684,295,3.174,296,3.174,297,3.397,298,2.684,299,2.361,300,1.63,301,1.51,302,2.684,303,2.684]],["title/entities/Encuesta.html",[220,0.667,304,0.88]],["body/entities/Encuesta.html",[0,0.12,3,0.209,4,0.182,5,0.182,8,0.266,9,0.824,10,1.419,13,0.652,14,0.026,15,1.229,16,1.314,18,0.757,23,0.375,29,0.824,30,0.581,31,1.316,32,0.624,37,1.103,40,0.796,41,0.959,43,1.144,45,1.351,46,0.885,49,0.209,50,2.517,51,0.669,52,1.416,53,1.416,57,0.766,62,0.958,66,0.016,67,0.016,89,1.226,92,1.102,97,0.581,107,2.169,111,1.087,116,1.471,124,1.892,133,1.657,137,1.226,138,0.935,160,2.027,162,3.281,167,1.807,173,1.316,179,2.496,187,2.983,191,3.246,205,1.416,220,1.043,226,1.416,228,1.517,232,1.868,251,2.336,252,2.336,255,1.12,266,1.988,267,1.988,273,0.658,290,2.214,300,2.169,301,2.336,304,1.087,305,1.316,306,2.517,307,4.912,308,2.745,309,1.649,310,4.912,311,4.912,312,3.432,313,2.976,314,4.912,315,2.976,316,2.976,317,3.143,318,4.225,319,4.153,320,4.225,321,2.976,322,4.225,323,4.225,324,2.976,325,2.169,326,2.976,327,2.976,328,2.336,329,2.976,330,2.976,331,2.566,332,4.225,333,3.573,334,2.976,335,4.225,336,2.976,337,2.054,338,1.226,339,1.988,340,2.869,341,2.735,342,2.593,343,3.143,344,2.517,345,2.214,346,3.654,347,2.214,348,2.214,349,1.471,350,3.771,351,2.214,352,2.214,353,2.214,354,2.522,355,3.654,356,3.654,357,2.517,358,1.988,359,2.976,360,1.316,361,3.143,362,3.143,363,2.214,364,2.214,365,1.144,366,1.988,367,2.214,368,1.807,369,3.143,370,2.566,371,2.517,372,2.517,373,2.976]],["title/controllers/EncuestasController.html",[374,1.512,375,2.285]],["body/controllers/EncuestasController.html",[0,0.034,3,0.084,4,0.073,5,0.073,8,0.107,10,1.565,11,1.282,12,1.567,13,0.532,14,0.026,15,1.191,16,0.976,18,0.563,20,0.462,23,0.36,29,1.189,30,0.706,32,0.758,33,1.624,34,0.73,35,0.495,37,1.201,38,1.466,40,0.898,41,0.658,45,1.563,48,1.253,49,0.084,54,1.253,57,1.444,62,0.902,64,0.797,65,2.197,66,0.008,67,0.008,88,0.378,92,0.403,93,0.572,97,0.943,98,1.6,99,0.572,103,1.744,104,0.73,107,1.858,116,1.087,122,1.016,124,0.797,133,1.509,138,0.648,160,1.154,165,2.147,173,2.363,179,1.198,182,1.651,185,1.378,186,1.378,202,0.572,207,2.016,208,0.669,220,1.324,221,0.669,224,1.858,228,0.432,232,1.198,243,1.149,244,0.803,247,3.597,248,1.81,249,1.378,251,0.572,252,1.529,253,0.894,255,1.305,261,3.108,268,2.638,273,0.797,275,3.576,278,1.714,288,1.243,308,1.651,309,1.326,325,1.392,337,1.518,338,0.495,342,0.531,349,1.471,358,1.378,360,0.531,365,1.041,366,0.803,369,0.894,370,0.73,374,0.531,375,1.378,376,0.531,377,1.016,378,0.803,379,0.981,380,2.916,381,2.71,382,2.292,383,2.71,384,2.292,385,2.063,386,2.71,387,2.71,388,2.292,389,2.71,390,1.202,391,2.063,392,1.202,393,2.217,394,2.217,395,2.631,396,1.016,397,1.202,398,1.535,399,2.292,400,0.981,401,1.744,402,2.063,403,2.063,404,1.202,405,1.744,406,3.573,407,1.202,408,3.34,409,1.744,410,1.744,411,1.202,412,1.202,413,3.619,414,3.06,415,2.063,416,1.202,417,1.016,418,2.147,419,2.063,420,1.202,421,1.202,422,1.202,423,3.406,424,2.718,425,3.215,426,2.718,427,3.95,428,2.063,429,3.977,430,1.202,431,4.503,432,2.199,433,1.744,434,0.981,435,3.596,436,3.34,437,2.292,438,3.771,439,2.718,440,2.292,441,1.202,442,2.83,443,1.651,444,2.938,445,2.292,446,2.71,447,2.063,448,2.063,449,2.063,450,1.744,451,2.398,452,2.063,453,1.744,454,2.063,455,1.202,456,1.202,457,2.391,458,1.744,459,2.938,460,1.535,461,3.143,462,1.202,463,1.535,464,1.202,465,1.202,466,1.202,467,2.692,468,1.202,469,1.202,470,1.016,471,1.202,472,1.202,473,1.202,474,3.215,475,2.391,476,1.79,477,2.147,478,1.202,479,1.202,480,1.202,481,2.147,482,2.718,483,1.202,484,3.143,485,1.744,486,1.016,487,1.202,488,1.744,489,2.016,490,1.535,491,0.73,492,0.73,493,1.378,494,0.73,495,1.016,496,1.535,497,2.292,498,0.894,499,1.378,500,3.573,501,3.34,502,4.216,503,1.509,504,1.016,505,1.392,506,1.202,507,1.744,508,1.378,509,1.202,510,0.894,511,0.803,512,0.894,513,0.894,514,1.202,515,0.981,516,1.202,517,0.894,518,1.016,519,1.202,520,0.572,521,0.669,522,0.572,523,1.253,524,1.253,525,0.803,526,1.202,527,3.34,528,4.087,529,2.594,530,2.776,531,1.202,532,2.292,533,1.202,534,1.202,535,1.202,536,2.372,537,1.202,538,1.016,539,1.202,540,1.016,541,2.147,542,1.744,543,1.535,544,1.202,545,1.016,546,1.202,547,1.016,548,0.894,549,1.202,550,1.202,551,1.202,552,1.202,553,2.71,554,3.215,555,2.292,556,2.71,557,2.71,558,2.718,559,2.391,560,3.06,561,2.938,562,2.718,563,2.391,564,3.143,565,2.417,566,2.391,567,2.391,568,2.718,569,2.391,570,1.202,571,1.202,572,2.063,573,1.744,574,2.063,575,1.744,576,1.016,577,1.253,578,1.149,579,1.744,580,1.202,581,1.535,582,1.202,583,1.016,584,0.803,585,1.202,586,1.016,587,1.016,588,1.202,589,0.803,590,1.149,591,0.669,592,0.803,593,0.73,594,1.202,595,1.202,596,0.669,597,1.202,598,1.202,599,1.202,600,1.202,601,1.202,602,3.34,603,1.016,604,1.202,605,1.744,606,1.202,607,0.894,608,1.016,609,1.202,610,1.202,611,1.202,612,1.202,613,1.202,614,1.202,615,1.202,616,1.202,617,1.202,618,1.202,619,1.202,620,1.202,621,1.202,622,1.016,623,1.202]],["title/modules/EncuestasModule.html",[68,1.314,79,2.077]],["body/modules/EncuestasModule.html",[0,0.102,3,0.251,4,0.218,5,0.218,14,0.026,23,0.458,29,1.211,30,1.055,32,1.004,37,1.215,38,1.409,40,0.908,41,0.842,46,0.776,49,0.251,51,1.424,62,0.962,66,0.018,67,0.018,68,2.078,70,1.699,71,1.699,72,1.989,73,1.989,74,1.699,75,3.011,76,1.989,79,3.912,82,3.454,83,2.668,84,1.989,85,1.834,87,2.91,88,1.122,91,3.356,92,1.176,93,1.699,97,0.697,98,1.579,99,1.699,104,2.169,107,2.777,108,2.169,109,1.471,110,2.386,111,1.233,137,2.482,138,1.894,168,2.386,220,0.935,283,1.373,285,2.221,309,1.199,337,2.078,338,1.471,342,2.554,345,2.657,354,2.967,360,2.118,375,3.612,376,2.118,434,1.699,443,2.461,491,3.284,492,2.91,503,3.454,504,3.02,510,2.657,520,1.699,521,2.668,624,3.02,625,3.572,626,3.02,627,3.572,628,3.572,629,3.2,630,3.564,631,3.572,632,1.506,633,3.572,634,3.572,635,2.657,636,3.572,637,3.564,638,2.657,639,2.657,640,2.657,641,2.657,642,2.657,643,2.169,644,2.657,645,2.657]],["title/injectables/EncuestasService.html",[503,1.904,646,1.512]],["body/injectables/EncuestasService.html",[0,0.035,3,0.087,4,0.076,5,0.076,8,0.111,10,1.586,11,0.763,12,1.585,13,0.47,14,0.027,15,1.2,18,0.57,20,0.476,23,0.372,29,1.163,30,1.054,31,0.548,32,0.842,33,1.416,34,0.753,35,0.51,37,0.623,38,1.181,39,0.636,40,0.862,41,0.511,42,1.048,43,0.476,45,1.346,46,0.724,47,1.791,48,0.753,49,0.087,51,0.828,52,0.59,54,1.286,57,1.332,59,0.936,60,0.753,62,0.894,64,1.181,65,1.286,66,0.008,67,0.008,88,0.666,89,0.872,92,0.719,95,3.629,96,0.922,97,0.64,98,0.548,99,0.59,107,0.636,109,0.51,111,0.714,116,1.388,124,1.181,133,2.518,137,0.51,138,1.031,151,1.048,167,0.753,173,0.936,182,1.685,185,1.852,186,1.852,187,2.439,191,1.286,220,1.259,224,1.088,226,1.319,228,0.761,231,1.048,232,0.548,236,0.51,238,1.179,240,0.922,243,1.827,244,1.852,247,2.947,248,2.683,251,1.561,252,2.462,253,1.576,254,1.791,255,1.185,261,2.59,266,2.192,267,2.683,273,0.785,278,0.814,283,1.066,284,0.636,288,1.33,297,0.828,308,2.425,309,1.349,325,1.424,337,1.649,342,0.936,345,0.922,349,1.299,354,0.636,360,0.548,365,1.416,368,1.286,369,1.576,370,1.684,371,1.048,372,1.048,379,1.007,380,2.857,382,1.791,384,2.775,388,1.791,393,2.246,394,2.151,395,2.613,396,1.791,398,1.576,401,1.791,414,1.048,417,1.048,423,1.684,431,3.85,432,0.69,442,1.286,443,0.636,445,1.048,451,3.063,453,1.048,457,0.922,459,0.922,460,0.922,461,2.441,463,2.441,470,1.048,476,1.179,477,0.828,481,0.828,489,0.922,490,0.922,497,1.048,498,2.063,503,1.179,507,1.048,508,0.828,510,0.922,511,0.828,512,0.922,513,0.922,522,1.007,523,1.684,525,0.828,529,3.557,530,2.882,532,3.396,536,2.613,543,2.988,545,1.791,548,2.441,555,3.825,559,0.922,560,1.048,561,0.922,563,2.063,564,3.64,565,1.852,566,1.576,567,1.576,569,1.576,573,1.791,575,1.791,576,3.629,577,2.606,578,2.808,579,1.048,584,0.828,589,1.852,591,1.827,592,0.828,593,1.286,596,0.69,602,3.629,603,1.048,605,2.775,607,1.576,608,1.791,632,0.871,646,0.936,647,0.753,648,1.048,649,2.774,650,2.118,651,2.118,652,2.774,653,2.118,654,1.239,655,2.606,656,2.345,657,1.239,658,1.791,659,1.239,660,1.239,661,1.239,662,2.118,663,1.239,664,2.118,665,1.239,666,4.523,667,1.239,668,1.239,669,1.239,670,1.239,671,2.118,672,1.239,673,1.048,674,1.048,675,0.828,676,1.791,677,2.118,678,1.239,679,2.774,680,0.828,681,1.239,682,1.791,683,2.345,684,1.239,685,1.048,686,1.048,687,1.048,688,1.048,689,2.063,690,1.239,691,2.774,692,1.239,693,1.852,694,2.345,695,1.239,696,1.048,697,1.239,698,1.048,699,1.576,700,2.118,701,2.118,702,1.239,703,1.415,704,1.239,705,1.239,706,1.239,707,2.118,708,1.239,709,1.239,710,1.576,711,1.239,712,2.118,713,2.118,714,2.118,715,1.239,716,1.239,717,1.239,718,1.239,719,1.239,720,1.239,721,1.239,722,1.239,723,1.239,724,1.239,725,1.239,726,1.239,727,1.239,728,1.239,729,1.239,730,1.239,731,1.239,732,1.239,733,1.239,734,1.239,735,1.048,736,1.239,737,1.239,738,1.239,739,1.239,740,4.377,741,1.239,742,1.239,743,2.774,744,1.239,745,1.239,746,1.239,747,2.118,748,2.118,749,2.118,750,1.239,751,1.239,752,2.118,753,1.239,754,1.239,755,1.239,756,1.048,757,1.239,758,1.239,759,1.239,760,1.239,761,1.239,762,2.118,763,1.239,764,1.239,765,1.239,766,2.118,767,1.239,768,1.239,769,2.118,770,1.239,771,2.118,772,1.239,773,1.239,774,1.239,775,2.118,776,1.239,777,1.239,778,1.239,779,2.118,780,1.791,781,2.345,782,1.239,783,2.345,784,2.118,785,2.345,786,2.345,787,1.791,788,1.048,789,2.775,790,1.791,791,1.791,792,1.791,793,1.048,794,1.048,795,2.345,796,1.576,797,1.791,798,1.239,799,1.239,800,1.239,801,1.048,802,1.239,803,2.118,804,2.345,805,2.774,806,1.239,807,1.239,808,1.239,809,1.239,810,1.239,811,1.239,812,1.239,813,1.239,814,3.281,815,3.281,816,2.118,817,2.118,818,2.118,819,2.118,820,1.239,821,1.239,822,0.922,823,1.239,824,1.239,825,1.239,826,1.048,827,1.576,828,1.048,829,1.239,830,0.753,831,1.239,832,0.922,833,1.048,834,1.791,835,1.048,836,1.791,837,1.239,838,1.239,839,1.239,840,2.118,841,2.118,842,1.239,843,1.239,844,1.239,845,1.048,846,1.239,847,1.239,848,1.239,849,1.239,850,1.048,851,1.239,852,1.239,853,1.239,854,1.239,855,1.239,856,1.239,857,1.239,858,1.239,859,3.281,860,2.118,861,2.118,862,1.239,863,1.239,864,1.239,865,1.239,866,2.118,867,1.239,868,1.239,869,1.239,870,2.118,871,1.239,872,1.791,873,1.239,874,1.239,875,1.239,876,1.239,877,1.239,878,1.239,879,1.239,880,1.048,881,1.239,882,1.239,883,1.239,884,1.239,885,1.239,886,1.239,887,1.239]],["title/classes/ObtenerEncuestaDto.html",[0,0.098,418,2.285]],["body/classes/ObtenerEncuestaDto.html",[0,0.147,2,1.441,3,0.282,4,0.245,5,0.245,8,0.359,9,1.009,12,1.967,13,0.515,14,0.026,15,1.084,16,1.084,18,0.625,23,0.402,26,2.985,27,1.909,29,1.221,30,0.783,31,2.287,32,0.841,33,1.988,36,2.437,38,1.521,39,2.06,40,0.755,41,0.625,43,1.542,45,1.104,49,0.282,51,1.359,53,2.461,56,3.367,57,1.611,58,3.367,59,2.287,62,0.822,64,1.521,66,0.019,67,0.019,89,1.652,92,1.18,173,1.774,184,2.985,201,3.476,202,1.909,203,2.437,204,3.476,215,3.187,217,2.68,220,1.009,221,2.234,222,2.68,223,2.68,225,3.455,226,2.461,227,3.141,228,1.441,247,3.187,261,2.06,294,3.393,297,3.824,298,3.393,300,2.06,301,1.909,302,3.393,418,3.455,423,2.437,431,4.499,432,2.234,433,3.393,434,1.909,511,4.039,512,2.985,513,2.985,538,3.393,607,2.985,888,4.841,889,4.013,890,4.013,891,4.013,892,4.013,893,4.013,894,4.013,895,3.393,896,4.013,897,4.013]],["title/entities/Opcion.html",[304,0.88,632,1.075]],["body/entities/Opcion.html",[0,0.138,3,0.253,4,0.22,5,0.22,8,0.323,9,0.941,11,1.596,13,0.577,14,0.026,15,1.011,16,1.216,18,0.7,23,0.407,29,0.704,31,1.595,32,0.756,37,1.084,40,0.798,43,1.386,45,1.327,46,0.948,49,0.253,51,0.81,52,2.294,53,1.716,57,0.928,62,0.978,66,0.018,67,0.018,89,1.485,91,2.008,92,1.132,97,0.704,111,1.241,124,1.706,137,1.485,138,1.133,160,1.295,162,3.222,179,2.673,205,1.716,228,1.951,232,2.132,255,1.216,273,0.903,278,2.23,283,1.386,288,1.418,300,1.852,301,2.294,304,1.241,305,1.595,309,1.62,312,2.686,317,3.588,328,2.585,337,2.088,338,1.485,339,2.409,340,2.585,341,2.686,342,2.565,343,2.683,344,3.05,346,4.043,347,2.683,348,2.683,349,1.327,350,3.875,351,3.588,352,2.683,353,2.683,354,2.477,355,3.588,356,3.588,361,2.683,362,2.683,363,2.683,364,2.683,365,1.854,366,2.409,367,2.683,368,2.191,370,2.191,590,2.686,632,1.516,898,3.05,899,3.607,900,3.607,901,2.191,902,3.607,903,3.607,904,3.607,905,2.686,906,2.477,907,2.585,908,2.008,909,2.008,910,3.05,911,3.05,912,2.683,913,2.683,914,3.607]],["title/classes/OpcionConRespuestasDto.html",[0,0.098,915,2.077]],["body/classes/OpcionConRespuestasDto.html",[0,0.169,2,1.551,3,0.303,4,0.264,5,0.264,8,0.386,9,1.058,11,1.71,12,1.357,13,0.618,14,0.026,15,1.389,18,0.75,20,2.084,23,0.303,30,0.843,35,1.779,37,0.971,40,0.715,41,0.672,46,0.62,49,0.416,62,0.778,66,0.02,67,0.02,97,0.843,116,1.189,160,1.551,179,1.91,220,1.058,236,1.779,251,2.055,252,2.055,255,1.341,273,1.053,278,2.388,285,2.084,288,1.594,308,2.218,309,1.451,325,2.218,400,2.055,515,2.055,522,2.055,915,3.598,916,4.275,917,2.885,918,3.958,919,4.32,920,4.32,921,4.32,922,4.32,923,2.623,924,3.019,925,3.214,926,3.214,927,3.214,928,3.214,929,3.214,930,2.885,931,3.214,932,3.214]],["title/controllers/OpcionesController.html",[374,1.512,933,2.285]],["body/controllers/OpcionesController.html",[0,0.125,3,0.308,4,0.268,5,0.268,8,0.392,10,1.838,13,0.545,14,0.026,16,1.147,18,0.661,23,0.419,49,0.308,66,0.02,67,0.02,88,1.379,255,1.147,273,1.021,276,3.744,299,3.264,349,1.506,374,1.939,376,1.939,378,2.93,379,2.604,380,3.119,393,2.604,394,2.604,395,2.972,493,3.656,494,2.664,496,4.439,499,3.986,524,2.664,536,2.604,541,2.93,933,3.656,934,3.71,935,4.388,936,5.046,937,5.046,938,3.71,939,4.388,940,4.629,941,3.71,942,4.629,943,4.388,944,3.71,945,3.322,946,3.71,947,3.264,948,4.388,949,3.264,950,4.388,951,4.388,952,4.388]],["title/modules/OpcionesModule.html",[68,1.314,80,2.077]],["body/modules/OpcionesModule.html",[0,0.136,3,0.334,4,0.291,5,0.291,14,0.026,23,0.47,46,0.826,49,0.334,66,0.021,67,0.021,68,2.377,70,2.263,71,2.263,72,2.649,73,2.649,74,2.263,75,3.444,76,2.649,80,4.061,83,3.204,84,2.649,85,2.443,87,2.889,88,1.495,108,2.889,109,1.959,376,2.543,632,1.495,933,4.132,945,3.723,946,4.023,953,4.023,954,4.023,955,4.758,956,2.443,957,2.649,958,4.758,959,4.758]],["title/injectables/OpcionesService.html",[646,1.512,945,1.904]],["body/injectables/OpcionesService.html",[0,0.112,3,0.275,4,0.239,5,0.239,8,0.35,10,1.9,13,0.563,14,0.026,18,0.683,23,0.447,46,0.86,48,2.376,49,0.275,66,0.019,67,0.019,88,1.23,109,1.611,111,1.007,255,1.185,273,0.991,276,3.659,283,1.956,299,2.911,349,1.556,379,2.421,380,3.028,393,2.691,394,2.421,395,2.849,476,2.834,522,2.421,523,3.091,529,3.335,530,3.335,536,2.421,577,3.091,578,2.834,632,1.951,646,2.25,647,2.376,655,3.936,675,2.614,680,2.614,827,3.786,830,3.091,936,4.783,937,4.304,938,3.309,940,4.783,941,4.304,945,2.834,947,2.911,956,2.01,957,2.179,960,3.309,961,3.913,962,4.783,963,3.913,964,4.304,965,3.913,966,3.913,967,2.911,968,2.911,969,3.913,970,3.309,971,3.913,972,5.09,973,3.913,974,3.913,975,3.913,976,3.913,977,3.309]],["title/entities/Pregunta.html",[46,0.491,304,0.88]],["body/entities/Pregunta.html",[0,0.119,3,0.206,4,0.179,5,0.179,8,0.262,9,0.816,11,1.462,12,1.888,13,0.598,14,0.026,15,0.876,16,1.223,18,0.705,20,2.158,23,0.41,29,1.037,31,1.297,32,0.876,34,1.782,35,1.209,36,3.226,37,1.095,38,0.863,39,1.507,40,0.855,41,0.651,43,1.128,45,1.341,46,0.806,49,0.206,51,0.659,52,2.318,53,1.99,57,1.254,58,1.634,62,0.982,64,0.863,66,0.016,67,0.016,89,1.209,91,1.634,92,1.139,97,0.573,111,1.077,116,1.151,124,1.717,137,1.723,138,1.314,160,1.502,162,3.255,179,2.581,205,1.396,220,1.237,228,1.908,232,2.348,241,2.482,242,2.183,255,1.113,273,0.827,278,2.042,288,1.562,290,3.112,297,2.794,300,2.148,301,2.318,303,2.482,304,1.077,305,1.297,309,0.986,312,2.958,317,3.112,319,3.537,328,2.318,331,1.782,333,3.537,337,2.158,338,1.209,339,1.96,340,2.527,341,2.714,342,2.656,343,3.112,346,3.952,347,2.183,348,2.183,349,1.462,350,3.899,351,3.112,352,2.183,353,2.183,354,2.148,355,3.112,356,3.626,357,2.482,361,3.112,362,3.112,363,3.112,364,3.112,365,2.042,366,2.794,367,3.112,368,2.54,370,1.782,589,1.96,632,1.93,901,1.782,905,2.329,906,2.148,908,1.634,909,1.634,910,2.482,911,2.482,912,2.183,913,2.183,978,2.482,979,2.935,980,2.935,981,2.935,982,2.935,983,3.537,984,2.935,985,2.935,986,2.183,987,2.935,988,2.935,989,2.318,990,1.782,991,2.935,992,2.935,993,2.935,994,2.935,995,2.935,996,2.794,997,2.935,998,1.96]],["title/entities/Pregunta-1.html",[46,0.411,304,0.737,596,1.594]],["body/entities/Pregunta-1.html",[0,0.117,3,0.288,4,0.251,5,0.251,8,0.367,9,1.024,11,1.592,12,1.818,13,0.652,14,0.026,15,1.1,16,1.351,18,0.778,20,2.422,23,0.428,35,1.69,36,3.703,40,0.692,46,0.753,49,0.288,62,0.753,66,0.019,67,0.019,92,0.801,111,1.056,116,1.129,137,1.69,138,1.289,160,1.473,220,1.308,255,1.212,273,0.949,278,2.223,288,1.701,304,1.351,305,1.814,328,2.752,331,2.492,340,3.066,341,2.922,349,1.592,350,2.741,632,2.026,906,2.695,956,2.107,983,4.438,986,3.052,999,3.47,1000,3.47,1001,4.438,1002,4.103,1003,4.103,1004,4.103,1005,4.103,1006,4.103,1007,5.248,1008,4.103,1009,4.103,1010,2.741]],["title/classes/PreguntaConRespuestasDto.html",[0,0.098,924,1.904]],["body/classes/PreguntaConRespuestasDto.html",[0,0.166,2,1.498,3,0.293,4,0.255,5,0.255,8,0.373,9,1.035,11,1.688,12,1.832,13,0.644,14,0.026,15,1.395,18,0.794,20,2.24,23,0.293,30,0.814,35,1.718,37,0.937,40,0.7,41,0.649,46,0.599,49,0.409,62,0.761,66,0.02,67,0.02,97,0.814,116,1.148,160,1.498,179,1.844,220,1.035,236,1.718,251,1.984,252,1.984,255,1.327,273,1.036,278,2.358,285,2.038,288,1.804,308,2.142,309,1.401,325,2.142,400,1.984,515,1.984,522,2.773,915,3.54,916,4.447,917,2.786,918,2.786,923,2.533,924,3.246,925,3.103,926,4.337,927,3.103,928,3.103,929,3.103,930,2.786,931,3.103,932,3.103,1011,5.303,1012,4.171,1013,4.171,1014,4.171,1015,4.171,1016,4.171]],["title/controllers/PreguntasController.html",[374,1.512,1017,2.285]],["body/controllers/PreguntasController.html",[0,0.102,1,3.663,3,0.252,4,0.219,5,0.219,8,0.32,10,1.612,13,0.478,14,0.026,16,1.006,18,0.58,23,0.38,29,1.129,30,0.699,32,1.264,33,1.376,37,1.079,38,1.053,40,0.837,44,3.571,45,1.49,46,0.831,49,0.252,51,0.805,56,1.994,57,1.553,62,0.831,64,1.412,66,0.018,67,0.018,88,1.125,92,0.937,93,1.704,97,1.212,98,2.557,99,1.704,116,1.592,138,1.125,179,2.394,219,2.664,232,2.122,238,1.994,255,1.351,273,0.967,284,2.465,288,1.412,337,2.081,338,1.475,349,1.321,360,1.583,365,1.376,374,1.583,376,1.583,378,2.392,379,2.284,380,2.954,393,2.284,394,2.284,395,2.752,400,2.284,442,2.915,444,3.571,461,2.664,491,2.175,492,2.175,493,3.207,494,2.175,495,4.06,499,3.617,520,1.704,521,1.994,524,2.175,525,2.392,536,2.284,541,3.207,542,4.06,543,3.571,547,4.06,689,3.571,880,4.06,942,4.06,944,4.06,949,2.664,1017,3.207,1018,3.029,1019,4.892,1020,5.415,1021,3.582,1022,5.785,1023,4.801,1024,3.582,1025,3.582,1026,3.582,1027,3.015,1028,3.582,1029,3.029,1030,3.582,1031,5.415,1032,3.582,1033,3.582,1034,3.582,1035,3.582,1036,3.029,1037,3.582,1038,3.029,1039,3.029,1040,3.029,1041,3.582]],["title/modules/PreguntasModule.html",[68,1.314,81,2.077]],["body/modules/PreguntasModule.html",[0,0.111,3,0.273,4,0.237,5,0.237,14,0.026,23,0.446,29,1.24,30,1.1,32,0.814,37,1.266,38,1.489,40,0.907,46,0.727,49,0.273,51,1.392,62,0.942,66,0.019,67,0.019,68,2.166,70,1.847,71,1.847,72,2.162,73,2.162,74,1.847,75,3.138,76,2.162,81,3.857,83,2.82,84,2.162,85,1.994,87,2.358,88,1.22,91,3.325,92,1.1,93,1.847,97,0.758,98,1.717,99,1.847,104,2.358,108,2.358,109,1.599,110,2.594,111,1.303,116,1.551,137,2.321,138,1.771,168,2.594,283,1.492,285,1.946,337,1.946,338,1.599,342,2.239,354,2.601,360,2.239,376,2.239,434,1.847,443,2.601,491,3.422,492,3.075,520,1.847,521,2.82,629,3.383,630,3.767,632,1.591,635,2.889,637,3.767,638,2.889,639,2.889,640,2.889,641,2.889,642,2.889,643,2.358,644,2.889,645,2.889,956,1.994,957,2.162,1017,3.764,1027,3.537,1042,3.284,1043,3.284,1044,3.884,1045,3.884,1046,3.884,1047,3.884]],["title/injectables/PreguntasService.html",[646,1.512,1027,1.904]],["body/injectables/PreguntasService.html",[0,0.09,1,3.338,3,0.223,4,0.194,5,0.194,8,0.283,10,1.707,13,0.506,14,0.026,18,0.614,23,0.42,29,1.073,30,0.619,32,1.152,33,1.218,37,0.712,38,0.932,40,0.839,43,1.218,44,3.285,45,1.512,46,0.971,49,0.223,51,0.712,52,1.508,62,0.925,64,1.494,66,0.016,67,0.016,88,0.996,89,1.819,92,0.619,97,0.619,98,1.401,109,1.305,111,1.308,133,2.459,137,1.305,138,0.996,219,2.358,228,1.138,255,1.152,273,0.932,288,1.616,301,1.508,337,2.112,342,2.646,349,1.398,360,1.401,365,1.218,379,2.101,380,2.847,393,2.417,394,2.101,395,2.615,400,2.101,451,2.682,475,3.285,476,2.459,522,2.101,523,2.682,524,2.682,525,2.95,529,2.459,530,3.218,536,2.101,548,3.285,565,2.117,577,2.682,578,2.459,584,2.95,592,2.117,593,1.925,632,1.597,646,1.952,647,1.925,655,3.729,673,2.68,674,2.68,675,2.117,676,4.298,680,2.117,685,2.68,686,2.68,689,3.285,710,2.358,780,3.734,781,3.734,796,2.358,822,3.285,827,4.089,830,2.682,956,1.628,957,1.765,967,2.358,968,2.358,970,3.734,977,2.68,1019,4.298,1027,2.459,1029,2.68,1036,2.68,1038,2.68,1039,2.68,1040,2.68,1048,2.68,1049,5.082,1050,3.17,1051,5.082,1052,3.17,1053,4.416,1054,3.17,1055,5.497,1056,3.17,1057,6.141,1058,3.17,1059,3.17,1060,3.17,1061,3.734,1062,3.17,1063,3.17,1064,3.17,1065,4.416,1066,3.17,1067,3.17,1068,3.17,1069,3.17]],["title/classes/RegistrarRespuestasDto.html",[0,0.098,1070,1.904]],["body/classes/RegistrarRespuestasDto.html",[0,0.164,2,1.266,3,0.248,4,0.215,5,0.215,8,0.315,9,0.927,11,1.307,12,1.806,13,0.615,14,0.026,15,1.205,16,0.739,18,0.426,23,0.334,24,3.491,25,2.991,27,1.678,29,1.233,30,0.927,32,0.739,37,1.207,38,1.037,39,1.811,40,0.875,41,0.836,45,1.307,46,0.771,49,0.334,51,1.348,55,2.885,57,1.223,59,1.559,62,0.825,64,1.818,66,0.018,67,0.018,92,0.688,97,0.688,116,1.738,124,1.397,181,2.356,205,1.678,208,1.964,209,2.356,213,3.589,215,3.341,216,3.589,220,0.688,228,1.266,234,3.589,235,3.173,236,2.213,238,1.964,239,3.173,273,0.836,282,3.84,283,2.065,284,2.44,285,1.355,288,1.691,300,1.811,301,1.678,309,1.931,365,1.355,434,2.26,467,2.624,520,1.678,590,2.645,591,2.645,693,2.356,699,3.534,703,3.173,830,2.142,832,3.534,1070,2.645,1071,3.173,1072,2.624,1073,4.22,1074,3.527,1075,3.527,1076,3.527,1077,2.982,1078,4.018,1079,2.982,1080,2.982,1081,2.624,1082,2.982,1083,2.982,1084,2.982,1085,3.534,1086,2.982,1087,2.982,1088,3.534,1089,2.982,1090,2.982,1091,4.018,1092,2.982,1093,4.543,1094,2.982,1095,2.982,1096,2.982,1097,2.982,1098,2.982,1099,2.982,1100,4.018,1101,2.982,1102,2.982,1103,2.982]],["title/entities/Respuesta.html",[41,0.532,304,0.88]],["body/entities/Respuesta.html",[0,0.123,3,0.302,4,0.263,5,0.263,8,0.385,9,1.056,13,0.636,14,0.026,16,1.34,18,0.772,23,0.436,41,0.842,49,0.302,66,0.02,67,0.02,111,1.108,220,1.293,255,1.24,273,0.966,304,1.108,305,1.903,328,2.814,331,3.285,340,2.048,341,3.294,349,1.185,901,2.615,905,3.012,906,2.778,907,2.952,909,2.397,989,2.952,990,2.615,996,4.271,998,3.952,1010,2.876,1104,3.641,1105,5.003,1106,4.306,1107,4.306,1108,3.614,1109,4.306,1110,5.41,1111,5.41,1112,4.306,1113,5.41,1114,5.41,1115,4.306,1116,5.41,1117,3.641]],["title/entities/Respuesta-1.html",[41,0.446,304,0.737,596,1.594]],["body/entities/Respuesta-1.html",[0,0.12,3,0.294,4,0.256,5,0.256,8,0.375,9,1.038,13,0.631,14,0.026,16,1.329,18,0.766,23,0.432,41,0.957,49,0.294,66,0.02,67,0.02,111,1.079,124,1.564,220,1.313,255,1.224,273,0.957,304,1.079,305,1.853,312,2.962,328,2.78,331,3.23,340,1.994,341,3.253,349,1.153,804,3.544,905,2.962,906,2.732,907,3.083,909,2.334,989,3.083,990,2.545,996,4.237,998,3.903,1000,3.544,1010,2.8,1105,4.941,1108,3.553,1117,3.544,1118,3.544,1119,4.192,1120,4.192,1121,4.192,1122,4.192,1123,5.32,1124,4.192,1125,5.32,1126,4.192]],["title/entities/RespuestaAbierta.html",[304,0.88,989,1.627]],["body/entities/RespuestaAbierta.html",[0,0.117,3,0.287,4,0.25,5,0.25,8,0.366,9,1.022,11,1.59,13,0.652,14,0.026,15,1.097,16,1.35,18,0.778,23,0.406,40,0.691,41,1.019,46,0.94,49,0.287,66,0.019,67,0.019,97,0.798,111,1.348,124,1.894,255,1.21,273,1.003,304,1.053,305,1.808,312,3.586,328,2.748,337,1.572,338,1.684,339,2.732,340,2.491,349,1.441,590,3.506,901,3.18,905,3.216,906,2.966,908,3.646,957,2.277,986,3.043,989,2.491,1108,4.068,1127,3.459,1128,4.684,1129,4.09,1130,4.09,1131,4.09,1132,4.09,1133,4.09,1134,5.237,1135,4.09,1136,3.459,1137,4.09]],["title/entities/RespuestaOpcion.html",[304,0.88,907,1.627]],["body/entities/RespuestaOpcion.html",[0,0.123,3,0.302,4,0.262,5,0.262,8,0.384,9,1.055,13,0.636,14,0.026,16,1.339,18,0.772,23,0.415,41,1.031,49,0.302,66,0.02,67,0.02,111,1.106,124,1.824,255,1.239,273,1.015,304,1.106,305,1.9,312,3.453,328,2.812,340,2.044,349,1.487,632,2.081,901,3.282,905,3.291,906,3.036,907,2.571,908,3.632,956,2.207,1108,4.143,1128,4.755,1136,3.635,1138,3.635,1139,5.405,1140,4.298,1141,4.298,1142,4.298,1143,4.298,1144,4.298,1145,4.298]],["title/classes/RespuestaPreguntaDto.html",[0,0.098,1073,2.285]],["body/classes/RespuestaPreguntaDto.html",[0,0.16,2,1.193,3,0.233,4,0.203,5,0.203,8,0.297,9,0.89,10,1.884,11,1.543,12,1.908,13,0.64,14,0.026,15,1.232,16,1.175,17,2.81,18,0.677,23,0.32,24,3.406,25,2.901,27,1.581,29,1.214,30,0.89,32,0.696,37,1.171,38,0.977,39,1.707,40,0.866,41,0.811,45,1.256,46,0.748,49,0.32,51,1.321,55,2.771,57,1.174,59,1.469,62,0.805,64,1.786,66,0.017,67,0.017,92,0.649,97,0.649,116,1.712,124,1.342,181,2.22,199,2.472,205,1.581,208,1.85,209,2.22,213,3.481,215,3.273,216,3.481,220,0.649,228,1.193,234,3.481,235,3.481,236,2.146,238,1.85,239,3.048,273,0.915,282,3.747,283,2.003,284,2.343,285,1.277,288,1.786,300,1.707,301,1.581,309,1.532,365,1.277,434,2.171,467,2.472,520,1.581,590,3.123,591,2.901,693,3.048,699,3.394,703,3.048,830,2.018,832,3.394,1070,1.85,1071,3.927,1072,2.472,1073,4.155,1077,2.81,1078,3.859,1079,2.81,1080,2.81,1081,2.472,1082,2.81,1083,2.81,1084,2.81,1085,3.876,1086,2.81,1087,2.81,1088,3.876,1089,2.81,1090,2.81,1091,3.859,1092,2.81,1093,4.406,1094,2.81,1095,2.81,1096,2.81,1097,2.81,1098,2.81,1099,2.81,1100,3.859,1101,2.81,1102,2.81,1103,2.81,1146,3.324,1147,3.324,1148,3.324,1149,3.324,1150,3.324,1151,3.324,1152,3.324]],["title/controllers/RespuestasController.html",[374,1.512,1153,2.285]],["body/controllers/RespuestasController.html",[0,0.052,3,0.128,4,0.111,5,0.111,8,0.163,10,1.222,13,0.527,14,0.026,15,1.144,16,0.763,18,0.439,23,0.341,29,1.25,30,1.116,32,0.763,33,1.399,37,0.818,38,1.498,40,0.906,41,0.453,45,1.741,46,0.418,49,0.128,51,1.226,57,1.577,62,0.933,64,1.498,66,0.011,67,0.011,88,0.572,92,0.812,93,0.866,97,0.947,98,1.287,99,0.866,107,0.935,116,0.801,124,1.338,138,1.43,154,4.061,160,0.654,165,3.403,169,2.708,173,2.34,181,1.216,182,1.495,202,0.866,203,1.105,204,1.769,220,1.337,221,1.621,224,1.495,226,0.866,228,1.046,232,1.609,236,1.199,237,1.945,243,1.621,255,1.284,258,2.708,260,3.384,261,2.336,268,3.74,273,0.755,275,3.705,283,1.119,284,1.495,285,1.399,288,0.856,309,2.182,338,0.75,349,1.457,358,2.431,360,0.805,365,1.119,368,1.769,374,0.805,376,0.805,378,1.216,379,1.385,380,2.597,393,1.731,394,1.731,395,2.308,400,1.731,405,2.463,406,4.309,408,2.463,409,2.463,410,2.463,423,1.769,429,4.061,432,2.702,435,4.165,436,3.518,437,2.463,438,3.518,439,3.078,440,1.539,442,2.947,443,2.492,444,3.095,450,3.078,451,1.105,457,3.095,458,3.518,459,3.095,475,3.61,476,2.702,477,3.039,481,3.241,482,3.518,484,3.79,485,2.463,486,1.539,488,2.463,489,2.166,490,2.166,493,1.945,494,1.105,496,1.354,499,2.431,500,3.518,501,4.104,502,4.476,505,1.869,508,1.216,515,1.385,517,1.354,520,1.385,521,1.621,524,1.105,527,3.078,528,4.309,529,1.621,530,2.027,536,1.731,541,1.945,581,2.166,583,3.078,584,1.216,596,2.316,622,1.539,629,1.216,643,2.526,710,2.166,833,1.539,947,1.354,949,1.354,1070,3.117,1153,1.945,1154,1.539,1155,3.078,1156,3.078,1157,3.64,1158,1.539,1159,5.823,1160,1.82,1161,1.82,1162,3.518,1163,2.912,1164,5.275,1165,1.82,1166,1.82,1167,2.912,1168,2.912,1169,1.82,1170,1.82,1171,2.912,1172,2.463,1173,2.912,1174,1.82,1175,1.82,1176,1.82,1177,1.82,1178,1.82,1179,1.82,1180,1.82,1181,1.82,1182,4.16,1183,2.912,1184,1.82,1185,2.912,1186,2.912,1187,2.912,1188,2.912,1189,1.82,1190,1.539,1191,1.82,1192,1.82,1193,1.82,1194,1.82,1195,1.82,1196,1.82,1197,1.82,1198,1.82,1199,1.539,1200,1.82,1201,1.82,1202,1.539,1203,1.82,1204,1.82,1205,1.539,1206,1.82,1207,1.82,1208,1.539,1209,1.82,1210,1.82,1211,1.82,1212,2.912,1213,1.82,1214,1.82,1215,1.82,1216,1.82,1217,1.82,1218,1.82,1219,1.82,1220,1.82,1221,1.82,1222,1.82,1223,1.82,1224,2.912,1225,1.82,1226,1.82,1227,1.82,1228,1.82,1229,1.82,1230,1.82]],["title/modules/RespuestasModule.html",[68,1.314,82,1.904]],["body/modules/RespuestasModule.html",[0,0.098,3,0.241,4,0.21,5,0.21,14,0.026,23,0.46,29,1.197,30,1.034,32,0.719,37,1.19,38,1.371,40,0.907,41,0.954,46,0.761,49,0.241,51,1.454,62,0.976,66,0.017,67,0.017,68,2.036,70,1.632,71,1.632,72,1.91,73,1.91,74,1.632,75,2.95,76,2.95,82,3.493,83,2.597,84,1.91,85,1.762,87,2.084,88,1.078,91,3.165,92,1.224,93,1.632,97,0.67,98,1.517,99,1.632,104,2.084,107,1.762,108,2.084,109,1.413,110,2.292,111,1.2,137,2.583,138,1.971,168,2.292,220,1.034,283,1.319,285,2.356,337,1.792,338,1.413,342,2.711,354,3.149,360,2.062,376,2.062,434,1.632,443,2.395,491,3.217,492,2.832,505,3.418,520,1.632,521,2.597,591,1.91,629,3.115,630,3.469,632,1.465,635,2.553,637,3.469,638,2.553,639,2.553,640,2.553,641,2.553,642,2.553,643,2.084,644,2.553,645,2.553,907,2.218,909,1.91,956,1.762,957,1.91,989,2.218,990,2.084,1010,2.292,1153,3.539,1199,2.902,1231,2.902,1232,2.902,1233,2.902,1234,3.432,1235,3.432,1236,3.432,1237,4.664,1238,3.432,1239,3.432]],["title/injectables/RespuestasService.html",[505,1.756,646,1.512]],["body/injectables/RespuestasService.html",[0,0.041,3,0.101,4,0.087,5,0.087,8,0.128,10,1.21,11,1.192,12,0.969,13,0.359,14,0.027,15,1.083,18,0.435,20,0.551,23,0.396,29,1.18,30,1.081,32,0.502,33,1.767,35,0.59,37,1.161,38,1.059,40,0.867,41,0.561,45,1.524,46,0.843,49,0.101,51,0.693,52,1.714,54,2.188,55,1.454,57,1.183,62,0.941,64,1.059,66,0.009,67,0.009,88,0.45,92,0.467,97,0.703,109,0.59,111,0.369,116,1.422,124,0.704,133,2.878,138,0.45,154,2.68,160,0.514,165,2.406,169,1.781,173,2.285,182,0.736,183,0.798,187,2.188,191,1.454,208,1.717,220,1.289,224,0.736,226,0.681,227,0.87,232,1.363,233,1.211,236,0.59,237,3.071,243,1.333,247,1.717,251,1.714,252,1.139,255,1.286,258,2.294,260,1.781,261,1.584,266,1.599,267,2.406,273,0.716,275,1.717,278,1.385,283,1.54,288,1.178,308,2.058,309,1.921,325,0.736,349,0.991,358,0.957,365,0.551,379,1.139,380,2.382,393,1.714,394,1.906,395,2.061,398,1.066,399,1.211,400,1.467,423,0.87,424,2.024,426,1.211,429,3.585,432,2.412,434,0.681,442,2.434,443,0.736,451,1.873,460,1.066,463,1.781,476,2.412,477,2.893,481,2.06,484,1.066,494,2.631,498,3.949,505,1.229,508,0.957,515,2.061,517,1.781,522,1.139,523,2.631,529,3.502,530,3.084,536,0.681,540,2.024,558,2.608,559,1.066,561,3.42,562,2.024,563,1.781,564,2.68,565,1.599,566,1.066,567,2.294,568,2.024,569,1.781,577,3.298,578,3.268,581,2.294,586,1.211,587,1.211,589,1.599,590,1.333,592,0.957,593,2.188,596,1.333,632,1.573,643,0.87,646,1.058,647,0.87,655,3.638,656,2.024,658,2.608,675,0.957,680,2.677,687,1.211,688,1.211,694,1.211,696,1.211,698,1.211,703,2.06,740,1.211,756,1.211,783,2.024,785,2.024,786,2.024,787,2.024,788,1.211,789,3.047,790,2.024,791,2.024,792,2.024,793,2.024,794,2.024,795,2.608,796,2.294,797,2.608,801,2.024,822,1.066,826,1.211,828,1.211,834,2.024,835,1.211,836,2.608,845,1.211,872,1.211,907,1.467,908,1.333,909,0.798,912,2.294,913,1.066,918,0.957,923,0.87,924,1.333,930,0.957,962,2.608,964,2.608,967,1.066,968,1.066,989,0.681,990,0.87,996,0.957,998,1.599,1001,1.211,1061,2.608,1070,2.006,1071,0.957,1081,2.294,1128,2.294,1139,2.608,1155,3.389,1156,3.389,1158,1.211,1162,2.024,1164,4.234,1172,3.047,1202,1.211,1205,1.211,1208,2.024,1240,1.211,1241,1.433,1242,3.084,1243,3.084,1244,1.433,1245,5.008,1246,1.433,1247,1.433,1248,3.603,1249,4.332,1250,1.433,1251,2.394,1252,1.433,1253,2.394,1254,1.433,1255,1.433,1256,2.394,1257,3.603,1258,2.394,1259,1.433,1260,1.433,1261,1.433,1262,1.433,1263,1.433,1264,1.433,1265,4.008,1266,2.394,1267,3.084,1268,1.433,1269,1.433,1270,2.394,1271,1.433,1272,1.433,1273,1.433,1274,2.394,1275,2.394,1276,1.433,1277,1.433,1278,1.433,1279,1.433,1280,3.084,1281,3.084,1282,1.433,1283,1.433,1284,1.433,1285,1.433,1286,1.433,1287,1.433,1288,1.433,1289,1.433,1290,1.433,1291,1.433,1292,1.433,1293,1.433,1294,1.433,1295,1.433,1296,1.433,1297,1.433,1298,2.394,1299,2.394,1300,2.394,1301,1.433,1302,1.433,1303,3.084,1304,1.433,1305,3.084,1306,3.084,1307,1.433,1308,1.433,1309,3.603,1310,2.394,1311,2.394,1312,1.433,1313,1.433,1314,2.394,1315,2.394,1316,1.433,1317,1.433,1318,4.008,1319,3.084,1320,2.394,1321,1.433,1322,1.433,1323,1.433,1324,1.433,1325,1.433,1326,1.433,1327,1.433,1328,1.433,1329,1.433,1330,1.433,1331,1.433,1332,1.433,1333,1.433,1334,1.433,1335,2.394,1336,1.433,1337,1.433,1338,1.433,1339,1.433,1340,1.433,1341,2.394,1342,1.433,1343,1.433,1344,1.433,1345,1.433,1346,1.433,1347,1.433,1348,1.433,1349,1.433,1350,1.433,1351,1.433,1352,1.433,1353,1.433,1354,1.433]],["title/classes/VisualizarRespuestasDto.html",[0,0.098,515,1.627]],["body/classes/VisualizarRespuestasDto.html",[0,0.167,2,1.51,3,0.295,4,0.257,5,0.257,8,0.376,9,1.04,11,1.467,12,1.321,13,0.646,14,0.026,15,1.41,18,0.783,20,2.048,23,0.295,30,0.821,35,1.732,37,0.945,40,0.703,41,0.655,46,0.604,49,0.411,62,0.765,66,0.02,67,0.02,97,0.821,116,1.61,160,2.102,179,1.859,220,1.04,236,1.732,251,2.784,252,2.784,255,1.331,273,1.026,278,2.048,285,2.048,288,1.567,308,3.005,309,1.412,325,2.737,400,2,515,2.536,522,2,915,3.237,916,4.402,917,2.809,918,2.809,923,2.554,924,3.258,925,3.128,926,3.128,927,3.128,928,3.128,929,3.128,930,2.809,931,3.128,932,3.128,1355,4.206,1356,4.206,1357,4.206,1358,4.206,1359,4.206,1360,4.206]],["title/coverage.html",[1361,3.462]],["body/coverage.html",[0,0.192,1,2.369,5,0.238,6,3.299,7,3.779,13,0.388,14,0.026,41,0.791,46,0.729,66,0.019,67,0.019,74,1.856,182,2.003,183,3.331,184,3.779,196,2.606,220,0.991,249,2.606,250,3.299,276,2.172,277,3.299,304,1.69,306,3.299,374,2.645,375,2.606,377,3.299,418,2.606,503,2.172,505,2.003,515,1.856,578,2.172,593,4.272,632,1.226,646,2.645,648,3.299,888,3.299,898,3.299,907,1.856,908,2.828,915,2.369,916,3.773,917,3.773,924,2.172,933,2.606,934,3.299,945,2.172,960,3.299,978,3.299,989,1.856,999,3.299,1017,2.606,1018,3.299,1027,2.172,1048,3.299,1070,2.172,1071,3.393,1072,3.779,1073,2.606,1104,3.299,1118,3.299,1127,3.299,1138,3.299,1153,2.606,1154,3.299,1240,3.299,1361,2.902,1362,3.299,1363,3.901,1364,3.901,1365,3.299,1366,3.901,1367,6.639,1368,3.901,1369,3.901,1370,6.204,1371,3.901,1372,3.901,1373,5.648,1374,3.901,1375,5.08,1376,3.901,1377,3.901,1378,3.901,1379,3.901,1380,3.901,1381,3.901,1382,3.901,1383,3.901,1384,3.901]],["title/dependencies.html",[71,1.955,1385,2.422]],["body/dependencies.html",[0,0.166,14,0.026,27,2.311,66,0.022,67,0.022,71,2.311,88,1.526,96,3.614,109,2.001,111,1.25,202,2.311,205,2.311,432,2.705,518,4.108,682,4.108,683,4.108,735,4.108,1386,6.242,1387,4.858,1388,4.858,1389,4.858,1390,4.858,1391,4.858,1392,4.858,1393,4.858,1394,4.858,1395,4.858,1396,4.858,1397,4.858,1398,4.858,1399,4.858,1400,4.858,1401,4.858,1402,4.858,1403,4.858,1404,4.858,1405,4.858,1406,4.858,1407,4.858,1408,4.858,1409,4.858,1410,4.858,1411,4.858,1412,4.858]],["title/miscellaneous/enumerations.html",[1413,1.913,1414,3.475]],["body/miscellaneous/enumerations.html",[8,0.436,14,0.026,20,2.49,41,0.909,66,0.022,67,0.022,261,2.999,511,3.901,591,3.608,693,4.328,923,2.961,1085,4.82,1088,4.82,1413,3.257,1414,4.124,1415,4.877,1416,5.84,1417,5.84,1418,6.48,1419,4.877,1420,6.936,1421,4.877]],["title/miscellaneous/functions.html",[1413,1.913,1422,3.475]],["body/miscellaneous/functions.html",[8,0.486,14,0.023,66,0.023,67,0.023,74,3.109,1365,4.592,1413,3.627,1422,4.592,1423,5.43]],["title/index.html",[8,0.256,1424,2.864,1425,2.864]],["body/index.html",[4,0.221,14,0.025,57,0.931,66,0.018,67,0.018,85,3.198,93,3.073,130,4.087,271,4.602,275,2.014,435,4.321,655,2.197,850,3.059,1190,4.602,1361,2.691,1362,4.087,1426,3.618,1427,3.618,1428,3.618,1429,4.833,1430,3.618,1431,3.618,1432,3.618,1433,3.618,1434,4.833,1435,5.442,1436,3.618,1437,5.809,1438,3.618,1439,6.461,1440,3.618,1441,6.359,1442,3.618,1443,3.618,1444,3.618,1445,4.833,1446,3.618,1447,3.618,1448,5.442,1449,3.618,1450,4.833,1451,3.618,1452,3.618,1453,3.618,1454,3.618,1455,3.618,1456,5.809,1457,6.228,1458,3.618,1459,4.833,1460,3.618,1461,3.618,1462,3.618,1463,3.618,1464,3.618,1465,6.228,1466,4.833,1467,5.809,1468,3.618,1469,4.833,1470,3.618,1471,3.618,1472,4.833,1473,6.228,1474,5.809,1475,3.618,1476,4.833,1477,3.618,1478,3.618,1479,3.618,1480,3.618,1481,5.809,1482,3.618,1483,3.618,1484,3.618,1485,3.618,1486,4.833,1487,3.618,1488,3.618,1489,3.618,1490,3.618,1491,3.618,1492,4.833,1493,3.618,1494,3.618,1495,3.618,1496,4.833,1497,3.618,1498,3.618,1499,4.912,1500,4.833,1501,3.618,1502,3.618,1503,3.618,1504,3.618,1505,3.618,1506,3.618,1507,3.618,1508,3.618,1509,4.833,1510,3.618,1511,3.618,1512,3.618,1513,3.618,1514,3.618,1515,3.618,1516,3.618,1517,3.618,1518,3.618,1519,3.618,1520,4.833,1521,3.618,1522,3.618,1523,3.618,1524,3.618,1525,3.618,1526,4.833,1527,3.618,1528,3.618,1529,3.618,1530,4.833,1531,4.833,1532,3.618,1533,3.618,1534,3.618,1535,3.618,1536,3.618,1537,3.618,1538,3.618,1539,3.618,1540,3.618,1541,3.618,1542,3.618,1543,3.059,1544,3.618,1545,3.618,1546,3.618,1547,3.618,1548,3.618,1549,3.618,1550,3.059]],["title/modules.html",[70,2.214]],["body/modules.html",[14,0.023,66,0.023,67,0.023,69,3.492,70,2.487,79,3.175,80,3.175,81,3.175,82,2.911,1499,5.707,1551,6.749,1552,6.749,1553,6.749]],["title/overview.html",[1554,3.935]],["body/overview.html",[2,1.65,14,0.026,66,0.021,67,0.021,68,1.765,69,4.593,70,2.185,71,2.185,72,2.558,73,2.558,74,2.185,75,2.558,76,2.558,77,3.885,78,3.885,79,4.079,80,3.957,81,3.957,82,3.74,83,3.136,84,2.558,85,2.359,305,2.031,376,2.031,503,3.392,505,3.449,624,3.885,626,3.885,647,2.79,895,4.763,945,3.392,953,3.885,954,3.885,1027,3.392,1042,3.885,1043,3.885,1231,3.885,1232,3.885,1233,3.885,1554,3.885,1555,4.594,1556,4.594,1557,4.594]],["title/properties.html",[9,0.802,1385,2.422]],["body/properties.html",[9,1.053,14,0.026,66,0.023,67,0.023,275,3.004,1543,4.563,1550,4.563,1558,5.396,1559,5.396,1560,5.396]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":593,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1559,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["0.3.24",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":596,"title":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["1'})@apiresponse({status",{"_index":473,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["1.5.4",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1557,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["11.1.2",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":697,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["2.2.17",{"_index":1410,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":1369,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":438,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["201",{"_index":405,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["3.3.2",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":895,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"overview.html":{}}}],["4.0.2",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":408,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["404",{"_index":475,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["5",{"_index":1555,"title":{},"body":{"overview.html":{}}}],["5.5.3",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["6.0.6",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1556,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["8.14.1",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["a.numero",{"_index":840,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["abc123def456",{"_index":436,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["abierta",{"_index":591,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"miscellaneous/enumerations.html":{}}}],["abierta.entity",{"_index":990,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["abierta.entity.ts",{"_index":1127,"title":{},"body":{"entities/RespuestaAbierta.html":{},"coverage.html":{}}}],["abierta.entity.ts:15",{"_index":1129,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:18",{"_index":1135,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:21",{"_index":1130,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:24",{"_index":1131,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:28",{"_index":1132,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:32",{"_index":1133,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abiertas",{"_index":703,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["acceder",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["accesible",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["acceso",{"_index":608,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["acortar",{"_index":746,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["activo",{"_index":716,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actual",{"_index":790,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["actualiza",{"_index":824,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizada",{"_index":1065,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizar",{"_index":44,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizardto",{"_index":1022,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarestadoencuesta",{"_index":649,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarestadoencuesta(id",{"_index":659,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarpregunta",{"_index":1019,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizarpregunta(id",{"_index":1021,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarpregunta(idpregunta",{"_index":1054,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizarpreguntadto",{"_index":1,"title":{"classes/ActualizarPreguntaDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"coverage.html":{}}}],["actúa",{"_index":1097,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["adicional",{"_index":1253,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["agrega",{"_index":691,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agregan",{"_index":866,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agrego",{"_index":876,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agrupa",{"_index":1214,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["ahora",{"_index":786,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["ahora.toisostring",{"_index":791,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["ajusta",{"_index":1343,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["al",{"_index":232,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["alguien",{"_index":1205,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["alias",{"_index":760,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["allowing",{"_index":1487,"title":{},"body":{"index.html":{}}}],["almacenar",{"_index":1091,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["amazing",{"_index":1536,"title":{},"body":{"index.html":{}}}],["andwhere('encuesta.habilitada",{"_index":767,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["anidados",{"_index":210,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["anónima",{"_index":1352,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["api",{"_index":368,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/RespuestasController.html":{}}}],["api/v1/encuestas/resultados/{id}?codigo={codigoresultados",{"_index":726,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["api/v1/respuestas/participar/{id}/{codigorespuesta",{"_index":724,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apibody",{"_index":1212,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apioperation",{"_index":500,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiparam",{"_index":501,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiprefix",{"_index":720,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apiproperty",{"_index":201,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty()@isnumber()@isnotempty",{"_index":279,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isstring",{"_index":188,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":194,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isuuid('4')@isnotempty",{"_index":889,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({description",{"_index":256,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["apiproperty({enum",{"_index":294,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({type",{"_index":197,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiresponse",{"_index":502,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apitags",{"_index":1211,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apitags('respuestas",{"_index":1216,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apiversion",{"_index":722,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["app_url",{"_index":714,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["application",{"_index":1457,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1434,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":69,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["armar",{"_index":864,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["array",{"_index":1093,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["arrayminsize",{"_index":211,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arrayminsize(1",{"_index":230,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arraynotempty",{"_index":212,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arreglo",{"_index":229,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["arroja",{"_index":856,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["asc",{"_index":775,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["asegurar",{"_index":1102,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["asigna",{"_index":1063,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["asociadas",{"_index":242,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Pregunta.html":{}}}],["assignment",{"_index":853,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["async",{"_index":380,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["attachment",{"_index":619,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["author",{"_index":1543,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autogenerada",{"_index":353,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["autoloadentities",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["automaticamente",{"_index":246,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["automáticamente",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["await",{"_index":530,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["aws",{"_index":1476,"title":{},"body":{"index.html":{}}}],["añade",{"_index":540,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["añadirlo",{"_index":1278,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["b",{"_index":844,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["b.numero",{"_index":841,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["backers",{"_index":1537,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":498,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["badrequestexception('código",{"_index":579,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["badrequestexception('datos",{"_index":782,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["badrequestexception('encuesta",{"_index":823,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["badrequestexception('no",{"_index":1272,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["bajo",{"_index":1215,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["base",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["based",{"_index":1471,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":717,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/encuestas/${encuestacreada.id}/resultados?codigo=${codigoresultados",{"_index":727,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/respuestas/participar/${encuestacreada.id}/${codigorespuesta",{"_index":725,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["bd",{"_index":837,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["board",{"_index":1529,"title":{},"body":{"index.html":{}}}],["body",{"_index":493,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["body('habilitada",{"_index":600,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["boolean",{"_index":325,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["bootstrap",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":771,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["browse",{"_index":1553,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1551,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1429,"title":{},"body":{"index.html":{}}}],["busca",{"_index":822,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["buscar",{"_index":835,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["búsqueda",{"_index":1276,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cada",{"_index":236,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cadena",{"_index":60,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["cambiarestadoencuesta",{"_index":381,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cambiarestadoencuesta(id",{"_index":390,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["campo",{"_index":832,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["cantidad",{"_index":872,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["cantidad_respuestas",{"_index":918,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cantidadrespuestas",{"_index":1341,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["carga",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":333,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["case",{"_index":769,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["caso",{"_index":749,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["catch",{"_index":575,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["channel",{"_index":1502,"title":{},"body":{"index.html":{}}}],["check",{"_index":1465,"title":{},"body":{"index.html":{}}}],["clase",{"_index":43,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["class",{"_index":0,"title":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"overview.html":{}}}],["clave",{"_index":351,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["clicks",{"_index":1486,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1470,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule",{"_index":624,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule_imports",{"_index":625,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["cluster_encuestasmodule_providers",{"_index":626,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule",{"_index":953,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule_providers",{"_index":954,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule",{"_index":1042,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule_providers",{"_index":1043,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule",{"_index":1231,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_exports",{"_index":1232,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_providers",{"_index":1233,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["codigo",{"_index":431,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["codigo_respuesta",{"_index":311,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigo_resultados",{"_index":314,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigoparticipacion",{"_index":1245,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["codigoqr",{"_index":185,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigorespuesta",{"_index":251,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigoresultados",{"_index":252,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigotipo",{"_index":666,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["codigotipoenum",{"_index":511,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"miscellaneous/enumerations.html":{}}}],["codigotipoenum.respuesta",{"_index":555,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum.resultados",{"_index":576,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum})@isenum(codigotipoenum)@isnotempty",{"_index":891,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["codigovisualizacion",{"_index":1257,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["column",{"_index":340,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column('int",{"_index":1108,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column({default",{"_index":326,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({name",{"_index":310,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({nullable",{"_index":317,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["column({type",{"_index":986,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/RespuestaAbierta.html":{}}}],["columna",{"_index":350,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["come",{"_index":1493,"title":{},"body":{"index.html":{}}}],["como",{"_index":228,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["completa",{"_index":458,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["con",{"_index":37,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["condición",{"_index":1275,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["conexión",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/configuration",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{}}}],["configservice.get('database.host",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logger",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logging",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configuraciones",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configuración",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["configuration",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":745,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.error('error",{"_index":752,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.log",{"_index":836,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('comparación",{"_index":839,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.log('fecha",{"_index":789,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('validando",{"_index":788,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('¿est",{"_index":793,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.warn",{"_index":739,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["const",{"_index":529,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["construcción",{"_index":757,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor",{"_index":522,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"injectables/OpcionesService.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["constructor(encuestarepository",{"_index":654,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor(opcionrepository",{"_index":961,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["constructor(preguntarepo",{"_index":1050,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["constructor(private",{"_index":949,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["constructor(respuestarepository",{"_index":1241,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["construir",{"_index":1274,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["consulta",{"_index":545,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["consultar",{"_index":488,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["consultas",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["contenedor",{"_index":1098,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["contenido",{"_index":623,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["content",{"_index":617,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["conteo",{"_index":815,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["contiene",{"_index":1092,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["contienen",{"_index":641,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["contraseña",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["controlador",{"_index":520,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["controladores",{"_index":638,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["controller",{"_index":374,"title":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"coverage.html":{}}}],["controller('encuestas",{"_index":519,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["controller('preguntas",{"_index":1030,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["controller('preguntas/:preguntaid/opciones",{"_index":948,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["controller('respuestas",{"_index":1218,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["controllers",{"_index":376,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["controllers/encuestas.controller",{"_index":628,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["controllers/opciones.controller",{"_index":958,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["controllers/respuestas.controller",{"_index":1235,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["convierte",{"_index":880,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["copia",{"_index":706,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["correctamente",{"_index":830,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["corta",{"_index":539,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["corto",{"_index":244,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["courses",{"_index":1508,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1361,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crea",{"_index":399,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["creación",{"_index":704,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["creada",{"_index":48,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{}}}],["crear",{"_index":224,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["crearencuesta",{"_index":382,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearencuesta(dto",{"_index":396,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearopcion",{"_index":936,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["crearopcion(preguntaid",{"_index":938,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["create",{"_index":218,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["create.php?url=${encodeuricomponent(url",{"_index":737,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["createencuestadto",{"_index":182,"title":{"classes/CreateEncuestaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["createencuestadto})@apiresponse({status",{"_index":1165,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["createencuestaresponsedto",{"_index":249,"title":{"classes/CreateEncuestaResponseDto.html":{}},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"coverage.html":{}}}],["createencuestaresponsedto})@apiresponse({status",{"_index":407,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["createopciondto",{"_index":276,"title":{"classes/CreateOpcionDto.html":{}},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"coverage.html":{}}}],["createpreguntadto",{"_index":196,"title":{"classes/CreatePreguntaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["createquerybuilder('encuesta",{"_index":759,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["csv",{"_index":602,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["cualquier",{"_index":428,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cuando",{"_index":450,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["cuantas",{"_index":1340,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuenta",{"_index":1339,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuerpo",{"_index":1033,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["current_timestamp",{"_index":320,"title":{},"body":{"entities/Encuesta.html":{}}}],["cuántas",{"_index":929,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["código",{"_index":247,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["código'})@apiparam({name",{"_index":472,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["códigos",{"_index":403,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cómo",{"_index":1203,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["data",{"_index":221,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["database",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":191,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["date(encuesta.fechavencimiento",{"_index":787,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["datos",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["de",{"_index":40,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["debe",{"_index":1081,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["deben",{"_index":700,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["declaración",{"_index":637,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["declarations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["decorador",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["decoradores",{"_index":338,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"entities/RespuestaAbierta.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["deeper",{"_index":1504,"title":{},"body":{"index.html":{}}}],["default",{"_index":319,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["defecto",{"_index":992,"title":{},"body":{"entities/Pregunta.html":{}}}],["define",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["definidos",{"_index":302,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["definir",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["del",{"_index":32,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["delete",{"_index":944,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["delete(':id",{"_index":942,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["delimiter",{"_index":883,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dentro",{"_index":925,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["dependencies",{"_index":71,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1456,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1475,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1466,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1485,"title":{},"body":{"index.html":{}}}],["depuración",{"_index":426,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["descarga",{"_index":611,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["desconocido",{"_index":753,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["description",{"_index":275,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"index.html":{},"properties.html":{}}}],["desde",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["deshabilita",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["deshabilitada",{"_index":829,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["deshabilitar",{"_index":371,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["detallada",{"_index":425,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["determinar",{"_index":831,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["development",{"_index":1442,"title":{},"body":{"index.html":{}}}],["devolvemos",{"_index":1193,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["devolverla",{"_index":367,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["devtools",{"_index":1515,"title":{},"body":{"index.html":{}}}],["devuelve",{"_index":457,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["diagnosticar",{"_index":448,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["diferente",{"_index":1347,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["dinámico",{"_index":715,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["disable",{"_index":847,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["discord",{"_index":1501,"title":{},"body":{"index.html":{}}}],["disponibles",{"_index":1319,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["disposition",{"_index":618,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dive",{"_index":1503,"title":{},"body":{"index.html":{}}}],["documenta",{"_index":225,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["documentar",{"_index":203,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["documentation",{"_index":1362,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["donde",{"_index":1195,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["dto",{"_index":33,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["dto.codigo",{"_index":550,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dto.fechavencimiento",{"_index":708,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dto.preguntas",{"_index":692,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dto.tipo",{"_index":551,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/create",{"_index":507,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["dtos/obtener",{"_index":509,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/registrar",{"_index":1201,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["dtos/visualizar",{"_index":1208,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["e2e",{"_index":1451,"title":{},"body":{"index.html":{}}}],["each",{"_index":235,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["efficient",{"_index":1430,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1463,"title":{},"body":{"index.html":{}}}],["ejecuta",{"_index":777,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ejemplo",{"_index":366,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["ejemplorespuesta",{"_index":588,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["el",{"_index":57,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"index.html":{}}}],["elegidas",{"_index":932,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["elemento",{"_index":234,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["elimina",{"_index":1039,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminada",{"_index":977,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["eliminan",{"_index":1067,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminar",{"_index":1038,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminaropcion",{"_index":937,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminaropcion(id",{"_index":941,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminarpregunta",{"_index":1020,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpregunta(id",{"_index":1025,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpreguntaconopciones",{"_index":1049,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminarpreguntaconopciones(idpregunta",{"_index":1058,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["ella",{"_index":1167,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["emilia",{"_index":603,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["en",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["encabezados",{"_index":613,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encontrada",{"_index":476,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encontraron",{"_index":858,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuentra",{"_index":779,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuentran",{"_index":855,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta",{"_index":220,"title":{"entities/Encuesta.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["encuesta'})@apiresponse({status",{"_index":1176,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["encuesta.codigorespuesta",{"_index":587,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.codigoresultados",{"_index":1324,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuesta.dto",{"_index":508,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.dto.ts",{"_index":184,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["encuesta.dto.ts:10",{"_index":890,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:15",{"_index":892,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:20",{"_index":195,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:28",{"_index":200,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:32",{"_index":193,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:37",{"_index":190,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:42",{"_index":189,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.enlaceparticipacion",{"_index":534,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encuesta.entity",{"_index":988,"title":{},"body":{"entities/Pregunta.html":{}}}],["encuesta.fechavencimiento",{"_index":785,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.habilitada",{"_index":826,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.id",{"_index":558,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.nombre",{"_index":559,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas",{"_index":1001,"title":{},"body":{"entities/Pregunta-1.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas.foreach((pregunta",{"_index":842,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta.preguntas.map((pregunta",{"_index":560,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["encuesta.respuestas",{"_index":804,"title":{},"body":{"injectables/EncuestasService.html":{},"entities/Respuesta-1.html":{}}}],["encuesta.respuestas)@joincolumn({name",{"_index":1119,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["encuesta.respuestas.length",{"_index":821,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada",{"_index":711,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigorespuesta",{"_index":732,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigoresultados",{"_index":733,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.fechavencimiento",{"_index":734,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.id",{"_index":731,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestaid",{"_index":1249,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuestarepository",{"_index":658,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuestas",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/dtos/actualizar",{"_index":1029,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["encuestas/dtos/create",{"_index":947,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/RespuestasController.html":{}}}],["encuestas/entities/encuesta.entity",{"_index":1010,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/entities/opcion.entity",{"_index":956,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/entities/pregunta.entity",{"_index":957,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/enums/tipos",{"_index":1009,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["encuestascontroller",{"_index":375,"title":{"controllers/EncuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"coverage.html":{}}}],["encuestasmodule",{"_index":79,"title":{"modules/EncuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["encuestasservice",{"_index":503,"title":{"injectables/EncuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["endpoint",{"_index":444,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["enlace",{"_index":243,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["enlacecorto",{"_index":186,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlaceparticipacion",{"_index":253,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlaces",{"_index":402,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["enlacevisualizacion",{"_index":254,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"injectables/EncuestasService.html":{}}}],["ensure",{"_index":1461,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1519,"title":{},"body":{"index.html":{}}}],["entidad",{"_index":342,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["entidades",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["entities",{"_index":305,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"overview.html":{}}}],["entities/encuesta.entity",{"_index":510,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["entities/opcion.entity",{"_index":633,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/pregunta.entity",{"_index":631,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/respuesta",{"_index":1237,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entities/respuesta.entity",{"_index":1236,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entity",{"_index":304,"title":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["entity('respuestas",{"_index":1117,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["entity('respuestas_abiertas",{"_index":1137,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["entity('respuestas_opciones",{"_index":1145,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["entorno",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":36,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["enumerador",{"_index":297,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["enumerations",{"_index":1414,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/codigo",{"_index":512,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["enums/tipos",{"_index":34,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{}}}],["env",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["enviar",{"_index":610,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["envía",{"_index":622,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["error",{"_index":740,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["error.message",{"_index":748,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["es",{"_index":54,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["eslint",{"_index":846,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["eslint/no",{"_index":851,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["especifica",{"_index":995,"title":{},"body":{"entities/Pregunta.html":{}}}],["específica",{"_index":1172,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["específico",{"_index":756,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["específicos",{"_index":1083,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["esquema",{"_index":1346,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["est",{"_index":226,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["esta",{"_index":52,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["estado",{"_index":825,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["estadísticas",{"_index":1186,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["este",{"_index":443,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["esto",{"_index":1344,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["estructura",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["están",{"_index":1283,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["etc",{"_index":1198,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["etiqueta",{"_index":1213,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["exactamente",{"_index":1308,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["example",{"_index":435,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"index.html":{}}}],["excepción",{"_index":781,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["exclude",{"_index":346,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluir",{"_index":347,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluye",{"_index":363,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["existe",{"_index":1061,"title":{},"body":{"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["existentes",{"_index":994,"title":{},"body":{"entities/Pregunta.html":{}}}],["exitosamente",{"_index":406,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["exitosamente'})@apiresponse({status",{"_index":440,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["experience",{"_index":1506,"title":{},"body":{"index.html":{}}}],["explicitamente",{"_index":1096,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["explícitamente",{"_index":557,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["exporta",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["exportación",{"_index":642,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["exportar",{"_index":604,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exportarresultadoscsv",{"_index":383,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exportarresultadoscsv(id",{"_index":412,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["express",{"_index":518,"title":{},"body":{"controllers/EncuestasController.html":{},"dependencies.html":{}}}],["extra",{"_index":370,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["extrae",{"_index":1032,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["falla",{"_index":446,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["false",{"_index":269,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["false})@isarray()@isoptional()@validatenested({each",{"_index":291,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["falso",{"_index":698,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["faltan",{"_index":1266,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["fast",{"_index":1479,"title":{},"body":{"index.html":{}}}],["features",{"_index":1489,"title":{},"body":{"index.html":{}}}],["fecha",{"_index":266,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fecha_vencimiento",{"_index":322,"title":{},"body":{"entities/Encuesta.html":{}}}],["fechaactualizacion",{"_index":307,"title":{},"body":{"entities/Encuesta.html":{}}}],["fechavencimiento",{"_index":187,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fechavencimiento.toisostring",{"_index":792,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fetch",{"_index":735,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["few",{"_index":1481,"title":{},"body":{"index.html":{}}}],["fila",{"_index":860,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["fila.respuesta",{"_index":878,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas",{"_index":859,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas.push",{"_index":869,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas.push(fila",{"_index":879,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["filename=\"resultados_encuesta_${id}.csv",{"_index":620,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["filter((ra",{"_index":807,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filter((ro",{"_index":817,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filtra",{"_index":766,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["fina",{"_index":1350,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["flatmap((r",{"_index":805,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["focus",{"_index":1488,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1523,"title":{},"body":{"index.html":{}}}],["format",{"_index":270,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["formato",{"_index":605,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["foránea",{"_index":910,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["framework",{"_index":1190,"title":{},"body":{"controllers/RespuestasController.html":{},"index.html":{}}}],["frontend",{"_index":1194,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["fue",{"_index":828,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fueron",{"_index":931,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["full",{"_index":1518,"title":{},"body":{"index.html":{}}}],["funcionalidad",{"_index":369,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["funciones",{"_index":1221,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["función",{"_index":677,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["function",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1422,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1484,"title":{},"body":{"index.html":{}}}],["genera",{"_index":707,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generado",{"_index":245,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{}}}],["generamos",{"_index":695,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generando",{"_index":401,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["generar",{"_index":532,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["generarcodigoqr",{"_index":650,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarcodigoqr(texto",{"_index":662,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto",{"_index":651,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto(url",{"_index":664,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["get(':id",{"_index":419,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/csv/:codigoresultados",{"_index":415,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados",{"_index":595,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados')@apioperation({summary",{"_index":471,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo",{"_index":570,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo')@apioperation({summary",{"_index":422,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo",{"_index":585,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo')@apioperation({summary",{"_index":466,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo",{"_index":552,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo')@apioperation({summary",{"_index":456,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:id/:tokenparticipacion",{"_index":1229,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('participar/:id/:tokenparticipacion')@apioperation({summary",{"_index":1160,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:codigo",{"_index":580,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:codigo')@apioperation({summary",{"_index":480,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:tokenvisualizacion",{"_index":1226,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:tokenvisualizacion')@apioperation({summary",{"_index":1180,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["getting",{"_index":1424,"title":{"index.html":{}},"body":{}}],["global",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["globalmente",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":1511,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1533,"title":{},"body":{"index.html":{}}}],["guarda",{"_index":710,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["guardamos",{"_index":1351,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["guardar",{"_index":1196,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["ha",{"_index":1280,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["habilita",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["habilitada",{"_index":308,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["habilitado",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["hace",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1505,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1494,"title":{},"body":{"index.html":{}}}],["hay",{"_index":877,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["haypreguntaabierta",{"_index":861,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["header",{"_index":884,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["helmet",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1509,"title":{},"body":{"index.html":{}}}],["here",{"_index":1541,"title":{},"body":{"index.html":{}}}],["herramientas",{"_index":1188,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["host",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:3000",{"_index":719,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["http://tinyurl.com/api",{"_index":736,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["httpcode",{"_index":1191,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["httpcode(httpstatus.created",{"_index":1223,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["https://nestjs.com",{"_index":1547,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":1192,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["id",{"_index":255,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["id_encuesta",{"_index":996,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["id_encuesta'})@exclude",{"_index":979,"title":{},"body":{"entities/Pregunta.html":{}}}],["id_opcion",{"_index":1139,"title":{},"body":{"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta",{"_index":590,"title":{},"body":{"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta'})@exclude",{"_index":902,"title":{},"body":{"entities/Opcion.html":{}}}],["id_respuesta",{"_index":1128,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["identifica",{"_index":1079,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["identificar",{"_index":896,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["identifier",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["idopcion",{"_index":1318,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["idpregunta",{"_index":1057,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["ids",{"_index":467,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["ignora",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreenvfile",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["importa",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["importación",{"_index":337,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["importamos",{"_index":1187,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["imports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["incluir",{"_index":556,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["incluye",{"_index":1185,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["incluyendo",{"_index":1168,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["incompletos",{"_index":410,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indica",{"_index":50,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"entities/Encuesta.html":{}}}],["individual",{"_index":1077,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["individuales",{"_index":867,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["información",{"_index":424,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["information",{"_index":1468,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1491,"title":{},"body":{"index.html":{}}}],["inicializar",{"_index":1332,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inject",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":646,"title":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["injectables",{"_index":647,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"overview.html":{}}}],["injectrepository",{"_index":675,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(encuesta",{"_index":687,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(opcion",{"_index":967,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(pregunta",{"_index":968,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuesta",{"_index":688,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaabierta",{"_index":1263,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaopcion",{"_index":1264,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["innerjoinandselect('encuesta.preguntas",{"_index":761,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["insert",{"_index":357,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["insertar",{"_index":359,"title":{},"body":{"entities/Encuesta.html":{}}}],["install",{"_index":1483,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1440,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":747,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["instancia",{"_index":240,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["integración",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["intenta",{"_index":427,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["intentar",{"_index":572,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["interact",{"_index":1512,"title":{},"body":{"index.html":{}}}],["inválidas",{"_index":1269,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inválido",{"_index":477,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["inválido'})@apiresponse({status",{"_index":1177,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inválidos",{"_index":409,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["inyección",{"_index":525,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["inyecta",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["inyectable",{"_index":686,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["inyectamos",{"_index":1219,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inyectar",{"_index":673,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["isarray",{"_index":213,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isarray()@validatenested({each",{"_index":1074,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["isdatestring",{"_index":214,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["isenum",{"_index":26,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["isenum(codigotipoenum",{"_index":897,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isenum(tiposrespuestaenum",{"_index":63,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["isglobal",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber",{"_index":282,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber()@isnotempty",{"_index":1146,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional",{"_index":24,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isarray()@isnumber",{"_index":1148,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isdatestring",{"_index":192,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["isoptional()@isenum(tiposrespuestaenum",{"_index":21,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["isoptional()@isstring",{"_index":17,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring()@isnotempty()@type(undefined",{"_index":1151,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isuuid",{"_index":893,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isuuid('4",{"_index":894,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["itera",{"_index":1325,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["job",{"_index":1526,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1528,"title":{},"body":{"index.html":{}}}],["join",{"_index":1539,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":905,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["json.stringify(opcionesdisponibles",{"_index":1323,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["junto",{"_index":1040,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["kamil",{"_index":1544,"title":{},"body":{"index.html":{}}}],["key",{"_index":1458,"title":{},"body":{"index.html":{}}}],["la",{"_index":62,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["lanza",{"_index":780,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["las",{"_index":30,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["le",{"_index":690,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["learn",{"_index":1497,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('pregunta.opciones",{"_index":763,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["legend",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["libre",{"_index":1084,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["librería",{"_index":681,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["license",{"_index":1550,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1531,"title":{},"body":{"index.html":{}}}],["line",{"_index":849,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["linkedin",{"_index":1525,"title":{},"body":{"index.html":{}}}],["lista",{"_index":241,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["listas",{"_index":1333,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["llama",{"_index":547,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["lo",{"_index":1031,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["load",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":1469,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1521,"title":{},"body":{"index.html":{}}}],["los",{"_index":38,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["lógica",{"_index":629,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["maia",{"_index":373,"title":{},"body":{"entities/Encuesta.html":{}}}],["makes",{"_index":1477,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1490,"title":{},"body":{"index.html":{}}}],["maneja",{"_index":1217,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["manejar",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["manejarán",{"_index":639,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["manera",{"_index":812,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["manytoone",{"_index":906,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["manytoone(undefined",{"_index":1000,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":901,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["map((ra",{"_index":809,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["marca",{"_index":685,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":1473,"title":{},"body":{"index.html":{}}}],["menos",{"_index":233,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["mensaje",{"_index":827,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["message",{"_index":583,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["metadata",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":379,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["mica",{"_index":372,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["miscellaneous",{"_index":1413,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":1530,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1445,"title":{},"body":{"index.html":{}}}],["module",{"_index":68,"title":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["modules",{"_index":70,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/encuestas/encuestas.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/opciones/opciones.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/preguntas/preguntas.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/respuestas/respuestas.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1467,"title":{},"body":{"index.html":{}}}],["mostrarán",{"_index":1204,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["muchos",{"_index":362,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["myśliwiec",{"_index":1545,"title":{},"body":{"index.html":{}}}],["método",{"_index":689,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["módulo",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["módulos",{"_index":491,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["múltiple",{"_index":699,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["múltiples",{"_index":1089,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["name",{"_index":349,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["navegador",{"_index":1210,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["necesarias",{"_index":1189,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["necesarios",{"_index":492,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["need",{"_index":1516,"title":{},"body":{"index.html":{}}}],["negocio",{"_index":630,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["nest",{"_index":1435,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1549,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["new",{"_index":578,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["newline",{"_index":885,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["next",{"_index":848,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["nico",{"_index":607,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["node",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":1428,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["notfoundexception",{"_index":680,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('encuesta",{"_index":801,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('no",{"_index":857,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["notfoundexception('opción",{"_index":975,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["notfoundexception('pregunta",{"_index":970,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["npm",{"_index":1439,"title":{},"body":{"index.html":{}}}],["nueva",{"_index":398,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["nuevo",{"_index":61,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["nuevos",{"_index":1036,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["nullable",{"_index":312,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["nulos",{"_index":356,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["number",{"_index":273,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["numero",{"_index":278,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["numérico",{"_index":1162,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["número",{"_index":284,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["números",{"_index":1094,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["o",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["object",{"_index":223,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["object.assign(pregunta",{"_index":1062,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["objeto",{"_index":237,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["objetos",{"_index":209,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["obligatorias",{"_index":1267,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["obligatorio",{"_index":1078,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["obtenemos",{"_index":1354,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["obtener",{"_index":423,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuesta",{"_index":384,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuesta(id",{"_index":417,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuestadebug",{"_index":385,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(@param('codigo",{"_index":571,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(codigo",{"_index":421,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadto",{"_index":418,"title":{"classes/ObtenerEncuestaDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["obtenerencuestaparaparticipacion",{"_index":1155,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipacion(id",{"_index":1158,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipar",{"_index":386,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaparaparticipar(codigo",{"_index":455,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaporcodigo",{"_index":652,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerencuestaporcodigo(codigo",{"_index":668,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerestructuraencuesta",{"_index":387,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerestructuraencuesta(codigo",{"_index":465,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultados",{"_index":388,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultados(id",{"_index":470,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultadosencuesta",{"_index":389,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultadosencuesta(codigo",{"_index":479,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenida",{"_index":439,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["obtenidas",{"_index":1183,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["obtenidos",{"_index":474,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtiene",{"_index":442,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["offer",{"_index":1527,"title":{},"body":{"index.html":{}}}],["official",{"_index":1474,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":341,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["onetomany(undefined",{"_index":331,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["opcion",{"_index":632,"title":{"entities/Opcion.html":{}},"body":{"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["opcion.conteo",{"_index":875,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.dto",{"_index":299,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["opcion.dto.ts",{"_index":277,"title":{},"body":{"classes/CreateOpcionDto.html":{},"coverage.html":{}}}],["opcion.dto.ts:14",{"_index":280,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.dto.ts:9",{"_index":281,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.entity",{"_index":909,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["opcion.entity.ts",{"_index":1138,"title":{},"body":{"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["opcion.entity.ts:14",{"_index":1140,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:17",{"_index":1142,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:20",{"_index":1141,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:24",{"_index":1144,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:28",{"_index":1143,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.id",{"_index":567,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion.id).length",{"_index":819,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.numero",{"_index":568,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["opcion.opcion",{"_index":874,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.pregunta",{"_index":983,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["opcion.texto",{"_index":569,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion_multiple_seleccion_multiple",{"_index":1088,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcion_multiple_seleccion_simple",{"_index":1085,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcional",{"_index":55,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["opcionconrespuestasdto",{"_index":915,"title":{"classes/OpcionConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["opciones",{"_index":288,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["opcionesconteo",{"_index":814,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcionescontroller",{"_index":933,"title":{"controllers/OpcionesController.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"coverage.html":{}}}],["opcionesdisponibles",{"_index":1320,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["opcionesmodule",{"_index":80,"title":{"modules/OpcionesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OpcionesModule.html":{},"modules.html":{},"overview.html":{}}}],["opcionesservice",{"_index":945,"title":{"injectables/OpcionesService.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"coverage.html":{},"overview.html":{}}}],["opcionguardada",{"_index":972,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["opcionrepo",{"_index":1051,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["opcionrepository",{"_index":964,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["opción",{"_index":283,"title":{},"body":{"classes/CreateOpcionDto.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["open",{"_index":1532,"title":{},"body":{"index.html":{}}}],["optional",{"_index":10,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["orden",{"_index":286,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["ordena",{"_index":773,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["original",{"_index":743,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["otros",{"_index":645,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["out",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1554,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1287,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["p.numero).join",{"_index":1291,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["package",{"_index":1385,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["papa",{"_index":684,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["papa.unparse(filas",{"_index":881,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["papaparse",{"_index":683,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["para",{"_index":29,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["param",{"_index":494,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["param('codigo",{"_index":553,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["param('codigoresultados",{"_index":606,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["param('id",{"_index":541,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["param('preguntaid",{"_index":950,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["param('tokenparticipacion",{"_index":1224,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["param('tokenvisualizacion",{"_index":1227,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["parameters",{"_index":393,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["params",{"_index":546,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["parseada",{"_index":838,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["parseintpipe",{"_index":499,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["part",{"_index":1517,"title":{},"body":{"index.html":{}}}],["participación",{"_index":429,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["participación'})@apiparam({name",{"_index":462,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["participación.'})@apiparam({name",{"_index":1174,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["participar",{"_index":258,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["participar.'})@apiparam({name",{"_index":1161,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["parámetro",{"_index":542,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["parámetros",{"_index":544,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["password",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["pasándole",{"_index":1035,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch",{"_index":495,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["patch(':id",{"_index":1023,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch(':id/habilitar",{"_index":391,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["permite",{"_index":358,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["permitido",{"_index":303,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Pregunta.html":{}}}],["permitidos",{"_index":298,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["permitiendo",{"_index":355,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["permitir",{"_index":991,"title":{},"body":{"entities/Pregunta.html":{}}}],["personalizada",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["personalizado",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["pertenece",{"_index":912,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["petición",{"_index":1034,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["pg",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1472,"title":{},"body":{"index.html":{}}}],["please",{"_index":1500,"title":{},"body":{"index.html":{}}}],["pm2",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["poder",{"_index":1220,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["por",{"_index":365,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["port",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["posición",{"_index":287,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["possible",{"_index":1464,"title":{},"body":{"index.html":{}}}],["post",{"_index":496,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion",{"_index":1222,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion')@httpcode(httpstatus.created)@apioperation({summary",{"_index":1170,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post()@apioperation({summary",{"_index":397,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["postgres",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":378,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["pregunta",{"_index":46,"title":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["pregunta.dto",{"_index":219,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["pregunta.dto.ts",{"_index":7,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["pregunta.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.dto.ts:20",{"_index":289,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:25",{"_index":293,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:30",{"_index":296,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:37",{"_index":292,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:8",{"_index":19,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.encuesta",{"_index":332,"title":{},"body":{"entities/Encuesta.html":{}}}],["pregunta.entity",{"_index":344,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{}}}],["pregunta.id",{"_index":561,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.numero",{"_index":562,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones",{"_index":565,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.foreach((opcion",{"_index":873,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones.length",{"_index":592,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.map((opcion",{"_index":566,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.sort((a",{"_index":843,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones?.length",{"_index":702,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones[0].id",{"_index":594,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["pregunta.pregunta",{"_index":870,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.respuestas.foreach((textorespuesta",{"_index":868,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.texto",{"_index":563,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.tipo",{"_index":564,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas",{"_index":1327,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.id",{"_index":1328,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.numero",{"_index":1329,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones",{"_index":1334,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones.push",{"_index":1348,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.respuestas_abiertas",{"_index":1335,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.texto",{"_index":1330,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.tipo",{"_index":1331,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestasdto",{"_index":924,"title":{"classes/PreguntaConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["preguntaid",{"_index":940,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["preguntaopcion",{"_index":764,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["preguntarepo",{"_index":1053,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["preguntarepository",{"_index":962,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["preguntas.opciones",{"_index":797,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas/:preguntaid/opciones",{"_index":935,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["preguntas/controllers/preguntas.controller",{"_index":1046,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntas/services/preguntas.service",{"_index":1045,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntascontroller",{"_index":1017,"title":{"controllers/PreguntasController.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"coverage.html":{}}}],["preguntasfaltantes",{"_index":1285,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.length",{"_index":1289,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.map((p",{"_index":1290,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasmodule",{"_index":81,"title":{"modules/PreguntasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PreguntasModule.html":{},"modules.html":{},"overview.html":{}}}],["preguntasobligatorias.filter",{"_index":1286,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasrespondidas.includes(p.id",{"_index":1288,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasservice",{"_index":1027,"title":{"injectables/PreguntasService.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"coverage.html":{},"overview.html":{}}}],["primaria",{"_index":352,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["primarygeneratedcolumn",{"_index":328,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["primero",{"_index":445,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["principal",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["private",{"_index":523,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["probar",{"_index":1209,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["problemas",{"_index":449,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["procesamos",{"_index":811,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["procesar",{"_index":802,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["process.env.node_env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["producción",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progressive",{"_index":1427,"title":{},"body":{"index.html":{}}}],["project",{"_index":1437,"title":{},"body":{"index.html":{}}}],["promise",{"_index":395,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"properties.html":{}}}],["propiedad",{"_index":53,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["propiedades",{"_index":31,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["proporciona",{"_index":1277,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["proporcionado",{"_index":490,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["proporcionaron",{"_index":1273,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["proveedores",{"_index":640,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["pueda",{"_index":643,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["puede",{"_index":433,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["puerto",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{}}}],["qr",{"_index":248,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["qr'})@apiresponse({status",{"_index":404,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["qrcode",{"_index":682,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["qrcode.todataurl(texto",{"_index":750,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["qu",{"_index":453,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["que",{"_index":51,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["query",{"_index":497,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["query('codigo",{"_index":597,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["query.addorderby('preguntaopcion.numero",{"_index":776,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigorespuesta",{"_index":770,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigoresultados",{"_index":772,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.getone",{"_index":778,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.orderby('pregunta.numero",{"_index":774,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["questions",{"_index":1498,"title":{},"body":{"index.html":{}}}],["quiera",{"_index":1206,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["quotes",{"_index":882,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r",{"_index":913,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["r.id_pregunta",{"_index":1282,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r.opcion",{"_index":914,"title":{},"body":{"entities/Opcion.html":{}}}],["r.pregunta",{"_index":997,"title":{},"body":{"entities/Pregunta.html":{}}}],["r.respuestasabiertas",{"_index":806,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.respuestasopciones",{"_index":816,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.texto",{"_index":1338,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r\\n",{"_index":886,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ra",{"_index":1110,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.id_pregunta",{"_index":808,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ra.respuesta",{"_index":1111,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.texto",{"_index":810,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["read",{"_index":1540,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":524,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["ready",{"_index":1455,"title":{},"body":{"index.html":{}}}],["real",{"_index":1513,"title":{},"body":{"index.html":{}}}],["rechazar",{"_index":784,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["recibido",{"_index":1099,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["recopiladas",{"_index":482,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["recorre",{"_index":863,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["recuperar",{"_index":1197,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["reemplaza",{"_index":537,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["referencia",{"_index":911,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["reflect",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["registarrespuestasdto",{"_index":1248,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas",{"_index":1270,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas.length",{"_index":1271,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registra",{"_index":1251,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registradas",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrar",{"_index":1171,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestas",{"_index":1156,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrarrespuestas(codigoparticipacion",{"_index":1247,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registrarrespuestas(id",{"_index":1169,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestasdto",{"_index":1070,"title":{"classes/RegistrarRespuestasDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["registro",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["registros",{"_index":993,"title":{},"body":{"entities/Pregunta.html":{}}}],["reglas",{"_index":1101,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["relacionada",{"_index":343,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["relacionadas",{"_index":360,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["relación",{"_index":361,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["relations",{"_index":796,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["relevantes",{"_index":730,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["repositorio",{"_index":676,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["repositorios",{"_index":674,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["repository",{"_index":655,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"index.html":{}}}],["representa",{"_index":285,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"modules/EncuestasModule.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["requerida",{"_index":1301,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["requerido",{"_index":598,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["requiere",{"_index":1173,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["required",{"_index":268,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["requiring",{"_index":1480,"title":{},"body":{"index.html":{}}}],["res",{"_index":413,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.send(csv",{"_index":621,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.setheader",{"_index":616,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.setheader('content",{"_index":614,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["reset",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["resources",{"_index":1492,"title":{},"body":{"index.html":{}}}],["responde",{"_index":1200,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["responder",{"_index":586,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["responder'})@apiparam({name",{"_index":468,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respondidas",{"_index":1284,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["response",{"_index":414,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["response.dto",{"_index":514,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["response.dto.ts",{"_index":250,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":262,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:14",{"_index":264,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:17",{"_index":265,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:20",{"_index":263,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:23",{"_index":257,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:31",{"_index":272,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:5",{"_index":274,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:8",{"_index":259,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.ok",{"_index":738,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.statustext",{"_index":742,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.text",{"_index":744,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuesta",{"_index":41,"title":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["respuesta.encuesta",{"_index":335,"title":{},"body":{"entities/Encuesta.html":{}}}],["respuesta.entity",{"_index":1136,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["respuesta.enum",{"_index":35,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuesta.enum.ts",{"_index":1418,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respuestaabierta",{"_index":989,"title":{"entities/RespuestaAbierta.html":{}},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaabierta.respuesta",{"_index":1123,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaabiertarepository",{"_index":1242,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada",{"_index":1294,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada.id",{"_index":1303,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaopcion",{"_index":907,"title":{"entities/RespuestaOpcion.html":{}},"body":{"entities/Opcion.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaopcion.respuesta",{"_index":1125,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaopciones",{"_index":1238,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["respuestaopcionrepository",{"_index":1243,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta",{"_index":1296,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.id_pregunta",{"_index":1298,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones",{"_index":1305,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones.length",{"_index":1306,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones[0",{"_index":1311,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.texto",{"_index":1300,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.tipo",{"_index":1299,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapreguntadto",{"_index":1073,"title":{"classes/RespuestaPreguntaDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestarepository",{"_index":656,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["respuestas",{"_index":309,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dto",{"_index":1202,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dto.ts",{"_index":1072,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestas.dto.ts:23",{"_index":1147,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:28",{"_index":1152,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:36",{"_index":1150,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:42",{"_index":1149,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:55",{"_index":1076,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["respuestas.dtos",{"_index":517,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dtos.ts",{"_index":917,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["respuestas.dtos.ts:13",{"_index":1012,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:14",{"_index":1013,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:15",{"_index":1015,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:16",{"_index":1016,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:17",{"_index":1014,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:18",{"_index":1011,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:26",{"_index":920,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:27",{"_index":922,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:28",{"_index":921,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:29",{"_index":919,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:4",{"_index":1358,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:5",{"_index":1359,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:6",{"_index":1355,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:7",{"_index":1356,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:8",{"_index":1357,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:9",{"_index":1360,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.respuestasabiertas",{"_index":798,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones",{"_index":799,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones.opcion",{"_index":800,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas/dtos/visualizar",{"_index":516,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas/entities/respuesta",{"_index":1116,"title":{},"body":{"entities/Respuesta.html":{}}}],["respuestas/entities/respuesta.entity",{"_index":345,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["respuestas/respuestas.module",{"_index":634,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["respuestas/services/respuestas.service",{"_index":506,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas_abiertas",{"_index":926,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestasabiertas",{"_index":998,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["respuestasabiertas.map",{"_index":1337,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestascontroller",{"_index":1153,"title":{"controllers/RespuestasController.html":{}},"body":{"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"coverage.html":{}}}],["respuestasmodule",{"_index":82,"title":{"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["respuestasopciones",{"_index":1105,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["respuestasservice",{"_index":505,"title":{"injectables/RespuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["respuestastexto",{"_index":803,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultado",{"_index":581,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["resultado.preguntas.push(preguntaconrespuestas",{"_index":1349,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["resultados",{"_index":261,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"miscellaneous/enumerations.html":{}}}],["resultados)'})@apiparam({name",{"_index":430,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["resultados.resultados.foreach((pregunta",{"_index":865,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultados.resultados.some",{"_index":862,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultadoscsv",{"_index":653,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultadoscsv(id",{"_index":671,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["results",{"_index":66,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retorna",{"_index":548,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["retornar",{"_index":754,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["return",{"_index":536,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["returns",{"_index":394,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["ro",{"_index":1113,"title":{},"body":{"entities/Respuesta.html":{}}}],["ro.opcion?.id",{"_index":818,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ro.respuesta",{"_index":1114,"title":{},"body":{"entities/Respuesta.html":{}}}],["run",{"_index":1441,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1462,"title":{},"body":{"index.html":{}}}],["rutas",{"_index":521,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["rxjs",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["sabe",{"_index":452,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["scalable",{"_index":1431,"title":{},"body":{"index.html":{}}}],["se",{"_index":451,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["sea",{"_index":59,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["según",{"_index":238,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccion",{"_index":1317,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["seleccionable",{"_index":1087,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionables",{"_index":1090,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionada",{"_index":1309,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["seleccionadas",{"_index":1095,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionar",{"_index":1307,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["select",{"_index":1322,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["ser",{"_index":434,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"classes/ObtenerEncuestaDto.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["serialización",{"_index":348,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["serializar",{"_index":364,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["server",{"_index":1432,"title":{},"body":{"index.html":{}}}],["services/encuestas.service",{"_index":504,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{}}}],["services/opciones.service",{"_index":946,"title":{},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{}}}],["services/preguntas.service",{"_index":1028,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["services/respuestas.service",{"_index":1199,"title":{},"body":{"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["servicio",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["servicios",{"_index":526,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["setup",{"_index":1438,"title":{},"body":{"index.html":{}}}],["shortid",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["si",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["side",{"_index":1433,"title":{},"body":{"index.html":{}}}],["similar",{"_index":813,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["simple",{"_index":1482,"title":{},"body":{"index.html":{}}}],["sincronizar",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["sobre",{"_index":1326,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["sola",{"_index":1086,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["solo",{"_index":460,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["son",{"_index":1268,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"index.html":{}}}],["sponsors",{"_index":1535,"title":{},"body":{"index.html":{}}}],["src/.../codigo",{"_index":1415,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tipos",{"_index":1417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":1365,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts",{"_index":377,"title":{},"body":{"controllers/EncuestasController.html":{},"coverage.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:106",{"_index":464,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:162",{"_index":441,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:249",{"_index":487,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:266",{"_index":469,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:331",{"_index":478,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:342",{"_index":392,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:351",{"_index":416,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:53",{"_index":411,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:75",{"_index":420,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/dtos/actualizar",{"_index":6,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/create",{"_index":183,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/obtener",{"_index":888,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/encuestas.module.ts",{"_index":627,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["src/modules/encuestas/entities/encuesta.entity",{"_index":1260,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts",{"_index":306,"title":{},"body":{"entities/Encuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:13",{"_index":329,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:16",{"_index":330,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:23",{"_index":321,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:27",{"_index":334,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:30",{"_index":313,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:34",{"_index":316,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:38",{"_index":327,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:42",{"_index":324,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:45",{"_index":336,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/opcion.entity",{"_index":1262,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts",{"_index":898,"title":{},"body":{"entities/Opcion.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:19",{"_index":899,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:22",{"_index":904,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:25",{"_index":900,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:30",{"_index":903,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/pregunta.entity",{"_index":1261,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts",{"_index":978,"title":{},"body":{"entities/Pregunta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:23",{"_index":981,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:26",{"_index":982,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:29",{"_index":985,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:38",{"_index":987,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:43",{"_index":980,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:46",{"_index":984,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts",{"_index":1104,"title":{},"body":{"entities/Respuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:16",{"_index":1107,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:19",{"_index":1109,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:23",{"_index":1106,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:26",{"_index":1112,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:29",{"_index":1115,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/enums/codigo",{"_index":1419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/enums/tipos",{"_index":923,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts",{"_index":648,"title":{},"body":{"injectables/EncuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:117",{"_index":665,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:138",{"_index":663,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:152",{"_index":667,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:207",{"_index":670,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:25",{"_index":657,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:285",{"_index":660,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:308",{"_index":669,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:36",{"_index":661,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:368",{"_index":672,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts",{"_index":934,"title":{},"body":{"controllers/OpcionesController.html":{},"coverage.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:17",{"_index":939,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:25",{"_index":943,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/opciones.module.ts",{"_index":955,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["src/modules/opciones/services/opciones.service.ts",{"_index":960,"title":{},"body":{"injectables/OpcionesService.html":{},"coverage.html":{}}}],["src/modules/opciones/services/opciones.service.ts:17",{"_index":965,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:41",{"_index":966,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:9",{"_index":963,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts",{"_index":1018,"title":{},"body":{"controllers/PreguntasController.html":{},"coverage.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:20",{"_index":1024,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:29",{"_index":1026,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts",{"_index":999,"title":{},"body":{"entities/Pregunta-1.html":{},"coverage.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:15",{"_index":1003,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:18",{"_index":1004,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:21",{"_index":1006,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:28",{"_index":1008,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:31",{"_index":1002,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:34",{"_index":1005,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/enums/tipos",{"_index":1421,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/preguntas/preguntas.module.ts",{"_index":1044,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts",{"_index":1048,"title":{},"body":{"injectables/PreguntasService.html":{},"coverage.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:15",{"_index":1052,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:26",{"_index":1056,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:40",{"_index":1059,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts",{"_index":1154,"title":{},"body":{"controllers/RespuestasController.html":{},"coverage.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:113",{"_index":1184,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:154",{"_index":1166,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:72",{"_index":1178,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/dtos/registrar",{"_index":1071,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/dtos/visualizar",{"_index":916,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta",{"_index":908,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity",{"_index":1259,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts",{"_index":1118,"title":{},"body":{"entities/Respuesta-1.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:16",{"_index":1121,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:19",{"_index":1122,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:23",{"_index":1120,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:29",{"_index":1124,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:35",{"_index":1126,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/respuestas.module.ts",{"_index":1234,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts",{"_index":1240,"title":{},"body":{"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:21",{"_index":1244,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:242",{"_index":1255,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:319",{"_index":1246,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:45",{"_index":1250,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["start",{"_index":1443,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1446,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1447,"title":{},"body":{"index.html":{}}}],["started",{"_index":1425,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1436,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":528,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["stay",{"_index":1520,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1459,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1478,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["su",{"_index":461,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["summary",{"_index":527,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["support",{"_index":1499,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sus",{"_index":400,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["svg",{"_index":1552,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":204,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["switch",{"_index":768,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["synchronize",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["tabla",{"_index":354,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["table",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1460,"title":{},"body":{"index.html":{}}}],["temporalmente",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["tener",{"_index":701,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["tenga",{"_index":231,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/EncuestasService.html":{}}}],["test",{"_index":1450,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1453,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1452,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1448,"title":{},"body":{"index.html":{}}}],["text",{"_index":1134,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["text/csv",{"_index":615,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["texto",{"_index":11,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["textorespuesta",{"_index":871,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["thanks",{"_index":1534,"title":{},"body":{"index.html":{}}}],["this.configservice.get",{"_index":718,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.configservice.get('global_prefix",{"_index":721,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository",{"_index":758,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.create",{"_index":705,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.findone",{"_index":795,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["this.encuestarepository.save(encuesta",{"_index":712,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestasservice.actualizarestadoencuesta(id",{"_index":601,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.crearencuesta(dto",{"_index":531,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarcodigoqr(enlacecorto",{"_index":535,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarenlacecorto",{"_index":533,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuesta",{"_index":549,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuestaporcodigo",{"_index":554,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerresultados(id",{"_index":599,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.resultadoscsv(id",{"_index":612,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.generarcodigoqr(enlacecorto",{"_index":729,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.generarenlacecorto(enlaceparticipacion",{"_index":728,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.obtenerresultados(id",{"_index":854,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.opciones",{"_index":927,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.opcionesservice.crearopcion(preguntaid",{"_index":951,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionesservice.eliminaropcion(id",{"_index":952,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionrepo.delete",{"_index":1068,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.opcionrepository.create",{"_index":971,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.delete(id",{"_index":976,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.find",{"_index":1321,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findone",{"_index":1310,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findoneby",{"_index":974,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.save(opcion",{"_index":973,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntarepo.delete(idpregunta",{"_index":1069,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findone",{"_index":1066,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findoneby",{"_index":1060,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.save(pregunta",{"_index":1064,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepository.findone",{"_index":1297,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.preguntarepository.findoneby",{"_index":969,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntasservice.actualizarpregunta(id",{"_index":1037,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.preguntasservice.eliminarpreguntaconopciones(id",{"_index":1041,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.respuestaabiertarepository.create",{"_index":1302,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.find",{"_index":1336,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.save(respuestasabiertas",{"_index":1304,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.count",{"_index":1342,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.create",{"_index":1314,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.save(respuestaopcion",{"_index":1315,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.create",{"_index":1293,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.save(respuesta",{"_index":1295,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestas_abiertas",{"_index":928,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.respuestasservice.obtenerencuestaparaparticipacion",{"_index":1230,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.registrarrespuestas",{"_index":1225,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(codigo",{"_index":582,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(tokenvisualizacion",{"_index":1228,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["throw",{"_index":577,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["throws",{"_index":1265,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["tiene",{"_index":454,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["til",{"_index":447,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["time",{"_index":271,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"index.html":{}}}],["timestamp",{"_index":318,"title":{},"body":{"entities/Encuesta.html":{}}}],["timestamptz",{"_index":323,"title":{},"body":{"entities/Encuesta.html":{}}}],["tinyurl",{"_index":741,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["tipo",{"_index":12,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["tipo.enum",{"_index":513,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["tipo.enum.ts",{"_index":1416,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tipo_codigo",{"_index":574,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["tipo_respuesta",{"_index":1007,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["tipos",{"_index":39,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["tiposrespuestaenum",{"_index":20,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["tiposrespuestaenum.abierta",{"_index":589,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.opcion_multiple_seleccion_simple",{"_index":1316,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.verdadero_falso",{"_index":694,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum})@isenum(tiposrespuestaenum)@isnotempty",{"_index":295,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["toda",{"_index":1258,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["todas",{"_index":481,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["token",{"_index":1164,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["tokenparticipacion",{"_index":1159,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["tokenvisualizacion",{"_index":1182,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["toma",{"_index":709,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["toques",{"_index":1426,"title":{},"body":{"index.html":{}}}],["totalrespuestas",{"_index":820,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["touch",{"_index":1542,"title":{},"body":{"index.html":{}}}],["trabajar",{"_index":635,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["transfer",{"_index":222,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["transforma",{"_index":239,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["transformado",{"_index":1103,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["transformar",{"_index":207,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{}}}],["transformer",{"_index":205,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["tres",{"_index":1082,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["true",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["true})@apibody({type",{"_index":1175,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["true})@apiparam({name",{"_index":1163,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["true})@apiresponse({status",{"_index":437,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["true})@exclude",{"_index":315,"title":{},"body":{"entities/Encuesta.html":{}}}],["true})@type(undefined",{"_index":199,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["true})@type(undefined)@isnotempty",{"_index":1075,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["try",{"_index":573,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["tu",{"_index":1345,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["twitter",{"_index":1548,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["typeorm",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature",{"_index":1239,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature([encuesta",{"_index":636,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["typeormmodule.forfeature([opcion",{"_index":959,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["typeormmodule.forfeature([pregunta",{"_index":1047,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["typeormmodule.forrootasync",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":850,"title":{},"body":{"injectables/EncuestasService.html":{},"index.html":{}}}],["ufeff",{"_index":887,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["un",{"_index":64,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["una",{"_index":45,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["undefined",{"_index":290,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["undefined})@isarray()@arraynotempty()@arrayminsize(1)@validatenested({each",{"_index":198,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["une",{"_index":762,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unit",{"_index":1449,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":751,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unlicensed",{"_index":1560,"title":{},"body":{"properties.html":{}}}],["uno",{"_index":300,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["unsafe",{"_index":852,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["updatedto",{"_index":1055,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["updates",{"_index":1522,"title":{},"body":{"index.html":{}}}],["url",{"_index":543,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["usa",{"_index":1100,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["usamos",{"_index":713,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["usando",{"_index":459,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["usar",{"_index":833,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["usefactory",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["username",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":1514,"title":{},"body":{"index.html":{}}}],["uso",{"_index":609,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["usuario",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["utilidad",{"_index":206,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["utilidades",{"_index":339,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/RespuestaAbierta.html":{}}}],["utilizado",{"_index":644,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["utilizando",{"_index":489,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["uuid",{"_index":432,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["uuids",{"_index":678,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v1",{"_index":723,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v4",{"_index":679,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacía",{"_index":755,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacío",{"_index":227,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["valida",{"_index":56,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{}}}],["validaciones",{"_index":28,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["validación",{"_index":783,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["validado",{"_index":1080,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["validadores",{"_index":217,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["validando",{"_index":845,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["validar",{"_index":208,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["validatenested",{"_index":216,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["valor",{"_index":58,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["valores",{"_index":301,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["value",{"_index":1420,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["variables",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["veces",{"_index":930,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["vencida",{"_index":463,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["vencido",{"_index":1281,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["vencimiento",{"_index":267,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["ver",{"_index":1207,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["verdadero",{"_index":696,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["verdadero/falso",{"_index":1313,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["verdadero_falso",{"_index":693,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["verificar",{"_index":794,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["version",{"_index":1558,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":538,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["video",{"_index":1507,"title":{},"body":{"index.html":{}}}],["vinculada",{"_index":1292,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visit",{"_index":1496,"title":{},"body":{"index.html":{}}}],["visualización",{"_index":484,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["visualización'})@apiparam({name",{"_index":483,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["visualización.'})@apiparam({name",{"_index":1181,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizamos",{"_index":1353,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizar",{"_index":260,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["visualizarlas",{"_index":1256,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestas",{"_index":1157,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestas(tokenvisualizacion",{"_index":1179,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestasdto",{"_index":515,"title":{"classes/VisualizarRespuestasDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["visualizarrespuestasdto(codigovisualizacion",{"_index":1254,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestasdto})@apiresponse({status",{"_index":486,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["visualize",{"_index":1510,"title":{},"body":{"index.html":{}}}],["válida",{"_index":1312,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["válido",{"_index":65,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["válidos",{"_index":42,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["watch",{"_index":1444,"title":{},"body":{"index.html":{}}}],["website",{"_index":1546,"title":{},"body":{"index.html":{}}}],["where('encuesta.id",{"_index":765,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["wherecondition",{"_index":834,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["wherecondition.id",{"_index":1279,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["working",{"_index":1495,"title":{},"body":{"index.html":{}}}],["x",{"_index":1524,"title":{},"body":{"index.html":{}}}],["xito",{"_index":584,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["xyz789uvw012",{"_index":485,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["y",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["ya",{"_index":47,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["yes",{"_index":1252,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["you'd",{"_index":1538,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1454,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActualizarPreguntaDto.html":{"url":"classes/ActualizarPreguntaDto.html","title":"class - ActualizarPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActualizarPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(TiposRespuestaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, IsEnum } from 'class-validator'; // Validaciones para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enum con los tipos de respuesta válidos\n\n// Clase DTO para actualizar una pregunta ya creada\nexport class ActualizarPreguntaDto {\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsString() // Valida que el valor sea una cadena de texto\n  texto?: string; // Nuevo texto de la pregunta\n\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsEnum(TiposRespuestaEnum) // Valida que sea un valor válido del enum TiposRespuestaEnum\n  tipo?: TiposRespuestaEnum; // Nuevo tipo de respuesta para la pregunta\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EncuestasModule\n                        \n                        \n                            OpcionesModule\n                        \n                        \n                            PreguntasModule\n                        \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'; // Decorador para definir un módulo en NestJS\nimport { ConfigModule, ConfigService } from '@nestjs/config'; // Módulo y servicio para manejar configuraciones\nimport configuration from './config/configuration'; // Archivo de configuración personalizado\nimport { EncuestasModule } from './modules/encuestas/encuestas.module'; // Módulo de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo para la integración con TypeORM\nimport { PreguntasModule } from './modules/preguntas/preguntas.module';\nimport { RespuestasModule } from './modules/respuestas/respuestas.module';\nimport { OpcionesModule } from './modules/opciones/opciones.module';\n\n@Module({\n  imports: [\n    // Importa el módulo de encuestas y preguntas\n    EncuestasModule,\n    PreguntasModule,\n    RespuestasModule,\n    OpcionesModule,\n    // Configuración global del módulo de configuración\n    ConfigModule.forRoot({\n      load: [configuration], // Carga la configuración personalizada desde un archivo\n      isGlobal: true, // Hace que el módulo de configuración sea accesible globalmente\n      ignoreEnvFile: process.env.NODE_ENV === 'production', // Ignora el archivo .env si el entorno es producción\n    }),\n\n    // Configuración de TypeORM para la conexión con la base de datos\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Importa el módulo de configuración para acceder a las variables de entorno\n      inject: [ConfigService], // Inyecta el servicio de configuración\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres', // Tipo de base de datos (PostgreSQL)\n        host: configService.get('database.host'), // Host de la base de datos\n        port: configService.get('database.port'), // Puerto de la base de datos\n        username: configService.get('database.username'), // Usuario de la base de datos\n        password: configService.get('database.password'), // Contraseña de la base de datos\n        database: configService.get('database.name'), // Nombre de la base de datos\n        synchronize: true, // Temporalmente habilitado para sincronizar la estructura de la base de datos\n        autoLoadEntities: true, // Carga automáticamente las entidades registradas\n        logging: configService.get('database.logging'), // Habilita o deshabilita el registro de consultas\n        logger: configService.get('database.logger'), // Define el tipo de logger para la base de datos\n      }),\n    }),\n  ],\n})\nexport class AppModule {} // Exporta la clase del módulo principal\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaDto.html":{"url":"classes/CreateEncuestaDto.html","title":"class - CreateEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                codigoQR\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                enlaceCorto\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                    \n                                    \n                                nombre\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()@ArrayNotEmpty()@ArrayMinSize(1)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport {\n  ArrayMinSize,\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CreatePreguntaDto } from './create-pregunta.dto'; // DTO para las preguntas de la encuesta\n\n// Clase DTO (Data Transfer Object) para crear una encuesta\nexport class CreateEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"nombre\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  nombre: string; // Nombre de la encuesta\n\n  @ApiProperty({ type: [CreatePreguntaDto] }) // Documenta la propiedad \"preguntas\" en Swagger como un arreglo de CreatePreguntaDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @ArrayNotEmpty() // Valida que el arreglo no esté vacío\n  @ArrayMinSize(1) // Valida que el arreglo tenga al menos un elemento\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreatePreguntaDto\n  @Type(() => CreatePreguntaDto) // Transforma cada elemento del arreglo en una instancia de CreatePreguntaDto\n  preguntas: CreatePreguntaDto[]; // Lista de preguntas asociadas a la encuesta\n\n  @IsOptional()\n  @IsDateString()\n  fechaVencimiento?: Date;\n\n  //Propiedad para el enlace corto\n  @ApiProperty()\n  @IsString()\n  enlaceCorto?: string; // generado automaticamente\n\n  // Propiedad para el código QR\n  @ApiProperty()\n  @IsString()\n  codigoQR?: string; // generado automáticamente\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaResponseDto.html":{"url":"classes/CreateEncuestaResponseDto.html","title":"class - CreateEncuestaResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoQR\n                            \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                enlaceCorto\n                            \n                            \n                                    \n                                enlaceParticipacion\n                            \n                            \n                                    \n                                enlaceVisualizacion\n                            \n                            \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código QR generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace corto generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceParticipacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceVisualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Fecha de vencimiento de la encuesta', required: false, type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID de la encuesta creada'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateEncuestaResponseDto {\n  @ApiProperty({ description: 'ID de la encuesta creada' })\n  id: number;\n\n  @ApiProperty({ description: 'Código para participar en la encuesta' })\n  codigoRespuesta: string;\n\n  @ApiProperty({ description: 'Código para visualizar resultados' })\n  codigoResultados: string;\n\n  @ApiProperty({ description: 'Enlace para participar en la encuesta' })\n  enlaceParticipacion: string;\n\n  @ApiProperty({ description: 'Enlace para visualizar resultados' })\n  enlaceVisualizacion: string;\n\n  @ApiProperty({ description: 'Enlace corto generado automáticamente' })\n  enlaceCorto: string;\n\n  @ApiProperty({ description: 'Código QR generado automáticamente' })\n  codigoQR: string;\n\n  @ApiProperty({\n    description: 'Fecha de vencimiento de la encuesta',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  fechaVencimiento?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOpcionDto.html":{"url":"classes/CreateOpcionDto.html","title":"class - CreateOpcionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOpcionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-opcion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator'; // Validadores para las propiedades del DTO\n\n// Clase DTO (Data Transfer Object) para crear una opción\nexport class CreateOpcionDto {\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la opción\n\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la opción\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePreguntaDto.html":{"url":"classes/CreatePreguntaDto.html","title":"class - CreatePreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                opciones\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateOpcionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: false})@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: TiposRespuestaEnum})@IsEnum(TiposRespuestaEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport {\n  IsArray,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enumerador para los tipos de respuesta permitidos\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport { CreateOpcionDto } from './create-opcion.dto'; // DTO para las opciones de una pregunta\n\n// Clase DTO (Data Transfer Object) para crear una pregunta\nexport class CreatePreguntaDto {\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la pregunta\n\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la pregunta\n\n  @ApiProperty({ enum: TiposRespuestaEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(TiposRespuestaEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: TiposRespuestaEnum; // Tipo de respuesta permitido para la pregunta\n\n  @ApiProperty({ type: [CreateOpcionDto], required: false }) // Documenta la propiedad \"opciones\" en Swagger como un arreglo de CreateOpcionDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @IsOptional() // Valida que esta propiedad sea opcional\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreateOpcionDto\n  @Type(() => CreateOpcionDto) // Transforma cada elemento del arreglo en una instancia de CreateOpcionDto\n  opciones: CreateOpcionDto[]; // Opciones asociadas a la pregunta (opcional)\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Encuesta.html":{"url":"entities/Encuesta.html","title":"entity - Encuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Encuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/encuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                fechaActualizacion\n                            \n                            \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                habilitada\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                nombre\n                            \n                            \n                                    \n                                preguntas\n                            \n                            \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_respuesta', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_resultados', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fechaActualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'fecha_vencimiento', type: 'timestamptz', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        habilitada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Pregunta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, pregunta => pregunta.encuesta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Respuesta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuesta => respuesta.encuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n// Importación de la entidad relacionada \"Respuesta\"\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n\n@Entity({ name: 'encuestas' }) // Define la clase como una entidad de la base de datos con el nombre \"encuestas\"\nexport class Encuesta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"nombre\" en la tabla, permitiendo valores nulos temporalmente\n  nombre: string;\n\n  @Column({\n    nullable: true,\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  fechaActualizacion: Date;\n  @OneToMany(() => Pregunta, (pregunta) => pregunta.encuesta, {\n    cascade: ['insert'], // Permite insertar automáticamente las preguntas relacionadas\n  })\n  preguntas: Pregunta[]; // Relación uno a muchos con la entidad \"Pregunta\"\n\n  @Column({ name: 'codigo_respuesta', nullable: true }) // Define la columna \"codigo_respuesta\" en la tabla, permitiendo valores nulos temporalmente\n  codigoRespuesta: string;\n\n  @Column({ name: 'codigo_resultados', nullable: true }) // Define la columna \"codigo_resultados\" en la tabla, permitiendo valores nulos temporalmente\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  codigoResultados: string;\n\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  @Column({ default: true })\n  habilitada: boolean; // Columna que indica si la encuesta está habilitada o no\n\n  // Funcionalidad extra (MAIA): Fecha de vencimiento\n  @Column({ name: 'fecha_vencimiento', type: 'timestamptz', nullable: true })\n  fechaVencimiento?: Date;\n\n  @OneToMany(() => Respuesta, (respuesta) => respuesta.encuesta)\n  respuestas: Respuesta[]; // Relación uno a muchos con la entidad \"Respuesta\"\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EncuestasController.html":{"url":"controllers/EncuestasController.html","title":"controller - EncuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EncuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/controllers/encuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                encuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                cambiarEstadoEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    \n                                    Async\n                                exportarResultadosCSV\n                            \n                            \n                                    \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaDebug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipar\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEstructuraEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerResultados\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerResultadosEncuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cambiarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    cambiarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/habilitar')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:342\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Crear una nueva encuesta', description: 'Crea una encuesta con sus preguntas y opciones, generando enlaces y códigos QR'})@ApiResponse({status: 201, description: 'Encuesta creada exitosamente', type: CreateEncuestaResponseDto})@ApiResponse({status: 400, description: 'Datos de encuesta inválidos o incompletos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        exportarResultadosCSV\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportarResultadosCSV(id: number, codigoResultados: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/csv/:codigoResultados')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:351\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, dto: ObtenerEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ObtenerEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaDebug\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaDebug(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('debug/:codigo')@ApiOperation({summary: 'Obtener información detallada de la encuesta para depuración', description: 'Intenta obtener la encuesta con cualquier tipo de código (participación o resultados)'})@ApiParam({name: 'codigo', description: 'Código UUID de la encuesta (puede ser de participación o resultados)', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente'})@ApiResponse({status: 400, description: 'Código de encuesta no válido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtiene información detallada de la encuesta para depuración\nEste endpoint intenta obtener la encuesta primero con el código de participación,\ny si falla, intenta con el código de resultados. Es útil para diagnosticar problemas\ncuando no se sabe qué tipo de código se tiene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticipar\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipar(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:codigo')@ApiOperation({summary: 'Obtener encuesta para participación', description: 'Devuelve la estructura completa de una encuesta usando solo su código de participación'})@ApiParam({name: 'codigo', description: 'Código UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente'})@ApiResponse({status: 400, description: 'Código de encuesta no válido o encuesta vencida'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        obtenerEstructuraEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEstructuraEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('estructura/:codigo')@ApiOperation({summary: 'Obtener estructura de la encuesta con IDs para responder'})@ApiParam({name: 'codigo', description: 'Código de participación de la encuesta', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/resultados')@ApiOperation({summary: 'Obtener resultados de una encuesta por ID y código'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiResponse({status: 200, description: 'Resultados obtenidos exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o código inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:331\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerResultadosEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultadosEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:codigo')@ApiOperation({summary: 'Obtener resultados de una encuesta', description: 'Devuelve todas las respuestas recopiladas para una encuesta usando su código de visualización'})@ApiParam({name: 'codigo', description: 'Código UUID de visualización de resultados', example: 'xyz789uvw012', required: true})@ApiResponse({status: 200, description: 'Resultados obtenidos exitosamente', type: VisualizarRespuestasDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o código inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:249\n                        \n                    \n\n\n            \n                \n                        Obtiene los resultados de una encuesta usando su código de visualización\nEste endpoint permite consultar todas las respuestas recopiladas para una encuesta\nutilizando el código de visualización proporcionado al crear la encuesta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Res,\n  BadRequestException,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { ApiOperation, ApiParam, ApiResponse } from '@nestjs/swagger';\n// Importación del servicio de encuestas\nimport { EncuestasService } from '../services/encuestas.service';\n// Importación del servicio de respuestas\nimport { RespuestasService } from '../../respuestas/services/respuestas.service';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación del DTO para obtener encuestas\nimport { ObtenerEncuestaDto } from '../dtos/obtener-encuesta.dto';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { CreateEncuestaResponseDto } from '../dtos/create-encuesta-response.dto';\nimport { VisualizarRespuestasDto } from '../../respuestas/dtos/visualizar-respuestas.dtos';\n\nimport { Response } from 'express';\n\n@Controller('encuestas') // Define el controlador para manejar las rutas relacionadas con \"encuestas\"\nexport class EncuestasController {\n  constructor(\n    private readonly encuestasService: EncuestasService,\n    private readonly respuestasService: RespuestasService,\n  ) {} // Inyección de los servicios\n  @Post()\n  @ApiOperation({\n    summary: 'Crear una nueva encuesta',\n    description:\n      'Crea una encuesta con sus preguntas y opciones, generando enlaces y códigos QR',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Encuesta creada exitosamente',\n    type: CreateEncuestaResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de encuesta inválidos o incompletos',\n  })\n  async crearEncuesta(\n    @Body() dto: CreateEncuestaDto,\n  ): Promise {\n    // Crea la encuesta utilizando el servicio\n    const encuesta = await this.encuestasService.crearEncuesta(dto);\n\n    // Generar enlace corto\n    const enlaceCorto = await this.encuestasService.generarEnlaceCorto(\n      encuesta.enlaceParticipacion,\n    );\n\n    // Generar código QR\n    const codigoQR = await this.encuestasService.generarCodigoQR(enlaceCorto);\n\n    return {\n      ...encuesta,\n      enlaceParticipacion: enlaceCorto, // Se reemplaza el enlace con la versión corta\n      codigoQR, // Se añade el código QR\n    };\n  }\n\n  @Get(':id') // Define un endpoint GET para obtener una encuesta por su ID\n  async obtenerEncuesta(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Query() dto: ObtenerEncuestaDto, // Obtiene los parámetros de consulta (query params)\n  ): Promise {\n    // Llama al servicio para obtener la encuesta y la retorna\n    return await this.encuestasService.obtenerEncuesta(\n      id,\n      dto.codigo, // Código de respuesta o resultados\n      dto.tipo, // Tipo de código (respuesta o resultados)\n    );\n  }\n  @Get('participar/:codigo')\n  @ApiOperation({\n    summary: 'Obtener encuesta para participación',\n    description:\n      'Devuelve la estructura completa de una encuesta usando solo su código de participación',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Código de encuesta no válido o encuesta vencida',\n  })\n  async obtenerEncuestaParaParticipar(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    // Transformar la respuesta para incluir explícitamente los IDs\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n    };\n  }\n\n  /**\n   * Obtiene información detallada de la encuesta para depuración\n   *\n   * Este endpoint intenta obtener la encuesta primero con el código de participación,\n   * y si falla, intenta con el código de resultados. Es útil para diagnosticar problemas\n   * cuando no se sabe qué tipo de código se tiene.\n   */\n  @Get('debug/:codigo')\n  @ApiOperation({\n    summary: 'Obtener información detallada de la encuesta para depuración',\n    description:\n      'Intenta obtener la encuesta con cualquier tipo de código (participación o resultados)',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description:\n      'Código UUID de la encuesta (puede ser de participación o resultados)',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Código de encuesta no válido',\n  })\n  async obtenerEncuestaDebug(@Param('codigo') codigo: string): Promise {\n    // Intentar primero con código de respuesta\n    try {\n      const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n        codigo,\n        CodigoTipoEnum.RESPUESTA,\n      );\n\n      // Transformar la respuesta para incluir explícitamente los IDs\n      return {\n        id: encuesta.id,\n        nombre: encuesta.nombre,\n        tipo_codigo: 'PARTICIPACIÓN',\n        preguntas: encuesta.preguntas.map((pregunta) => ({\n          id: pregunta.id,\n          numero: pregunta.numero,\n          texto: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: pregunta.opciones\n            ? pregunta.opciones.map((opcion) => ({\n                id: opcion.id,\n                numero: opcion.numero,\n                texto: opcion.texto,\n              }))\n            : [],\n        })),\n      };\n    } catch {\n      // Si falla, intentar con código de resultados\n      try {\n        const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n          codigo,\n          CodigoTipoEnum.RESULTADOS,\n        );\n\n        // Transformar la respuesta para incluir explícitamente los IDs\n        return {\n          id: encuesta.id,\n          nombre: encuesta.nombre,\n          tipo_codigo: 'RESULTADOS',\n          preguntas: encuesta.preguntas.map((pregunta) => ({\n            id: pregunta.id,\n            numero: pregunta.numero,\n            texto: pregunta.texto,\n            tipo: pregunta.tipo,\n            opciones: pregunta.opciones\n              ? pregunta.opciones.map((opcion) => ({\n                  id: opcion.id,\n                  numero: opcion.numero,\n                  texto: opcion.texto,\n                }))\n              : [],\n          })),\n        };\n      } catch {\n        throw new BadRequestException('Código de encuesta no válido');\n      }\n    }\n  }\n\n  /**\n   * Obtiene los resultados de una encuesta usando su código de visualización\n   *\n   * Este endpoint permite consultar todas las respuestas recopiladas para una encuesta\n   * utilizando el código de visualización proporcionado al crear la encuesta.\n   */\n  @Get('resultados/:codigo')\n  @ApiOperation({\n    summary: 'Obtener resultados de una encuesta',\n    description:\n      'Devuelve todas las respuestas recopiladas para una encuesta usando su código de visualización',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código UUID de visualización de resultados',\n    example: 'xyz789uvw012',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultados obtenidos exitosamente',\n    type: VisualizarRespuestasDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o código inválido',\n  })\n  async obtenerResultadosEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(codigo);\n    return { message: 'Éxito', data: resultado };\n  }\n\n  @Get('estructura/:codigo')\n  @ApiOperation({\n    summary: 'Obtener estructura de la encuesta con IDs para responder',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  async obtenerEstructuraEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n      ejemploRespuesta: {\n        respuestas: encuesta.preguntas.map((pregunta) => {\n          if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              texto: 'Ejemplo de respuesta abierta',\n            };\n          } else {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              opciones:\n                pregunta.opciones && pregunta.opciones.length > 0\n                  ? [pregunta.opciones[0].id]\n                  : [],\n            };\n          }\n        }),\n      },\n    };\n  }\n\n  @Get(':id/resultados')\n  @ApiOperation({\n    summary: 'Obtener resultados de una encuesta por ID y código',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultados obtenidos exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o código inválido',\n  })\n  async obtenerResultados(\n    @Param('id') id: number,\n    @Query('codigo') codigo: string,\n  ): Promise {\n    if (!codigo) {\n      throw new BadRequestException('Código de resultados requerido');\n    }\n    return this.encuestasService.obtenerResultados(id, codigo);\n  }\n\n  @Patch(':id/habilitar')\n  async cambiarEstadoEncuesta(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('habilitada') habilitada: boolean,\n  ): Promise {\n    return await this.encuestasService.actualizarEstadoEncuesta(id, habilitada);\n  }\n\n  // Funcionalidad extra para generar un CSV (Emilia)\n  @Get(':id/csv/:codigoResultados') // Define un endpoint GET para exportar los resultados de una encuesta en formato CSV\n  async exportarResultadosCSV(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Param('codigoResultados') codigoResultados: string, // Obtiene el código único para validar el acceso a los resultados\n    @Res() res: Response, // Uso de Response para enviar el archivo CSV como descarga\n  ) {\n    const csv = await this.encuestasService.resultadosCSV(id, codigoResultados); // Obtiene los resultados en formato CSV desde el servicio\n\n    // Configuración de los encabezados\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader(\n      'Content-Disposition',\n      `attachment; filename=\"resultados_encuesta_${id}.csv\"`,\n    );\n\n    res.send(csv); // Envía el contenido del archivo CSV\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EncuestasModule.html":{"url":"modules/EncuestasModule.html","title":"module - EncuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    EncuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_imports\n\n\n\ncluster_EncuestasModule_providers\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\n\n\nEncuestasModule\n\nEncuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/encuestas/encuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EncuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EncuestasController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { EncuestasController } from './controllers/encuestas.controller'; // Controlador para manejar las rutas relacionadas con encuestas\nimport { EncuestasService } from './services/encuestas.service'; // Servicio para la lógica de negocio de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Encuesta } from './entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from './entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from './entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { Respuesta } from '../respuestas/entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestasModule } from '../respuestas/respuestas.module'; // Importación del módulo de respuestas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Encuesta, Pregunta, Opcion, Respuesta]),\n    RespuestasModule,\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [EncuestasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [EncuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class EncuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncuestasService.html":{"url":"injectables/EncuestasService.html","title":"injectable - EncuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/services/encuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarEstadoEncuesta\n                            \n                            \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    Async\n                                generarCodigoQR\n                            \n                            \n                                    Async\n                                generarEnlaceCorto\n                            \n                            \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    Async\n                                obtenerEncuestaPorCodigo\n                            \n                            \n                                    Async\n                                obtenerResultados\n                            \n                            \n                                    Async\n                                resultadosCSV\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(encuestaRepository: Repository, respuestaRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/encuestas/services/encuestas.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarCodigoQR\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarCodigoQR(texto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                texto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarEnlaceCorto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarEnlaceCorto(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaPorCodigo\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaPorCodigo(codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigoResultados: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resultadosCSV\n                        \n                    \n                \n            \n            \n                \n                        \n                    resultadosCSV(id: number, codigoResultados: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:368\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación de la función para generar UUIDs\nimport { v4 } from 'uuid';\n// Importación del enumerador para los tipos de código\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { NotFoundException } from '@nestjs/common';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\n// Importación de librería para generar QR\nimport * as QRCode from 'qrcode';\n// Importación de papaparse para generar CSV\nimport * as Papa from 'papaparse';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class EncuestasService {\n  constructor(\n    // Inyección del repositorio de la entidad Encuesta\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n    private configService: ConfigService,\n  ) {}\n\n  // Método para crear una nueva encuesta se le agrega codigo de enlace corto y codigoqr\n  async crearEncuesta(dto: CreateEncuestaDto): Promise {\n    for (const pregunta of dto.preguntas) {\n      // FUNCIÓN EXTRA: Manejar preguntas de tipo VERDADERO_FALSO\n      if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, generamos automáticamente las opciones\n        pregunta.opciones = [\n          { numero: 1, texto: 'Verdadero' },\n          { numero: 2, texto: 'Falso' },\n        ];\n      } else if (\n        pregunta.tipo !== TiposRespuestaEnum.ABIERTA &&\n        (!pregunta.opciones || pregunta.opciones.length === 0)\n      ) {\n        throw new BadRequestException(\n          `Las preguntas de opción múltiple deben tener opciones`,\n        );\n      }\n      if (\n        pregunta.tipo === TiposRespuestaEnum.ABIERTA &&\n        pregunta.opciones?.length > 0\n      ) {\n        throw new BadRequestException(\n          `Las preguntas abiertas no deben tener opciones`,\n        );\n      }\n    }\n    const codigoRespuesta = v4();\n    const codigoResultados = v4();\n\n    // Creación de una nueva instancia de Encuesta con los datos del DTO\n    const encuesta: Encuesta = this.encuestaRepository.create({\n      ...dto, // Copia las propiedades del DTO\n      codigoRespuesta, // Genera un código único para las respuestas\n      codigoResultados, // Genera un código único para los resultados\n      fechaVencimiento: dto.fechaVencimiento, // Se toma la fecha de vencimiento\n    });\n\n    // Guarda la encuesta en la base de datos\n    const encuestaCreada = await this.encuestaRepository.save(encuesta);\n\n    // Usamos APP_URL para que sea dinámico con el puerto que esté activo\n    const baseUrl = this.configService.get(\n      'APP_URL',\n      'http://localhost:3000',\n    );\n    const apiPrefix = this.configService.get('GLOBAL_PREFIX', 'api');\n    const apiVersion = 'v1';\n\n    // Formato: /api/v1/respuestas/participar/{id}/{codigoRespuesta}\n    const enlaceParticipacion = `${baseUrl}/${apiPrefix}/${apiVersion}/respuestas/participar/${encuestaCreada.id}/${codigoRespuesta}`;\n\n    // Formato: /api/v1/encuestas/resultados/{id}?codigo={codigoResultados}\n    const enlaceVisualizacion = `${baseUrl}/${apiPrefix}/${apiVersion}/encuestas/${encuestaCreada.id}/resultados?codigo=${codigoResultados}`;\n\n    //Generar enlace corto\n    const enlaceCorto = await this.generarEnlaceCorto(enlaceParticipacion);\n\n    //Generar QR\n    const codigoQR = await this.generarCodigoQR(enlaceCorto);\n\n    // Retorna los datos relevantes de la encuesta creada\n    return {\n      id: encuestaCreada.id,\n      codigoRespuesta: encuestaCreada.codigoRespuesta,\n      codigoResultados: encuestaCreada.codigoResultados,\n      enlaceParticipacion: enlaceCorto, // usamos el enlace corto\n      enlaceVisualizacion,\n      enlaceCorto,\n      codigoQR,\n      fechaVencimiento: encuestaCreada.fechaVencimiento,\n    };\n  }\n  async generarEnlaceCorto(url: string): Promise {\n    try {\n      const response = await fetch(\n        `http://tinyurl.com/api-create.php?url=${encodeURIComponent(url)}`,\n      );\n      if (!response.ok) {\n        console.warn(\n          `Error en la API de TinyURL: ${response.statusText}, usando URL original`,\n        );\n        return url; // Se retorna la URL original\n      }\n      return await response.text();\n    } catch (error) {\n      console.error(\n        'Error al acortar enlace:',\n        error instanceof Error ? error.message : error,\n      );\n      return url; // Devuelve la URL original en caso de error\n    }\n  }\n\n  async generarCodigoQR(texto: string): Promise {\n    try {\n      const qr = await QRCode.toDataURL(texto);\n      return qr;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error('Error generando QR:', error.message);\n      } else {\n        console.error('Error desconocido generando QR:', error);\n      }\n      return ''; // En caso de error, retornar cadena vacía\n    }\n  }\n  // Método para obtener una encuesta por su ID y un código específico\n  async obtenerEncuesta(\n    id: number, // ID de la encuesta\n    codigo: string, // Código de respuesta o resultados\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS, // Tipo de código\n  ): Promise {\n    // Construcción de la consulta para obtener la encuesta\n    const query = this.encuestaRepository\n      .createQueryBuilder('encuesta') // Alias para la tabla Encuesta\n      .innerJoinAndSelect('encuesta.preguntas', 'pregunta') // Une las preguntas relacionadas\n      .leftJoinAndSelect('pregunta.opciones', 'preguntaOpcion') // Une las opciones de las preguntas\n      .where('encuesta.id = :id', { id }) // Filtra por el ID de la encuesta\n      .andWhere('encuesta.habilitada = true');\n    // Filtra según el tipo de código proporcionado\n    switch (codigoTipo) {\n      case CodigoTipoEnum.RESPUESTA:\n        query.andWhere('encuesta.codigoRespuesta = :codigo', { codigo });\n        break;\n\n      case CodigoTipoEnum.RESULTADOS:\n        query.andWhere('encuesta.codigoResultados = :codigo', { codigo });\n        break;\n    }\n\n    // Ordena las preguntas y opciones por su número\n    query.orderBy('pregunta.numero', 'ASC');\n    query.addOrderBy('preguntaOpcion.numero', 'ASC');\n\n    // Ejecuta la consulta y obtiene la encuesta\n    const encuesta = await query.getOne();\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Datos de encuesta no válidos');\n    }\n\n    // Se agrega una validación para rechazar el acceso si la encuesta ya está vencida.\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('Validando fecha de vencimiento (obtenerEncuesta):');\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  {\n    // Verificar primero que el código sea válido\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoResultados: codigoResultados, habilitada: true },\n      relations: [\n        'preguntas',\n        'preguntas.opciones',\n        'respuestas',\n        'respuestas.respuestasAbiertas',\n        'respuestas.respuestasOpciones',\n        'respuestas.respuestasOpciones.opcion',\n      ],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o código inválido');\n    }\n\n    // Procesar resultados\n    const resultados = encuesta.preguntas.map((pregunta) => {\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasTexto = encuesta.respuestas\n          .flatMap((r) => r.respuestasAbiertas)\n          .filter((ra) => ra.id_pregunta === pregunta.id)\n          .map((ra) => ra.texto);\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: 'ABIERTA',\n          respuestas: respuestasTexto,\n        };\n      } else if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, procesamos de manera similar a las de opción múltiple\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: TiposRespuestaEnum.VERDADERO_FALSO,\n          opciones: opcionesConteo,\n        };\n      } else {\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: opcionesConteo,\n        };\n      }\n    });\n\n    return {\n      encuesta: encuesta.nombre,\n      totalRespuestas: encuesta.respuestas.length,\n      resultados,\n    };\n  }\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  async actualizarEstadoEncuesta(\n    id: number,\n    habilitada: boolean,\n  ): Promise {\n    // Busca la encuesta por su ID\n    const encuesta = await this.encuestaRepository.findOne({ where: { id } });\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Encuesta no encontrada');\n    }\n\n    // Actualiza el estado de la encuesta\n    encuesta.habilitada = habilitada;\n    await this.encuestaRepository.save(encuesta);\n\n    // Retorna un mensaje de éxito\n    return {\n      mensaje: `La encuesta fue ${habilitada ? 'habilitada' : 'deshabilitada'} correctamente`,\n    };\n  }\n\n  // Método para obtener una encuesta por su código de respuesta\n  async obtenerEncuestaPorCodigo(\n    codigo: string,\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS,\n  ): Promise {\n    // Determinar qué campo usar según el tipo de código\n    const whereCondition =\n      codigoTipo === CodigoTipoEnum.RESPUESTA\n        ? { codigoRespuesta: codigo, habilitada: true }\n        : { codigoResultados: codigo, habilitada: true };\n\n    // Buscar la encuesta que tenga este código\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition,\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new BadRequestException('Código de encuesta no válido');\n    }\n\n    // Se agrega una validación para rechazar el acceso si la encuesta ya está vencida.\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('=== VALIDACIÓN DE FECHA DE VENCIMIENTO ===');\n      console.log('Fecha actual (ahora):', ahora.toISOString());\n      console.log('Fecha vencimiento BD:', encuesta.fechaVencimiento);\n      console.log(\n        'Fecha vencimiento parseada:',\n        fechaVencimiento.toISOString(),\n      );\n      console.log('Comparación (vencida?):', fechaVencimiento  a.numero - b.numero);\n    encuesta.preguntas.forEach((pregunta) => {\n      if (pregunta.opciones) {\n        pregunta.opciones.sort((a, b) => a.numero - b.numero);\n      }\n    });\n\n    return encuesta;\n  }\n\n  // Funcionalidad extra para generar un CSV (Emilia)\n  async resultadosCSV(id: number, codigoResultados: string): Promise {\n    // Obtiene los resultados de la encuesta validando el código de resultados\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const resultados = await this.obtenerResultados(id, codigoResultados);\n\n    // Si no se encuentran resultados, arroja una excepción\n    if (!resultados) {\n      throw new NotFoundException('No se encontraron resultados');\n    }\n\n    const filas: any[] = []; // Guarda los datos en formato fila para el CSV\n\n    const hayPreguntaAbierta = resultados.resultados.some(\n      (pregunta: any) => pregunta.tipo === 'ABIERTA',\n    );\n\n    // Recorre cada pregunta para armar las filas\n    resultados.resultados.forEach((pregunta: any) => {\n      // Si la pregunta es abierta, se agregan todas las respuestas individuales como filas\n      if (pregunta.tipo === 'ABIERTA') {\n        pregunta.respuestas.forEach((textoRespuesta: string) => {\n          filas.push({\n            Pregunta: pregunta.pregunta,\n            Tipo: pregunta.tipo,\n            Respuesta: textoRespuesta,\n          });\n        });\n      } else {\n        // Si la pregunta es de opción, se agregan las opciones con la cantidad de respuestas\n        pregunta.opciones.forEach((opcion: any) => {\n          const fila: any = {\n            Pregunta: pregunta.pregunta,\n            Tipo: pregunta.tipo,\n            Opcion: opcion.opcion,\n            'Cantidad Respuestas': opcion.conteo,\n          };\n          // Solo agrego si hay preguntas abiertas\n          if (hayPreguntaAbierta) {\n            fila.Respuesta = '';\n          }\n          filas.push(fila);\n        });\n      }\n    });\n\n    // Convierte las filas a formato csv utilizando papaparse\n    const csv = Papa.unparse(filas, {\n      quotes: true,\n      delimiter: ';',\n      header: true,\n      newline: '\\r\\n',\n    });\n\n    // Retorna el CSV\n    return '\\uFEFF' + csv;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObtenerEncuestaDto.html":{"url":"classes/ObtenerEncuestaDto.html","title":"class - ObtenerEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObtenerEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                codigo\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        codigo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsUUID('4')@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CodigoTipoEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CodigoTipoEnum})@IsEnum(CodigoTipoEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsEnum, IsNotEmpty, IsUUID } from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum'; // Enumerador para los tipos de código permitidos\n\n// Clase DTO (Data Transfer Object) para obtener una encuesta\nexport class ObtenerEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"codigo\" en Swagger\n  @IsUUID('4') // Valida que el valor sea un UUID versión 4\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  codigo: string; // Código único para identificar la encuesta\n\n  @ApiProperty({ enum: CodigoTipoEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(CodigoTipoEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: CodigoTipoEnum; // Tipo de código (puede ser \"RESULTADOS\" o \"RESPUESTA\")\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Opcion.html":{"url":"entities/Opcion.html","title":"entity - Opcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Opcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/opcion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  //OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n//import { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\n\n@Entity({ name: 'opciones' }) // Define la clase como una entidad de la base de datos con el nombre \"opciones\"\nexport class Opcion {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @ManyToOne(() => Pregunta) // Relación muchos a uno con la entidad \"Pregunta\"\n  @JoinColumn({ name: 'id_pregunta' }) // Define la columna \"id_pregunta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  pregunta: Pregunta; // Referencia a la pregunta a la que pertenece esta opción\n\n  // EXTRA POR MÓDULO RESPUESTAS\n  // @OneToMany(() => RespuestaOpcion, (r) => r.opcion)\n  // respuestas: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OpcionConRespuestasDto.html":{"url":"classes/OpcionConRespuestasDto.html","title":"class - OpcionConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OpcionConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cantidad_respuestas\n                            \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cantidad_respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OpcionesController.html":{"url":"controllers/OpcionesController.html","title":"controller - OpcionesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OpcionesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/controllers/opciones.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas/:preguntaId/opciones\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  ParseIntPipe,\n  Delete,\n} from '@nestjs/common';\nimport { OpcionesService } from '../services/opciones.service';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n@Controller('preguntas/:preguntaId/opciones')\nexport class OpcionesController {\n  constructor(private readonly opcionesService: OpcionesService) {}\n\n  @Post()\n  async crearOpcion(\n    @Param('preguntaId', ParseIntPipe) preguntaId: number,\n    @Body() createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    return this.opcionesService.crearOpcion(preguntaId, createOpcionDto);\n  }\n\n  @Delete(':id')\n  async eliminarOpcion(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return this.opcionesService.eliminarOpcion(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpcionesModule.html":{"url":"modules/OpcionesModule.html","title":"module - OpcionesModule","body":"\n                   \n\n\n\n\n    Modules\n    OpcionesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\n\nOpcionesService\n\nOpcionesService\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/opciones/opciones.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpcionesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OpcionesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Opcion } from '../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../encuestas/entities/pregunta.entity';\nimport { OpcionesService } from './services/opciones.service';\nimport { OpcionesController } from './controllers/opciones.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Opcion, Pregunta])],\n  controllers: [OpcionesController],\n  providers: [OpcionesService],\n})\nexport class OpcionesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpcionesService.html":{"url":"injectables/OpcionesService.html","title":"injectable - OpcionesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpcionesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/services/opciones.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(opcionRepository: Repository, preguntaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/opciones/services/opciones.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n@Injectable()\nexport class OpcionesService {\n  constructor(\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n  ) {}\n\n  async crearOpcion(\n    preguntaId: number,\n    createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    const pregunta = await this.preguntaRepository.findOneBy({\n      id: preguntaId,\n    });\n    if (!pregunta) {\n      throw new NotFoundException('Pregunta no encontrada');\n    }\n\n    const opcion = this.opcionRepository.create({\n      ...createOpcionDto,\n      pregunta,\n    });\n\n    const opcionGuardada = await this.opcionRepository.save(opcion);\n\n    return {\n      mensaje: 'Opción creada correctamente',\n      opcion: opcionGuardada,\n    };\n  }\n\n  async eliminarOpcion(id: number): Promise {\n    const opcion = await this.opcionRepository.findOneBy({ id });\n    if (!opcion) {\n      throw new NotFoundException('Opción no encontrada');\n    }\n\n    await this.opcionRepository.delete(id);\n    return { mensaje: 'Opción eliminada correctamente' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta.html":{"url":"entities/Pregunta.html","title":"entity - Pregunta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/pregunta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación del enumerador para los tipos de respuesta\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de la entidad relacionada \"Encuesta\"\nimport { Encuesta } from './encuesta.entity';\n// Importación de la entidad relacionada \"Opcion\"\nimport { Opcion } from './opcion.entity';\n//import { RespuestaAbierta } from 'src/modules/respuestas/entities/respuesta-abierta.entity';\n\n@Entity({ name: 'preguntas' }) // Define la clase como una entidad de la base de datos con el nombre \"preguntas\"\nexport class Pregunta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo', // Nombre de la columna en la base de datos\n    nullable: true, // Permitir valores nulos temporalmente\n    default: TiposRespuestaEnum.ABIERTA, // Valor por defecto para registros existentes\n  }) // Define la columna \"tipo\" como un enumerador\n  tipo: TiposRespuestaEnum; // Especifica el tipo de respuesta permitido para la pregunta\n\n  @ManyToOne(() => Encuesta) // Relación muchos a uno con la entidad \"Encuesta\"\n  @JoinColumn({ name: 'id_encuesta' }) // Define la columna \"id_encuesta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  encuesta: Encuesta; // Referencia a la encuesta a la que pertenece esta pregunta\n\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta, { cascade: ['insert'] }) // Relación uno a muchos con la entidad \"Opcion\"\n  opciones: Opcion[]; // Lista de opciones asociadas a la pregunta\n\n  // EXTRA POR EL MÓDULO DE RESPUESTAS\n  // @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  // @OneToMany(() => RespuestaAbierta, (r) => r.pregunta)\n  // respuestasAbiertas: RespuestaAbierta[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta-1.html":{"url":"entities/Pregunta-1.html","title":"entity - Pregunta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/entities/pregunta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.preguntas)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { TiposRespuestaEnum } from '../../encuestas/enums/tipos-respuesta.enum';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n@Entity({ name: 'preguntas' })\nexport class Pregunta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  numero: number;\n\n  @Column()\n  texto: string;\n\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo_respuesta', // Nombre de la columna en la base de datos\n  })\n  tipo: TiposRespuestaEnum;\n\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.preguntas)\n  encuesta: Encuesta;\n\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta)\n  opciones: Opcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PreguntaConRespuestasDto.html":{"url":"classes/PreguntaConRespuestasDto.html","title":"class - PreguntaConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PreguntaConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                opciones\n                            \n                            \n                                respuestas_abiertas\n                            \n                            \n                                texto\n                            \n                            \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpcionConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        respuestas_abiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PreguntasController.html":{"url":"controllers/PreguntasController.html","title":"controller - PreguntasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PreguntasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/controllers/preguntas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    \n                                    Async\n                                eliminarPregunta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(id: number, actualizarDto: ActualizarPreguntaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                actualizarDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPregunta(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Param,\n  Patch,\n  Delete,\n  ParseIntPipe,\n} from '@nestjs/common';\n// Importación del servicio de preguntas\nimport { PreguntasService } from '../services/preguntas.service';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Controller('preguntas') // Define el controlador para manejar las rutas relacionadas con \"/preguntas\"\nexport class PreguntasController {\n  constructor(private readonly preguntasService: PreguntasService) {} // Inyección del servicio de preguntas\n\n  @Patch(':id') // Define un endpoint PATCH para actualizar una pregunta por su ID\n  async actualizarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n    @Body() actualizarDto: ActualizarPreguntaDto, // Extrae el cuerpo de la petición y lo valida según ActualizarPreguntaDto.\n  ): Promise {\n    // Llama al método actualizarPregunta del servicio, pasándole el id y los nuevos datos.\n    return this.preguntasService.actualizarPregunta(id, actualizarDto);\n  }\n\n  @Delete(':id') // Define un endpoint DELETE para eliminar una pregunta y sus opciones\n  async eliminarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n  ): Promise {\n    // Llama al método del servicio que elimina la pregunta junto con sus opciones\n    return this.preguntasService.eliminarPreguntaConOpciones(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PreguntasModule.html":{"url":"modules/PreguntasModule.html","title":"module - PreguntasModule","body":"\n                   \n\n\n\n\n    Modules\n    PreguntasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\n\nPreguntasService\n\nPreguntasService\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/preguntas/preguntas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PreguntasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PreguntasController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Pregunta } from '../encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from '../encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { PreguntasService } from '../preguntas/services/preguntas.service'; // Servicio para la lógica de negocio de preguntas\nimport { PreguntasController } from '../preguntas/controllers/preguntas.controller'; // Controlador para manejar las rutas relacionadas con preguntas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Pregunta, Opcion]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [PreguntasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [PreguntasService],\n})\n// Exportación del módulo de preguntas para que pueda ser utilizado en otros módulos\nexport class PreguntasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreguntasService.html":{"url":"injectables/PreguntasService.html","title":"injectable - PreguntasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PreguntasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/services/preguntas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    Async\n                                eliminarPreguntaConOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(preguntaRepo: Repository, opcionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/preguntas/services/preguntas.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        preguntaRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(idPregunta: number, updateDto: ActualizarPreguntaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarPreguntaConOpciones\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPreguntaConOpciones(idPregunta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación de la entidad Pregunta\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\n// Importación de la entidad Opcion\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class PreguntasService {\n  constructor(\n    // Inyección del repositorio de la entidad Pregunta\n    @InjectRepository(Pregunta)\n    private readonly preguntaRepo: Repository,\n    // Inyección del repositorio de la entidad Opcion\n    @InjectRepository(Opcion)\n    private readonly opcionRepo: Repository,\n  ) {}\n\n  // Método para actualizar una pregunta\n  async actualizarPregunta(\n    idPregunta: number,\n    updateDto: ActualizarPreguntaDto,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOneBy({ id: idPregunta }); // Busca la pregunta por ID\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza una excepción 404\n\n    Object.assign(pregunta, updateDto); // Asigna los nuevos valores a la entidad pregunta\n    await this.preguntaRepo.save(pregunta); // Guarda la entidad actualizada en la base de datos\n\n    return { mensaje: 'Pregunta actualizada correctamente' }; // Retorna un mensaje de éxito\n  }\n\n  // Método para eliminar una pregunta y sus opciones\n  async eliminarPreguntaConOpciones(\n    idPregunta: number,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOne({\n      // Busca la pregunta junto con sus opciones\n      where: { id: idPregunta },\n      relations: ['opciones'],\n    });\n\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza excepción 404\n\n    // Se eliminan las opciones relacionadas\n    if (pregunta.opciones && pregunta.opciones.length > 0) {\n      await this.opcionRepo.delete({ pregunta: { id: idPregunta } });\n    }\n\n    // Se elimina la pregunta\n    await this.preguntaRepo.delete(idPregunta);\n\n    return { mensaje: 'Pregunta eliminada correctamente' }; // Retorna un mensaje de éxito\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarRespuestasDto.html":{"url":"classes/RegistrarRespuestasDto.html","title":"class - RegistrarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RespuestaPreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\n// Representa la respuesta a una pregunta individual de la encuesta:\n// id_pregunta: Un número obligatorio que identifica la pregunta (validado con @IsNumber() y @IsNotEmpty())\n// tipo: Un string que debe ser uno de tres valores específicos (tipos de pregunta):\n// 'ABIERTA': Para preguntas de respuesta libre\n// 'OPCION_MULTIPLE_SELECCION_SIMPLE': Para preguntas con una sola opción seleccionable\n// 'OPCION_MULTIPLE_SELECCION_MULTIPLE': Para preguntas con múltiples opciones seleccionables\n// texto: Un campo opcional (@IsOptional()) de tipo string para almacenar la respuesta a preguntas abiertas\n// opciones: Un campo opcional que contiene un array de números, para almacenar los IDs de las opciones seleccionadas en preguntas de opción múltiple\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\n// Actúa como contenedor principal que será recibido por el controlador:\n// respuestas: Un array obligatorio de objetos RespuestaPreguntaDto\n// Usa @ValidateNested() para validar cada elemento del array según las reglas de RespuestaPreguntaDto\n// Usa @Type(() => RespuestaPreguntaDto) para asegurar que cada elemento sea transformado correctamente\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta.html":{"url":"entities/Respuesta.html","title":"entity - Respuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/respuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ra => ra.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ro => ro.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from '../../respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from '../../respuestas/entities/respuesta-opcion.entity';\n\n@Entity('respuestas')\nexport class Respuesta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int')\n  id_encuesta: number;\n\n  @ManyToOne(() => Encuesta)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  @OneToMany(() => RespuestaAbierta, (ra) => ra.respuesta)\n  respuestasAbiertas: RespuestaAbierta[];\n\n  @OneToMany(() => RespuestaOpcion, (ro) => ro.respuesta)\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta-1.html":{"url":"entities/Respuesta-1.html","title":"entity - Respuesta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.respuestas)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaAbierta => respuestaAbierta.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaOpcion => respuestaOpcion.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  JoinColumn,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from './respuesta-abierta.entity';\nimport { RespuestaOpcion } from './respuesta-opcion.entity';\n\n@Entity('respuestas')\nexport class Respuesta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int', { nullable: true })\n  id_encuesta: number;\n\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.respuestas)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  @OneToMany(\n    () => RespuestaAbierta,\n    (respuestaAbierta) => respuestaAbierta.respuesta,\n  )\n  respuestasAbiertas: RespuestaAbierta[];\n\n  @OneToMany(\n    () => RespuestaOpcion,\n    (respuestaOpcion) => respuestaOpcion.respuesta,\n  )\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaAbierta.html":{"url":"entities/RespuestaAbierta.html","title":"entity - RespuestaAbierta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaAbierta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-abierta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { Respuesta } from './respuesta.entity';\n\n@Entity('respuestas_abiertas')\nexport class RespuestaAbierta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'text', nullable: true })\n  texto: string;\n\n  @Column('int', { nullable: true })\n  id_pregunta: number;\n\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  @ManyToOne(() => Pregunta)\n  @JoinColumn({ name: 'id_pregunta' })\n  pregunta: Pregunta;\n\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaOpcion.html":{"url":"entities/RespuestaOpcion.html","title":"entity - RespuestaOpcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaOpcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-opcion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_opcion\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                opcion\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_opcion'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Respuesta } from './respuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n@Entity('respuestas_opciones')\nexport class RespuestaOpcion {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  @Column('int', { nullable: true })\n  id_opcion: number;\n\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n\n  @ManyToOne(() => Opcion)\n  @JoinColumn({ name: 'id_opcion' })\n  opcion: Opcion;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaPreguntaDto.html":{"url":"classes/RespuestaPreguntaDto.html","title":"class - RespuestaPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                opciones\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ABIERTA\" | \"OPCION_MULTIPLE_SELECCION_SIMPLE\" | \"OPCION_MULTIPLE_SELECCION_MULTIPLE\" | \"VERDADERO_FALSO\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\n// Representa la respuesta a una pregunta individual de la encuesta:\n// id_pregunta: Un número obligatorio que identifica la pregunta (validado con @IsNumber() y @IsNotEmpty())\n// tipo: Un string que debe ser uno de tres valores específicos (tipos de pregunta):\n// 'ABIERTA': Para preguntas de respuesta libre\n// 'OPCION_MULTIPLE_SELECCION_SIMPLE': Para preguntas con una sola opción seleccionable\n// 'OPCION_MULTIPLE_SELECCION_MULTIPLE': Para preguntas con múltiples opciones seleccionables\n// texto: Un campo opcional (@IsOptional()) de tipo string para almacenar la respuesta a preguntas abiertas\n// opciones: Un campo opcional que contiene un array de números, para almacenar los IDs de las opciones seleccionadas en preguntas de opción múltiple\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\n// Actúa como contenedor principal que será recibido por el controlador:\n// respuestas: Un array obligatorio de objetos RespuestaPreguntaDto\n// Usa @ValidateNested() para validar cada elemento del array según las reglas de RespuestaPreguntaDto\n// Usa @Type(() => RespuestaPreguntaDto) para asegurar que cada elemento sea transformado correctamente\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RespuestasController.html":{"url":"controllers/RespuestasController.html","title":"controller - RespuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RespuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/controllers/respuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                respuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                visualizarRespuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, tokenParticipacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:id/:tokenParticipacion')@ApiOperation({summary: 'Obtener encuesta para participación', description: 'Devuelve la estructura completa de una encuesta para que un usuario pueda participar.'})@ApiParam({name: 'id', description: 'ID numérico de la encuesta', example: '1', required: true})@ApiParam({name: 'tokenParticipacion', description: 'Token UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente', type: CreateEncuestaDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o token inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:154\n                        \n                    \n\n\n            \n                \n                        Obtiene la estructura de una encuesta para participación\nEste endpoint devuelve la estructura completa de una encuesta para que\nun usuario pueda participar en ella, incluyendo todas sus preguntas y opciones.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(id: number, tokenParticipacion: string, registrarRespuestasDto: RegistrarRespuestasDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/:tokenParticipacion')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Registrar respuestas de una encuesta', description: 'Guarda las respuestas de un usuario para una encuesta específica. Requiere el ID de la encuesta y el token de participación.'})@ApiParam({name: 'id', description: 'ID numérico de la encuesta', example: '1', required: true})@ApiParam({name: 'tokenParticipacion', description: 'Token UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiBody({type: RegistrarRespuestasDto, description: 'Objeto con las respuestas del usuario para cada pregunta de la encuesta'})@ApiResponse({status: 201, description: 'Respuestas registradas exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o enlace inválido'})@ApiResponse({status: 400, description: 'Datos de respuesta inválidos o incompletos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                registrarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        visualizarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestas(tokenVisualizacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:tokenVisualizacion')@ApiOperation({summary: 'Visualizar respuestas de una encuesta', description: 'Obtiene todas las respuestas recopiladas para una encuesta usando el token de visualización.'})@ApiParam({name: 'tokenVisualizacion', description: 'Token UUID para visualizar los resultados de la encuesta', example: 'xyz789uvw012', required: true})@ApiResponse({status: 200, description: 'Respuestas obtenidas exitosamente', type: VisualizarRespuestasDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o token de visualización inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Obtiene los resultados de una encuesta usando el token de visualización\nEste endpoint permite consultar todas las respuestas recopiladas para una encuesta\nutilizando el token de visualización proporcionado al crear la encuesta.\nIncluye estadísticas como el número de respuestas por opción.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importamos los decoradores y herramientas necesarias del framework NestJS.\nimport {\n  Controller,\n  Post,\n  Body,\n  Param,\n  HttpCode,\n  HttpStatus,\n  Get,\n  ParseIntPipe,\n} from '@nestjs/common';\n// Importamos un DTO (estructura de datos) que representa una encuesta (para cuando devolvemos datos al frontend).\nimport { CreateEncuestaDto } from '../../encuestas/dtos/create-encuesta.dto';\n// Servicio donde está la lógica principal para manejar respuestas (guardar, recuperar, etc).\nimport { RespuestasService } from '../services/respuestas.service';\n// DTO que representa los datos que el usuario envía cuando responde una encuesta.\nimport { RegistrarRespuestasDto } from '../dtos/registrar-respuestas.dto';\n// DTO que representa cómo se mostrarán las respuestas cuando alguien quiera ver los resultados.\nimport { VisualizarRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\n// Herramientas para documentar la API con Swagger (permite visualizar y probar la API en el navegador).\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiParam,\n  ApiBody,\n  ApiResponse,\n} from '@nestjs/swagger';\n// Etiqueta que agrupa las rutas de este controlador bajo el nombre \"respuestas\" en Swagger.\n@ApiTags('respuestas')\n// Este controlador maneja las rutas relacionadas a respuestas de encuestas.\n@Controller('respuestas')\nexport class RespuestasController {\n  // Inyectamos el servicio de respuestas para poder usar sus funciones.\n  constructor(private readonly respuestasService: RespuestasService) {}\n\n  @Post(':id/:tokenParticipacion')\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({\n    summary: 'Registrar respuestas de una encuesta',\n    description:\n      'Guarda las respuestas de un usuario para una encuesta específica. Requiere el ID de la encuesta y el token de participación.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID numérico de la encuesta',\n    example: '1',\n    required: true,\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiBody({\n    type: RegistrarRespuestasDto,\n    description:\n      'Objeto con las respuestas del usuario para cada pregunta de la encuesta',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Respuestas registradas exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o enlace inválido',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de respuesta inválidos o incompletos',\n  })\n  async registrarRespuestas(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n    @Body() registrarRespuestasDto: RegistrarRespuestasDto,\n  ): Promise {\n    await this.respuestasService.registrarRespuestas(\n      tokenParticipacion,\n      registrarRespuestasDto,\n      id,\n    );\n    return { message: 'Respuestas registradas exitosamente' };\n  }\n\n  /**\n   * Obtiene los resultados de una encuesta usando el token de visualización\n   *\n   * Este endpoint permite consultar todas las respuestas recopiladas para una encuesta\n   * utilizando el token de visualización proporcionado al crear la encuesta.\n   * Incluye estadísticas como el número de respuestas por opción.\n   */\n  @Get('resultados/:tokenVisualizacion')\n  @ApiOperation({\n    summary: 'Visualizar respuestas de una encuesta',\n    description:\n      'Obtiene todas las respuestas recopiladas para una encuesta usando el token de visualización.',\n  })\n  @ApiParam({\n    name: 'tokenVisualizacion',\n    description: 'Token UUID para visualizar los resultados de la encuesta',\n    example: 'xyz789uvw012',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Respuestas obtenidas exitosamente',\n    type: VisualizarRespuestasDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o token de visualización inválido',\n  })\n  async visualizarRespuestas(\n    @Param('tokenVisualizacion') tokenVisualizacion: string,\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(tokenVisualizacion);\n    return { message: 'Éxito', data: resultado };\n  }\n\n  /**\n   * Obtiene la estructura de una encuesta para participación\n   *\n   * Este endpoint devuelve la estructura completa de una encuesta para que\n   * un usuario pueda participar en ella, incluyendo todas sus preguntas y opciones.\n   */\n  @Get('participar/:id/:tokenParticipacion')\n  @ApiOperation({\n    summary: 'Obtener encuesta para participación',\n    description:\n      'Devuelve la estructura completa de una encuesta para que un usuario pueda participar.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID numérico de la encuesta',\n    example: '1',\n    required: true,\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n    type: CreateEncuestaDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o token inválido',\n  })\n  async obtenerEncuestaParaParticipacion(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n  ): Promise {\n    const encuesta =\n      await this.respuestasService.obtenerEncuestaParaParticipacion(\n        id,\n        tokenParticipacion,\n      );\n    return { message: 'Encuesta obtenida exitosamente', data: encuesta };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RespuestasModule.html":{"url":"modules/RespuestasModule.html","title":"module - RespuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    RespuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_exports\n\n\n\ncluster_RespuestasModule_providers\n\n\n\n\nRespuestasService \n\nRespuestasService \n\n\n\nRespuestasModule\n\nRespuestasModule\n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/respuestas/respuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RespuestasController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { RespuestasController } from './controllers/respuestas.controller'; // Controlador para manejar las rutas relacionadas con respuesta\nimport { RespuestasService } from './services/respuestas.service'; // Servicio para la lógica de negocio de respuesta\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Respuesta } from './entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestaAbierta } from './entities/respuesta-abierta.entity'; //Entidad que representa la tabla \"Respuesta Abierta\" en la base de datos\nimport { RespuestaOpcion } from './entities/respuesta-opcion.entity'; //Entidad que representa la tabla \"RespuestaOpciones\" en la base de datos\nimport { Encuesta } from '../encuestas/entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from '../encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from '../encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([\n      Encuesta,\n      Pregunta,\n      Opcion,\n      Respuesta,\n      RespuestaAbierta,\n      RespuestaOpcion,\n    ]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  // Declaración de los proveedores que contienen la lógica de negocio\n  controllers: [RespuestasController],\n  providers: [RespuestasService],\n  exports: [RespuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class RespuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RespuestasService.html":{"url":"injectables/RespuestasService.html","title":"injectable - RespuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RespuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/services/respuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    Async\n                                visualizarRespuestasDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(respuestaRepository: Repository, respuestaAbiertaRepository: Repository, respuestaOpcionRepository: Repository, encuestaRepository: Repository, preguntaRepository: Repository, opcionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/services/respuestas.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaAbiertaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaOpcionRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, codigoParticipacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:319\n                        \n                    \n\n\n            \n                \n                        Obtiene la estructura de una encuesta para participación\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID numérico de la encuesta\n\n\n                                            \n                                        \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID de participación\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Objeto DTO con la estructura de la encuesta para participar\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(codigoParticipacion: string, registarRespuestasDto: RegistrarRespuestasDto, encuestaId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Registra las respuestas de un usuario para una encuesta específica\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID de participación de la encuesta\n\n\n                                            \n                                        \n                                        \n                                                registarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nObjeto con las respuestas del usuario\n\n\n                                            \n                                        \n                                        \n                                                encuestaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nID opcional de la encuesta para validación adicional\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        visualizarRespuestasDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestasDto(codigoVisualizacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Obtiene las respuestas registradas de una encuesta específica para visualizarlas\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                codigoVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID para visualizar los resultados\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Objeto DTO con toda la información de la encuesta y sus respuestas\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Respuesta } from 'src/modules/respuestas/entities/respuesta.entity';\nimport { RespuestaAbierta } from 'src/modules/respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\nimport { Encuesta } from 'src/modules/encuestas/entities/encuesta.entity';\nimport { Pregunta } from 'src/modules/encuestas/entities/pregunta.entity';\nimport { Opcion } from 'src/modules/encuestas/entities/opcion.entity';\nimport { RegistrarRespuestasDto } from 'src/modules/respuestas/dtos/registrar-respuestas.dto';\nimport { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\nimport { VisualizarRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { PreguntaConRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { CreateEncuestaDto } from 'src/modules/encuestas/dtos/create-encuesta.dto';\n\n@Injectable()\nexport class RespuestasService {\n  constructor(\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n    @InjectRepository(RespuestaAbierta)\n    private respuestaAbiertaRepository: Repository,\n    @InjectRepository(RespuestaOpcion)\n    private respuestaOpcionRepository: Repository,\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n  ) {}\n  /**\n   * Registra las respuestas de un usuario para una encuesta específica\n   *\n   * @param codigoParticipacion - Token UUID de participación de la encuesta\n   * @param registarRespuestasDto - Objeto con las respuestas del usuario\n   * @param encuestaId - ID opcional de la encuesta para validación adicional\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   * @throws BadRequestException - Si faltan respuestas obligatorias o son inválidas\n   */\n  async registrarRespuestas(\n    codigoParticipacion: string,\n    registarRespuestasDto: RegistrarRespuestasDto,\n    encuestaId?: number,\n  ): Promise {\n    // Validar que el DTO de respuestas no esté vacío\n    if (\n      !registarRespuestasDto.respuestas ||\n      registarRespuestasDto.respuestas.length === 0\n    ) {\n      throw new BadRequestException('No se proporcionaron respuestas');\n    }\n\n    // Construir la condición de búsqueda con un tipo específico\n    const whereCondition: {\n      codigoRespuesta: string;\n      habilitada: boolean;\n      id?: number;\n    } = {\n      codigoRespuesta: codigoParticipacion,\n      habilitada: true,\n    };\n\n    // Si se proporciona el ID de la encuesta, añadirlo a la condición\n    if (encuestaId) {\n      whereCondition.id = encuestaId;\n    }\n\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition,\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace inválido');\n    }\n\n    // Validar si la encuesta ha vencido\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('Validando fecha de vencimiento en registrarRespuestas:');\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  r.id_pregunta,\n    );\n\n    // Verificar si todas las preguntas obligatorias están respondidas\n    const preguntasFaltantes = preguntasObligatorias.filter(\n      (p) => !preguntasRespondidas.includes(p.id),\n    );\n\n    if (preguntasFaltantes.length > 0) {\n      throw new BadRequestException(\n        `Debe responder todas las preguntas obligatorias. Faltan las preguntas: ${preguntasFaltantes.map((p) => p.numero).join(', ')}`,\n      );\n    }\n\n    // Crear una nueva respuesta vinculada a la encuesta\n    const respuesta = this.respuestaRepository.create({\n      id_encuesta: encuesta.id,\n    });\n    const respuestaGuardada = await this.respuestaRepository.save(respuesta);\n\n    for (const respuestaPregunta of registarRespuestasDto.respuestas) {\n      const pregunta = await this.preguntaRepository.findOne({\n        where: {\n          id: respuestaPregunta.id_pregunta,\n          encuesta: { id: encuesta.id },\n        },\n      });\n\n      if (!pregunta) {\n        throw new BadRequestException(\n          `Pregunta ${respuestaPregunta.id_pregunta} no encontrada o no pertenece a la encuesta`,\n        );\n      }\n\n      if (respuestaPregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        if (!respuestaPregunta.texto) {\n          throw new BadRequestException(\n            'Respuesta de texto requerida para preguntas abiertas',\n          );\n        }\n\n        const respuestasAbiertas = this.respuestaAbiertaRepository.create({\n          texto: respuestaPregunta.texto,\n          id_pregunta: pregunta.id,\n          id_respuesta: respuestaGuardada.id,\n        });\n        await this.respuestaAbiertaRepository.save(respuestasAbiertas);\n      } else if (\n        respuestaPregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO\n      ) {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length !== 1\n        ) {\n          throw new BadRequestException(\n            'Debe seleccionar exactamente una opción (Verdadero o Falso)',\n          );\n        }\n\n        // Verificar que la opción seleccionada pertenece a la pregunta\n        const opcion = await this.opcionRepository.findOne({\n          where: {\n            id: respuestaPregunta.opciones[0],\n            pregunta: { id: pregunta.id },\n          },\n        });\n\n        if (!opcion) {\n          throw new BadRequestException(\n            `Opción seleccionada no válida para esta pregunta de Verdadero/Falso`,\n          );\n        }\n\n        const respuestaOpcion = this.respuestaOpcionRepository.create({\n          id_respuesta: respuestaGuardada.id,\n          id_opcion: respuestaPregunta.opciones[0],\n        });\n        await this.respuestaOpcionRepository.save(respuestaOpcion);\n      } else {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length === 0\n        ) {\n          throw new BadRequestException(\n            'Al menos una opcion debe ser seleccionada',\n          );\n        }\n\n        if (\n          pregunta.tipo ===\n            TiposRespuestaEnum.OPCION_MULTIPLE_SELECCION_SIMPLE &&\n          respuestaPregunta.opciones.length > 1\n        ) {\n          throw new BadRequestException(\n            'Solo se permite una seleccion para este tipo de pregunta',\n          );\n        }\n\n        for (const idOpcion of respuestaPregunta.opciones) {\n          const opcion = await this.opcionRepository.findOne({\n            where: {\n              id: idOpcion,\n              pregunta: { id: pregunta.id },\n            },\n          });\n\n          if (!opcion) {\n            // Obtener todas las opciones disponibles para esta pregunta para depuración\n            const opcionesDisponibles = await this.opcionRepository.find({\n              where: { pregunta: { id: pregunta.id } },\n              select: ['id', 'texto', 'numero'],\n            });\n\n            console.log(\n              `Error: Opción ${idOpcion} no encontrada para la pregunta ${pregunta.id}`,\n            );\n            console.log(\n              'Opciones disponibles para esta pregunta:',\n              opcionesDisponibles,\n            );\n\n            throw new BadRequestException(\n              `Opcion ${idOpcion} no encontrada o no pertenece a esta pregunta. Opciones disponibles: ${JSON.stringify(opcionesDisponibles)}`,\n            );\n          }\n          const respuestaOpcion = this.respuestaOpcionRepository.create({\n            id_respuesta: respuestaGuardada.id,\n            id_opcion: idOpcion,\n          });\n          await this.respuestaOpcionRepository.save(respuestaOpcion);\n        }\n      }\n    }\n  }\n  /**\n   * Obtiene las respuestas registradas de una encuesta específica para visualizarlas\n   *\n   * @param codigoVisualizacion - Token UUID para visualizar los resultados\n   * @returns Objeto DTO con toda la información de la encuesta y sus respuestas\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   */\n  async visualizarRespuestasDto(\n    codigoVisualizacion: string,\n  ): Promise {\n    // Busca la encuesta con el código de visualización\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { codigoResultados: codigoVisualizacion },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace inválido');\n    }\n\n    // Construir el objeto\n    const resultado: VisualizarRespuestasDto = {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      codigoResultados: encuesta.codigoResultados,\n      habilitada: encuesta.habilitada,\n      preguntas: [],\n    };\n    //itera sobre las preguntas de la encuesta\n    for (const pregunta of encuesta.preguntas) {\n      const preguntaConRespuestas = new PreguntaConRespuestasDto(); //crea un dto de la pregunta.\n\n      preguntaConRespuestas.id = pregunta.id;\n      preguntaConRespuestas.numero = pregunta.numero;\n      preguntaConRespuestas.texto = pregunta.texto;\n      preguntaConRespuestas.tipo = pregunta.tipo;\n      // Inicializar las listas de opciones y respuestas abiertas\n      preguntaConRespuestas.opciones = [];\n      preguntaConRespuestas.respuestas_abiertas = [];\n      //obtiene las preguntas abiertas\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasAbiertas = await this.respuestaAbiertaRepository.find({\n          where: { id_pregunta: pregunta.id },\n        });\n        preguntaConRespuestas.respuestas_abiertas = respuestasAbiertas.map(\n          (r) => r.texto,\n        );\n      }\n\n      if (pregunta.opciones && pregunta.opciones.length > 0) {\n        for (const opcion of pregunta.opciones) {\n          // cuenta cuantas veces fue seleccionada cada opcion\n          const cantidadRespuestas = await this.respuestaOpcionRepository.count(\n            {\n              where: { id_opcion: opcion.id }, // Ajusta esto a tu esquema si es diferente\n            },\n          );\n\n          //  Añade la opción con la cantidad de respuestas al DTO\n\n          preguntaConRespuestas.opciones.push({\n            id: opcion.id,\n            texto: opcion.texto,\n            numero: opcion.numero,\n            cantidad_respuestas: cantidadRespuestas,\n          });\n        }\n      }\n\n      resultado.preguntas.push(preguntaConRespuestas); //Añade la pregunta con sus respuestas al resultado fina\n    }\n\n    return resultado;\n  }\n  /**\n   * Obtiene la estructura de una encuesta para participación\n   *\n   * @param id - ID numérico de la encuesta\n   * @param codigoParticipacion - Token UUID de participación\n   * @returns Objeto DTO con la estructura de la encuesta para participar\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   * @throws BadRequestException - Si la encuesta ha vencido\n   */\n  async obtenerEncuestaParaParticipacion(\n    id: number,\n    codigoParticipacion: string,\n  ): Promise {\n    // Buscar la encuesta por ID y código de participación\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoRespuesta: codigoParticipacion, habilitada: true },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException(\n        'Encuesta no encontrada o código de participación inválido',\n      );\n    }\n\n    // Validar si la encuesta ha vencido\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log(\n        'Validando fecha de vencimiento en obtenerEncuestaParaParticipacion:',\n      );\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  ({\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones.map((opcion) => ({\n          id: opcion.id,\n          texto: opcion.texto,\n          numero: opcion.numero,\n        })),\n      })),\n    };\n  }\n}\n\n// Guardamos respuestas de una encuesta anónima (registrarRespuestas).\n// Visualizamos los resultados de una encuesta (visualizarRespuestasDto).\n// Obtenemos los datos de una encuesta habilitada para que alguien pueda participar (obtenerEncuestaParaParticipacion).\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisualizarRespuestasDto.html":{"url":"classes/VisualizarRespuestasDto.html","title":"class - VisualizarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisualizarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                codigoRespuesta\n                            \n                            \n                                codigoResultados\n                            \n                            \n                                habilitada\n                            \n                            \n                                id\n                            \n                            \n                                nombre\n                            \n                            \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        habilitada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PreguntaConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/controllers/encuestas.controller.ts\n            \n            controller\n            EncuestasController\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n            \n            class\n            ActualizarPreguntaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n            \n            class\n            CreateEncuestaResponseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta.dto.ts\n            \n            class\n            CreateEncuestaDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-opcion.dto.ts\n            \n            class\n            CreateOpcionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-pregunta.dto.ts\n            \n            class\n            CreatePreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n            \n            class\n            ObtenerEncuestaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/encuesta.entity.ts\n            \n            entity\n            Encuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/opcion.entity.ts\n            \n            entity\n            Opcion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/services/encuestas.service.ts\n            \n            injectable\n            EncuestasService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/opciones/controllers/opciones.controller.ts\n            \n            controller\n            OpcionesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/opciones/services/opciones.service.ts\n            \n            injectable\n            OpcionesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/preguntas/controllers/preguntas.controller.ts\n            \n            controller\n            PreguntasController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/preguntas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/preguntas/services/preguntas.service.ts\n            \n            injectable\n            PreguntasService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/respuestas/controllers/respuestas.controller.ts\n            \n            controller\n            RespuestasController\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RegistrarRespuestasDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RespuestaPreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            OpcionConRespuestasDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            PreguntaConRespuestasDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            VisualizarRespuestasDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-abierta.entity.ts\n            \n            entity\n            RespuestaAbierta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-opcion.entity.ts\n            \n            entity\n            RespuestaOpcion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/services/respuestas.service.ts\n            \n            injectable\n            RespuestasService\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.2\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            helmet : ^8.1.0\n        \n            node-fetch : ^3.3.2\n        \n            papaparse : ^5.5.3\n        \n            pg : ^8.14.1\n        \n            pm2 : ^6.0.6\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            shortid : ^2.2.17\n        \n            typeorm : ^0.3.24\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CodigoTipoEnum   (src/.../codigo-tipo.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/encuestas/enums/codigo-tipo.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CodigoTipoEnum\n                    \n                \n                        \n                            \n                                 RESULTADOS\n                            \n                        \n                        \n                            \n                                Value : RESULTADOS\n                            \n                        \n                        \n                            \n                                 RESPUESTA\n                            \n                        \n                        \n                            \n                                Value : RESPUESTA\n                            \n                        \n            \n        \n\n    src/modules/encuestas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                 VERDADERO_FALSO\n                            \n                        \n                        \n                            \n                                Value : VERDADERO_FALSO\n                            \n                        \n            \n        \n\n    src/modules/preguntas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                 VERDADERO_FALSO\n                            \n                        \n                        \n                            \n                                Value : VERDADERO_FALSO\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nno toques el\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EncuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpcionesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PreguntasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RespuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_providers\n\n\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_exports\n\n\n\ncluster_RespuestasModule_providers\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\nRespuestasService \n\nRespuestasService \n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\nOpcionesService\n\nOpcionesService\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\nPreguntasService\n\nPreguntasService\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
