var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActualizarPreguntaDto.html",[0,0.098,1,2.077]],["body/classes/ActualizarPreguntaDto.html",[0,0.156,1,3.314,2,1.568,3,0.307,4,0.267,5,0.267,6,5.035,7,3.248,8,0.39,9,1.065,10,2.095,11,1.767,12,1.96,13,0.543,14,0.026,15,1.144,16,1.144,17,3.692,18,0.659,19,4.367,20,2.397,21,4.367,22,4.367,23,0.383,24,3.616,25,3.039,26,3.248,27,2.077,28,4.367,29,0.855,30,0.627,31,1.93,32,1.144,33,2.097,34,2.652,35,1.798,36,3.314,37,0.576,38,0.915,39,2.242,40,0.438,41,0.784,42,3.692,43,1.678,44,3.248,45,0.918,46,0.719,47,3.692,48,2.431,49,0.307,50,4.06,51,0.753,52,1.833,53,2.596,54,3.314,55,3.314,56,3.039,57,0.852,58,3.039,59,2.413,60,2.652,61,5.458,62,0.383,63,3.692,64,1.05,65,2.652,66,0.02,67,0.02]],["title/modules/AppModule.html",[68,1.314,69,2.285]],["body/modules/AppModule.html",[0,0.095,3,0.234,4,0.203,5,0.203,12,1.436,13,0.332,14,0.026,23,0.445,29,0.894,30,0.656,32,0.958,37,0.603,40,0.49,43,1.28,49,0.234,51,0.402,54,2.023,57,1.237,59,1.473,62,0.468,64,1.1,66,0.017,67,0.017,68,2.005,69,4.424,70,1.585,71,1.585,72,1.855,73,1.855,74,1.585,75,1.855,76,1.855,77,2.817,78,2.817,79,3.691,80,3.691,81,3.691,82,3.384,83,2.545,84,1.855,85,1.711,86,3.332,87,3.169,88,1.047,89,1.372,90,3.332,91,3.905,92,0.519,93,1.585,94,4.571,95,4.748,96,2.478,97,0.603,98,1.757,99,1.473,100,3.332,101,4.571,102,3.332,103,4.412,104,3.85,105,3.332,106,3.332,107,2.174,108,2.023,109,1.372,110,2.225,111,1.176,112,3.332,113,3.332,114,3.332,115,3.865,116,0.857,117,3.332,118,3.332,119,3.332,120,4.571,121,3.332,122,2.817,123,3.332,124,1.534,125,3.332,126,3.332,127,3.332,128,3.332,129,3.332,130,2.817,131,3.332,132,3.332,133,1.585,134,4.571,135,3.332,136,3.332,137,2.309,138,1.348,139,3.332,140,2.023,141,3.332,142,3.332,143,2.478,144,3.332,145,3.332,146,3.332,147,4.571,148,3.332,149,3.332,150,3.332,151,2.817,152,3.332,153,3.332,154,2.023,155,3.332,156,3.332,157,3.332,158,3.332,159,3.332,160,1.196,161,3.332,162,2.225,163,3.332,164,3.332,165,2.225,166,3.332,167,2.023,168,2.023,169,2.478,170,3.332,171,3.332,172,3.332,173,1.372,174,3.332,175,3.332,176,3.332,177,4.571,178,3.332,179,1.473,180,3.332,181,2.225]],["title/classes/CreateEncuestaDto.html",[0,0.098,182,1.756]],["body/classes/CreateEncuestaDto.html",[0,0.152,2,1.255,3,0.245,4,0.213,5,0.213,8,0.312,9,0.921,10,2.07,11,0.961,13,0.638,14,0.026,15,1.292,16,1.253,18,0.722,23,0.402,24,2.867,25,3.189,27,1.662,29,0.905,30,0.678,31,2.087,32,1.12,33,2.055,40,0.433,43,1.343,45,0.9,49,0.245,51,0.744,53,2.724,56,3.432,57,1.23,58,2.977,59,2.364,60,2.122,62,0.42,64,1.378,65,2.122,66,0.018,67,0.018,89,1.439,92,0.891,97,0.461,116,1.587,124,1.027,160,2.148,167,2.122,182,2.424,183,3.432,184,2.599,185,3.572,186,3.572,187,3.247,188,4.721,189,3.494,190,3.494,191,2.867,192,3.494,193,3.494,194,2.599,195,3.494,196,4.281,197,2.955,198,3.494,199,2.599,200,3.494,201,3.633,202,1.662,203,2.122,204,3.247,205,1.662,206,2.955,207,2.599,208,1.945,209,2.334,210,2.955,211,3.494,212,4.721,213,3.153,214,4.721,215,2.629,216,3.153,217,2.334,218,2.955,219,2.599,220,0.964,221,1.945,222,2.334,223,2.334,224,1.544,225,3.153,226,2.246,227,2.867,228,1.173,229,5.213,230,3.494,231,2.955,232,1.544,233,2.955,234,3.572,235,2.334,236,1.944,237,2.334,238,1.945,239,2.334,240,2.599,241,2.599,242,1.662,243,1.945,244,2.334,245,3.992,246,3.494,247,1.945,248,2.334]],["title/classes/CreateEncuestaResponseDto.html",[0,0.098,249,2.285]],["body/classes/CreateEncuestaResponseDto.html",[0,0.105,2,1.328,3,0.26,4,0.226,5,0.226,8,0.331,9,0.957,10,1.647,13,0.66,14,0.026,15,1.426,16,1.36,18,0.784,23,0.26,29,0.932,40,0.44,48,2.73,49,0.26,62,0.456,66,0.018,67,0.018,92,0.912,167,3.558,183,3.658,185,3.675,186,3.675,187,3.341,191,3.558,201,3.99,202,1.759,220,1.158,243,3.489,244,3.275,245,4.954,247,3.489,248,3.275,249,3.275,250,3.126,251,2.617,252,2.617,253,4.093,254,4.652,255,1.277,256,6.492,257,3.697,258,4.359,259,3.697,260,4.359,261,3.009,262,3.697,263,3.697,264,3.697,265,3.697,266,3.275,267,3.275,268,3.275,269,4.146,270,4.903,271,4.146,272,3.697,273,0.763,274,3.697,275,2.04]],["title/classes/CreateOpcionDto.html",[0,0.098,276,1.904]],["body/classes/CreateOpcionDto.html",[0,0.154,2,1.541,3,0.301,4,0.262,5,0.262,8,0.384,9,1.054,11,1.794,13,0.537,14,0.026,15,1.132,16,1.132,18,0.652,23,0.379,25,3.007,27,2.042,29,0.848,30,0.616,31,2.387,32,0.899,33,2.075,40,0.415,43,1.65,45,0.909,49,0.301,51,0.771,53,2.569,56,3.452,57,1.247,58,3.452,59,2.387,60,2.607,62,0.435,64,1.033,66,0.02,67,0.02,89,1.768,92,0.92,173,1.768,183,3.289,194,3.193,201,3.588,202,2.042,203,2.607,204,3.588,215,3.289,217,2.867,221,2.39,222,2.867,223,2.867,224,1.898,225,3.607,226,2.569,227,3.279,273,0.841,276,3.007,277,3.63,278,2.383,279,3.63,280,4.293,281,4.293,282,3.607,283,1.737,284,2.569,285,1.181,286,3.193,287,3.63]],["title/classes/CreatePreguntaDto.html",[0,0.098,196,2.285]],["body/classes/CreatePreguntaDto.html",[0,0.148,2,1.188,3,0.232,4,0.202,5,0.202,7,2.461,8,0.296,9,0.888,11,1.669,12,1.844,13,0.618,14,0.026,15,0.953,16,1.173,18,0.676,20,2.151,23,0.412,24,2.762,25,2.532,26,2.461,27,1.574,29,0.892,30,0.653,31,2.011,32,1.089,33,1.998,34,2.009,35,1.362,36,2.009,38,0.953,39,1.699,40,0.451,41,0.653,43,1.271,45,0.942,46,0.732,49,0.232,51,0.785,52,1.111,53,2.792,55,2.762,56,3.575,57,1.253,58,3.459,59,2.681,60,2.009,62,0.444,63,2.797,64,1.412,65,2.009,66,0.017,67,0.017,89,1.362,92,0.967,97,0.436,124,0.973,173,1.362,183,3.268,194,2.461,196,3.038,197,2.797,199,2.461,201,3.564,202,1.574,203,2.009,204,3.564,205,1.574,206,2.797,207,2.461,208,1.842,209,2.21,210,2.797,213,3.038,215,3.117,216,3.038,217,2.21,218,2.797,221,1.842,222,2.21,223,2.21,224,1.462,225,3.739,226,2.473,227,3.157,228,1.527,229,4.734,234,3.038,235,2.21,236,1.873,237,2.21,238,1.842,239,2.21,240,2.461,242,1.574,268,3.038,269,2.797,273,0.708,276,3.523,278,2.151,279,2.797,282,3.038,284,2.164,285,0.91,286,2.461,287,2.797,288,1.561,289,3.308,290,2.461,291,3.308,292,3.308,293,3.308,294,2.797,295,3.308,296,3.308,297,3.472,298,2.797,299,2.461,300,1.188,301,1.574,302,2.797,303,2.797]],["title/entities/Encuesta.html",[220,0.576,304,0.88]],["body/entities/Encuesta.html",[0,0.124,3,0.219,4,0.19,5,0.19,8,0.278,9,0.851,10,1.464,13,0.657,14,0.026,15,1.247,16,1.328,18,0.765,23,0.383,29,0.626,30,0.447,31,1.376,32,0.652,37,0.664,40,0.429,41,0.895,43,1.196,45,0.847,46,0.753,49,0.219,50,2.316,51,0.376,52,1.045,53,1.481,57,0.607,62,0.472,66,0.016,67,0.016,89,1.282,92,0.894,97,0.411,107,2.074,111,1.122,116,1.404,124,1.908,133,1.481,137,1.118,138,0.652,160,2.062,162,3.362,167,1.89,173,1.282,179,2.538,187,3.056,191,3.312,205,1.481,220,0.918,226,1.481,228,1.464,232,1.928,251,2.394,252,2.394,255,1.143,266,2.079,267,2.079,273,0.679,290,2.316,300,1.566,301,2.394,304,1.122,305,1.376,306,2.632,307,5.033,308,2.8,309,1.69,310,5.033,311,5.033,312,3.471,313,3.113,314,5.033,315,3.113,316,3.113,317,3.244,318,4.361,319,4.256,320,4.361,321,3.113,322,4.361,323,4.361,324,3.113,325,2.239,326,3.113,327,3.113,328,2.394,329,3.113,330,3.113,331,2.648,332,4.361,333,3.687,334,3.113,335,4.361,336,3.113,337,2.096,338,1.282,339,2.079,340,2.906,341,2.802,342,1.87,343,3.244,344,2.632,345,2.316,346,3.744,347,2.316,348,2.316,349,1.501,350,3.835,351,2.316,352,2.316,353,2.316,354,2.585,355,3.744,356,3.744,357,2.632,358,1.376,359,3.113,360,1.282,361,2.074,362,2.074,363,2.316,364,2.316,365,0.915,366,2.079,367,2.316,368,1.89,369,3.244,370,3.244,371,2.632,372,2.632,373,3.113]],["title/controllers/EncuestasController.html",[374,1.512,375,2.285]],["body/controllers/EncuestasController.html",[0,0.037,3,0.091,4,0.079,5,0.079,8,0.116,10,1.616,11,1.324,12,1.611,13,0.545,14,0.026,15,1.214,16,1.008,18,0.581,20,0.499,23,0.369,29,0.887,30,0.544,32,0.793,33,1.686,34,0.788,35,0.534,37,0.722,38,1.075,40,0.481,41,0.63,45,0.975,48,1.226,49,0.091,54,1.337,57,1.117,62,0.447,64,0.69,65,2.299,66,0.008,67,0.008,88,0.408,92,0.343,93,0.617,97,0.657,98,1.455,99,0.573,103,1.862,104,0.788,107,1.801,116,1.059,122,1.097,124,0.844,133,1.365,138,0.461,160,1.214,165,2.258,173,2.254,179,1.268,182,1.736,185,1.471,186,1.471,202,0.617,207,2.134,208,0.722,220,1.149,221,0.722,224,1.674,228,0.436,232,1.268,243,1.226,244,0.866,247,3.633,248,1.916,249,1.471,251,0.617,252,1.608,253,0.965,255,1.322,261,3.155,268,2.749,273,0.818,275,2.039,278,1.774,288,1.129,308,1.736,309,1.382,325,1.473,337,1.582,338,0.534,342,0.408,349,1.506,358,0.973,360,0.534,365,0.844,366,0.866,369,0.965,370,0.965,374,0.573,375,1.471,376,0.573,377,1.097,378,0.866,379,1.047,380,2.957,381,2.869,382,2.426,383,2.869,384,2.426,385,2.202,386,2.869,387,2.869,388,2.426,389,2.869,390,1.297,391,2.202,392,1.297,393,2.289,394,2.289,395,2.687,396,1.097,397,1.297,398,1.337,399,1.916,400,1.047,401,1.862,402,2.202,403,2.202,404,1.297,405,1.862,406,3.71,407,1.297,408,3.48,409,1.862,410,1.862,411,1.297,412,1.297,413,3.787,414,3.202,415,2.202,416,1.297,417,1.097,418,2.258,419,2.202,420,1.297,421,1.297,422,1.297,423,3.477,424,2.859,425,3.381,426,2.859,427,4.116,428,2.202,429,4.073,430,1.297,431,4.571,432,2.291,433,1.337,434,0.973,435,3.706,436,3.48,437,2.426,438,3.904,439,2.859,440,2.426,441,1.297,442,2.923,443,1.608,444,3.062,445,2.426,446,2.869,447,2.202,448,2.202,449,2.202,450,1.862,451,2.113,452,2.202,453,1.638,454,2.202,455,1.297,456,1.297,457,2.515,458,1.862,459,3.062,460,1.638,461,2.443,462,1.297,463,1.638,464,1.297,465,1.297,466,1.297,467,2.817,468,1.297,469,1.297,470,1.097,471,1.297,472,1.297,473,1.297,474,3.381,475,2.515,476,1.882,477,2.258,478,1.297,479,1.297,480,1.297,481,2.258,482,2.859,483,1.297,484,3.264,485,1.862,486,1.097,487,1.297,488,1.862,489,2.134,490,1.638,491,0.788,492,0.788,493,1.471,494,0.722,495,1.097,496,1.638,497,2.426,498,0.965,499,1.471,500,3.71,501,3.48,502,4.337,503,1.597,504,1.097,505,1.473,506,1.297,507,1.862,508,1.471,509,1.297,510,0.965,511,0.866,512,0.965,513,0.965,514,1.297,515,1.047,516,1.297,517,0.965,518,1.097,519,1.297,520,0.534,521,0.666,522,0.617,523,1.337,524,1.337,525,0.866,526,1.297,527,3.48,528,4.212,529,2.679,530,2.855,531,1.297,532,2.426,533,1.297,534,1.297,535,1.297,536,2.439,537,1.297,538,1.097,539,1.297,540,1.097,541,2.258,542,1.862,543,1.638,544,1.297,545,1.097,546,1.297,547,1.097,548,0.866,549,1.297,550,1.297,551,1.297,552,1.297,553,2.869,554,3.381,555,2.426,556,2.869,557,2.869,558,2.859,559,2.515,560,3.202,561,3.062,562,2.859,563,2.515,564,3.264,565,2.529,566,2.515,567,2.515,568,2.859,569,2.515,570,1.297,571,1.297,572,2.202,573,1.862,574,2.202,575,1.862,576,1.097,577,1.337,578,1.226,579,1.862,580,1.297,581,1.638,582,1.297,583,1.097,584,0.722,585,1.297,586,1.097,587,1.097,588,1.297,589,0.866,590,1.226,591,0.617,592,0.866,593,0.788,594,1.297,595,1.297,596,0.722,597,1.297,598,1.297,599,1.297,600,1.297,601,1.297,602,3.48,603,1.097,604,1.297,605,1.862,606,1.297,607,0.617,608,1.097,609,1.097,610,1.297,611,1.297,612,1.297,613,1.297,614,1.297,615,1.297,616,1.297,617,1.297,618,1.297,619,1.297,620,1.297,621,1.297,622,1.097,623,1.297]],["title/modules/EncuestasModule.html",[68,1.314,79,2.077]],["body/modules/EncuestasModule.html",[0,0.105,3,0.26,4,0.226,5,0.226,14,0.026,23,0.461,29,0.9,30,0.79,32,1.027,37,0.726,38,1.027,40,0.485,41,0.79,46,0.664,49,0.26,51,0.772,62,0.473,66,0.018,67,0.018,68,2.114,70,1.759,71,1.759,72,2.058,73,2.058,74,1.759,75,3.063,76,2.058,79,3.942,82,3.489,83,2.73,84,2.058,85,1.898,87,2.978,88,1.162,91,3.702,92,0.949,93,1.759,97,0.488,98,1.421,99,1.634,104,2.245,107,2.617,108,2.245,109,1.522,110,2.469,111,1.262,137,2.189,138,1.277,168,2.245,220,0.825,283,1.087,285,1.612,309,1.242,337,2.114,338,1.522,342,1.841,345,2.75,354,3.009,360,2.019,375,3.675,376,2.167,434,1.634,443,2.332,491,3.341,492,2.978,503,3.489,504,3.126,510,2.75,520,1.522,521,2.518,624,3.126,625,3.697,626,3.126,627,3.697,628,3.697,629,2.73,630,2.978,631,3.697,632,1.541,633,3.697,634,3.697,635,2.75,636,3.697,637,3.648,638,2.75,639,2.75,640,2.75,641,2.75,642,2.75,643,2.245,644,2.75,645,2.75]],["title/injectables/EncuestasService.html",[503,1.904,646,1.512]],["body/injectables/EncuestasService.html",[0,0.038,3,0.094,4,0.082,5,0.082,8,0.12,10,1.636,11,0.807,12,1.629,13,0.485,14,0.027,15,1.223,18,0.588,20,0.514,23,0.381,29,0.869,30,0.793,31,0.591,32,0.876,33,1.481,34,0.812,35,0.551,37,0.387,38,0.876,39,0.687,40,0.463,41,0.495,42,1.131,43,0.514,45,0.848,46,0.626,47,1.91,48,0.744,49,0.094,51,0.465,52,0.449,54,1.372,57,1.036,59,0.999,60,0.812,62,0.443,64,1.006,65,1.372,66,0.008,67,0.008,88,0.71,89,0.93,92,0.6,95,3.764,96,0.995,97,0.455,98,0.514,99,0.591,107,0.636,109,0.551,111,0.755,116,1.334,124,1.229,133,2.226,137,0.48,138,0.722,151,1.131,167,0.812,173,0.93,182,1.77,185,1.959,186,1.959,187,2.539,191,1.372,220,1.096,224,0.999,226,1.395,228,0.759,231,1.131,232,0.591,236,0.551,238,1.258,240,0.995,243,1.92,244,1.959,247,3.02,248,2.793,251,1.64,252,2.526,253,1.68,254,1.91,255,1.209,261,2.662,266,2.303,267,2.793,273,0.807,278,0.868,283,0.863,284,0.636,288,1.204,297,0.893,308,2.502,309,1.404,325,1.506,337,1.711,342,0.71,345,0.995,349,1.341,354,0.687,360,0.551,365,1.133,368,1.372,369,1.68,370,2.182,371,1.131,372,1.131,379,1.075,380,2.901,382,1.91,384,2.915,388,1.91,393,2.318,394,2.226,395,2.671,396,1.91,398,1.372,401,1.91,414,1.131,417,1.131,423,1.781,431,3.951,432,0.744,442,1.372,443,0.636,445,1.131,451,2.662,453,0.995,457,0.995,459,0.995,460,0.995,461,1.92,463,2.565,470,1.131,476,1.258,477,0.893,481,0.893,489,0.995,490,0.995,497,1.131,498,2.182,503,1.258,507,1.131,508,0.893,510,0.995,511,0.893,512,0.995,513,0.995,522,1.075,523,1.781,525,0.893,529,3.595,530,2.957,532,3.536,536,2.671,543,3.11,545,1.91,548,2.303,555,3.957,559,0.995,560,1.131,561,0.995,563,2.182,564,3.748,565,1.959,566,1.68,567,1.68,569,1.68,573,1.91,575,1.91,576,3.764,577,2.703,578,2.886,579,1.131,584,0.744,589,1.959,591,1.64,592,0.893,593,1.372,596,0.744,602,3.764,603,1.131,605,2.915,607,1.075,608,1.91,632,0.922,646,0.999,647,0.812,648,1.131,649,2.933,650,2.259,651,2.259,652,2.933,653,2.259,654,1.337,655,2.703,656,2.48,657,1.337,658,1.91,659,1.337,660,1.337,661,1.337,662,2.259,663,1.337,664,2.259,665,1.337,666,4.679,667,1.337,668,1.337,669,1.337,670,1.337,671,2.259,672,1.337,673,1.131,674,0.893,675,0.893,676,1.91,677,2.259,678,1.337,679,2.933,680,0.893,681,1.337,682,1.91,683,2.48,684,1.337,685,1.131,686,1.131,687,1.131,688,1.131,689,2.182,690,1.337,691,2.933,692,1.337,693,1.781,694,2.48,695,1.337,696,1.131,697,1.337,698,1.131,699,1.68,700,2.259,701,1.68,702,1.337,703,1.258,704,1.337,705,1.337,706,1.337,707,2.259,708,1.337,709,1.337,710,1.509,711,1.337,712,2.259,713,2.259,714,2.259,715,1.337,716,1.337,717,1.337,718,1.337,719,1.337,720,1.337,721,1.337,722,1.337,723,1.337,724,1.337,725,1.337,726,1.337,727,1.337,728,1.337,729,1.337,730,1.337,731,1.337,732,1.337,733,1.337,734,1.337,735,1.131,736,1.337,737,1.337,738,1.337,739,1.337,740,4.491,741,1.337,742,1.337,743,2.933,744,1.337,745,1.337,746,1.337,747,2.259,748,2.259,749,2.259,750,1.337,751,1.337,752,2.259,753,1.337,754,1.337,755,1.337,756,1.131,757,1.337,758,1.337,759,1.337,760,1.337,761,1.337,762,2.259,763,1.337,764,1.337,765,1.337,766,2.259,767,1.337,768,1.337,769,2.259,770,1.337,771,2.259,772,1.337,773,1.337,774,1.337,775,2.259,776,1.337,777,1.337,778,1.337,779,2.259,780,1.68,781,2.182,782,1.337,783,2.48,784,2.259,785,2.48,786,2.48,787,1.91,788,1.131,789,2.915,790,1.91,791,1.91,792,1.91,793,1.131,794,1.131,795,2.48,796,1.68,797,1.91,798,1.337,799,1.337,800,1.337,801,1.131,802,1.337,803,2.259,804,2.48,805,2.933,806,1.337,807,1.337,808,1.337,809,1.337,810,1.337,811,1.337,812,1.337,813,1.337,814,3.448,815,3.448,816,2.259,817,2.259,818,2.259,819,2.259,820,1.337,821,1.337,822,0.893,823,1.337,824,1.337,825,1.337,826,1.131,827,1.509,828,1.131,829,1.337,830,0.812,831,1.337,832,0.995,833,1.131,834,1.91,835,1.131,836,1.91,837,1.337,838,1.337,839,1.337,840,2.259,841,2.259,842,1.337,843,1.337,844,1.337,845,1.131,846,1.337,847,1.337,848,1.337,849,1.337,850,1.131,851,1.337,852,1.337,853,1.337,854,1.337,855,1.337,856,1.337,857,1.337,858,1.337,859,3.448,860,2.259,861,2.259,862,1.337,863,1.337,864,1.337,865,1.337,866,2.259,867,1.337,868,1.337,869,1.337,870,2.259,871,1.337,872,1.91,873,1.337,874,1.337,875,1.337,876,1.337,877,1.337,878,1.337,879,1.337,880,1.131,881,1.337,882,1.337,883,1.337,884,1.337,885,1.337,886,1.337,887,1.337]],["title/classes/ObtenerEncuestaDto.html",[0,0.098,418,2.285]],["body/classes/ObtenerEncuestaDto.html",[0,0.15,2,1.48,3,0.289,4,0.252,5,0.252,8,0.369,9,1.027,12,1.983,13,0.524,14,0.026,15,1.103,16,1.103,18,0.635,23,0.407,26,3.066,27,1.961,29,0.906,30,0.592,31,2.326,32,0.864,33,2.023,36,2.503,38,1.103,39,2.117,40,0.407,41,0.592,43,1.584,45,0.694,49,0.289,51,0.737,53,2.503,56,3.401,57,1.232,58,3.401,59,2.326,62,0.407,64,1.266,66,0.02,67,0.02,89,1.697,92,0.951,173,1.697,184,3.066,201,3.521,202,1.961,203,2.503,204,3.521,215,3.228,217,2.753,220,0.886,221,2.295,222,2.753,223,2.753,225,3.515,226,2.503,227,3.196,228,1.384,247,3.228,261,2.117,294,3.486,297,3.873,298,3.486,300,1.48,301,1.961,302,3.486,418,3.515,423,2.503,431,4.544,432,2.295,433,2.503,434,1.822,511,4.08,512,3.066,513,3.066,538,3.486,607,1.961,888,4.903,889,4.122,890,4.122,891,4.122,892,4.122,893,4.122,894,4.122,895,3.486,896,4.122,897,4.122]],["title/entities/Opcion.html",[304,0.88,632,1.075]],["body/entities/Opcion.html",[0,0.143,3,0.267,4,0.233,5,0.233,8,0.341,9,0.976,11,1.631,13,0.59,14,0.026,15,1.048,16,1.242,18,0.716,23,0.416,29,0.547,31,1.683,32,0.798,37,0.66,40,0.432,43,1.463,45,0.841,46,0.805,49,0.267,51,0.46,52,1.679,53,1.811,57,0.743,62,0.482,66,0.019,67,0.019,89,1.568,92,0.923,97,0.502,111,1.287,124,1.743,137,1.367,138,0.798,160,1.367,162,3.339,179,2.721,205,1.811,228,1.875,232,2.21,255,1.242,273,0.923,278,2.278,283,1.12,288,1.287,300,1.367,301,2.378,304,1.287,305,1.683,312,2.784,317,3.719,328,2.655,337,2.145,338,1.568,339,2.543,340,2.655,341,2.12,342,1.862,343,2.833,344,3.22,346,4.152,347,2.833,348,2.833,349,1.376,350,3.959,351,3.719,352,2.833,353,2.833,354,2.567,355,3.719,356,3.719,361,1.811,362,1.811,363,2.833,364,2.833,365,1.12,366,2.543,367,2.833,368,2.312,590,2.784,632,1.571,898,3.22,899,3.808,900,3.808,901,2.312,902,3.808,903,3.808,904,3.808,905,2.784,906,2.567,907,1.811,908,2.312,909,2.12,910,3.22,911,3.22,912,1.811]],["title/classes/OpcionConRespuestasDto.html",[0,0.098,913,2.077]],["body/classes/OpcionConRespuestasDto.html",[0,0.171,2,1.585,3,0.31,4,0.27,5,0.27,8,0.395,9,1.072,11,1.723,12,1.387,13,0.623,14,0.026,15,1.396,18,0.756,20,2.112,23,0.31,30,0.634,35,1.818,37,0.582,40,0.386,41,0.634,46,0.533,49,0.42,62,0.386,66,0.02,67,0.02,97,0.582,116,1.136,160,1.585,179,1.951,220,0.925,236,1.818,251,2.1,252,2.1,255,1.35,273,1.057,278,2.407,285,1.512,288,1.414,308,2.267,309,1.482,325,2.267,400,2.1,515,2.1,522,2.1,913,3.634,914,4.303,915,2.949,916,3.997,917,4.415,918,4.415,919,4.415,920,4.415,921,2.681,922,3.06,923,2.949,924,3.284,925,3.284,926,3.284,927,3.284,928,2.949,929,3.284,930,3.284]],["title/controllers/OpcionesController.html",[374,1.512,931,2.285]],["body/controllers/OpcionesController.html",[0,0.101,3,0.248,4,0.216,5,0.216,8,0.316,10,1.599,13,0.474,14,0.026,16,0.998,18,0.575,23,0.378,29,0.862,30,0.684,40,0.475,45,1.107,46,0.776,48,2.651,49,0.248,51,0.575,57,0.69,62,0.473,64,1.385,66,0.018,67,0.018,88,1.112,97,0.759,98,1.36,99,1.564,138,0.998,143,2.632,224,2.545,242,2.265,255,1.365,273,0.963,275,1.691,276,3.626,283,1.967,288,1.546,299,2.632,349,1.31,358,2.105,365,1.4,374,1.564,376,1.564,378,2.363,379,2.265,380,2.943,393,2.265,394,2.738,395,2.738,398,2.891,399,3.18,451,2.445,461,2.651,493,3.18,494,3.205,496,4.003,499,3.595,520,1.961,524,2.149,536,2.265,541,2.363,584,3.205,629,1.97,630,2.149,827,3.845,931,3.18,932,2.992,933,3.538,934,4.762,935,3.845,936,3.496,937,4.551,938,4.551,939,2.992,940,3.538,941,4.551,942,4.026,943,2.992,944,4.026,945,3.538,946,3.18,947,2.992,948,2.996,949,2.992,950,2.632,951,3.538,952,2.632,953,3.538,954,3.538,955,3.538]],["title/modules/OpcionesModule.html",[68,1.314,80,2.077]],["body/modules/OpcionesModule.html",[0,0.115,3,0.282,4,0.246,5,0.246,14,0.026,23,0.45,29,0.869,30,0.966,37,0.756,38,0.843,40,0.473,46,0.756,49,0.282,51,0.625,57,1.273,62,0.402,66,0.019,67,0.019,68,2.202,70,1.913,71,1.913,72,2.239,73,2.239,74,1.913,75,3.191,76,2.239,80,3.894,83,2.884,84,2.239,85,2.065,87,2.442,88,1.264,91,3.675,92,0.626,97,0.826,98,2.326,107,2.464,108,2.442,109,1.656,115,4.846,116,1.333,137,1.86,138,1.085,168,3.146,242,2.464,275,1.264,288,1.701,360,1.656,376,2.29,443,2.464,461,2.239,520,2.36,521,2.065,609,3.4,629,2.239,630,2.442,632,1.902,674,2.686,931,3.828,948,3.57,949,3.4,956,3.4,957,3.4,958,4.021,959,5.18,960,4.38,961,5.731,962,2.065,963,2.239,964,4.021,965,4.021,966,4.021,967,3.4,968,4.021,969,2.991]],["title/injectables/OpcionesService.html",[646,1.512,948,1.904]],["body/injectables/OpcionesService.html",[0,0.088,3,0.217,4,0.189,5,0.189,8,0.276,10,1.683,13,0.499,14,0.026,18,0.605,23,0.417,29,0.623,37,0.572,38,0.909,40,0.475,45,1.047,46,0.796,48,3.026,49,0.217,51,0.524,62,0.485,64,1.377,66,0.016,67,0.016,88,0.971,92,0.481,97,0.755,109,1.272,111,0.795,133,2.063,137,1.952,138,1.244,143,3.226,224,1.917,255,1.37,273,0.924,275,1.363,276,3.521,283,2.004,299,2.298,349,1.379,365,1.598,379,2.063,380,2.824,393,2.384,394,2.585,395,2.585,398,3.044,399,3.348,451,2.227,461,3.026,476,2.791,494,2.791,522,2.063,523,2.634,529,3.026,530,3.026,536,2.063,548,2.063,577,2.634,578,2.415,584,3.187,632,1.916,646,1.917,647,1.876,655,3.702,674,2.897,675,2.063,680,2.063,710,2.063,780,3.226,781,3.226,822,2.897,827,4.072,830,2.634,935,2.897,936,2.634,937,4.238,938,3.667,939,2.612,941,4.596,942,3.667,943,3.667,946,3.348,948,2.415,950,2.298,960,3.667,962,1.586,963,1.72,970,2.612,971,3.089,972,4.238,973,3.089,974,3.667,975,3.089,976,3.044,977,3.089,978,2.298,979,2.298,980,3.089,981,3.226,982,2.612,983,3.089,984,4.337,985,3.089,986,3.089,987,3.089,988,3.089,989,2.612]],["title/entities/Pregunta.html",[46,0.413,304,0.88]],["body/entities/Pregunta.html",[0,0.127,3,0.226,4,0.196,5,0.196,8,0.287,9,0.87,11,1.521,12,1.937,13,0.613,14,0.026,15,0.934,16,1.259,18,0.726,20,2.232,23,0.408,29,0.794,31,1.42,32,0.934,34,1.951,35,1.323,36,3.358,37,0.675,38,0.673,39,1.65,40,0.458,41,0.64,43,1.235,45,0.75,46,0.701,49,0.226,51,0.388,52,1.497,53,1.528,57,0.87,58,1.789,62,0.483,64,0.773,66,0.017,67,0.017,89,1.323,92,0.904,97,0.424,111,1.147,116,1.147,124,1.767,137,1.601,138,0.934,160,1.601,162,3.419,179,2.657,205,1.528,220,1.087,228,1.857,232,1.971,241,2.39,242,1.528,255,1.159,273,0.861,278,2.125,288,1.423,290,3.316,297,2.978,300,1.601,301,2.435,303,2.717,304,1.147,305,1.42,312,3.078,317,3.316,319,3.77,328,2.435,331,1.951,333,3.77,337,2.232,338,1.323,339,2.146,340,2.63,341,2.482,342,1.889,343,3.316,346,3.808,347,2.39,348,2.39,349,1.521,350,4.015,351,3.316,352,2.39,353,2.39,354,2.289,355,3.316,356,3.808,357,2.717,361,2.121,362,2.121,363,2.39,364,2.39,365,1.311,366,2.146,367,2.39,368,1.951,589,2.146,632,1.975,901,1.951,905,2.482,906,2.289,909,1.789,910,2.717,911,2.717,912,1.528,990,2.717,991,3.213,992,3.213,993,3.213,994,3.213,995,3.77,996,3.213,997,3.213,998,2.39,999,3.213,1000,3.213,1001,3.213,1002,3.213,1003,3.213,1004,3.213,1005,3.213,1006,2.978]],["title/entities/Pregunta-1.html",[46,0.346,304,0.737,596,1.594]],["body/entities/Pregunta-1.html",[0,0.096,3,0.237,4,0.206,5,0.206,8,0.302,9,0.9,11,1.627,12,1.857,13,0.622,14,0.026,15,0.966,16,1.279,18,0.737,20,2.272,23,0.397,29,0.662,35,1.39,36,3.429,37,0.745,40,0.48,41,0.662,45,0.95,46,0.819,49,0.237,50,3.431,51,0.557,52,1.549,62,0.48,66,0.017,67,0.017,92,0.525,111,0.869,116,0.869,133,2.194,137,1.212,138,0.707,160,1.212,173,1.899,220,1.147,241,3.431,242,2.194,255,1.101,273,0.879,275,1.061,278,2.019,284,2.194,285,1.269,286,3.431,288,1.521,300,2.027,304,1.187,305,1.492,328,2.499,331,2.05,340,2.903,341,2.568,342,1.917,349,1.446,350,2.255,361,2.686,362,2.686,433,2.801,434,2.039,453,3.431,591,2.194,607,2.194,632,1.998,693,2.801,906,2.368,912,2.194,923,3.771,962,1.734,995,3.9,998,2.511,1007,2.855,1008,2.855,1009,3.9,1010,3.376,1011,3.376,1012,2.801,1013,3.376,1014,3.376,1015,3.9,1016,3.376,1017,4.612,1018,4.612,1019,3.376,1020,4.612,1021,3.081,1022,3.081,1023,3.376,1024,2.255]],["title/classes/PreguntaConRespuestasDto.html",[0,0.098,922,1.904]],["body/classes/PreguntaConRespuestasDto.html",[0,0.168,2,1.534,3,0.3,4,0.261,5,0.261,8,0.382,9,1.051,11,1.703,12,1.853,13,0.648,14,0.026,15,1.402,18,0.798,20,2.266,23,0.3,30,0.613,35,1.76,37,0.564,40,0.378,41,0.613,46,0.516,49,0.414,62,0.378,66,0.02,67,0.02,97,0.564,116,1.1,160,1.534,179,1.889,220,0.906,236,1.76,251,2.033,252,2.033,255,1.337,273,1.041,278,2.379,285,1.482,288,1.593,308,2.194,309,1.435,325,2.194,400,2.033,515,2.033,522,2.804,913,3.58,914,4.468,915,2.854,916,2.854,921,2.595,922,3.283,923,2.854,924,4.386,925,3.179,926,3.179,927,3.179,928,2.854,929,3.179,930,3.179,1025,5.385,1026,4.273,1027,4.273,1028,4.273,1029,4.273,1030,4.273]],["title/controllers/PreguntasController.html",[374,1.512,1031,2.285]],["body/controllers/PreguntasController.html",[0,0.106,1,3.706,3,0.26,4,0.226,5,0.226,8,0.332,10,1.65,13,0.489,14,0.026,16,1.029,18,0.593,23,0.387,29,0.842,30,0.532,32,1.279,33,1.425,37,0.648,38,0.777,40,0.449,44,3.654,45,0.927,46,0.708,49,0.26,51,0.448,56,2.064,57,1.191,62,0.412,64,1.182,66,0.018,67,0.018,88,1.165,92,0.765,93,1.763,97,0.827,98,2.254,99,1.639,116,1.51,138,0.777,179,2.435,219,2.758,232,2.171,238,2.064,255,1.361,273,0.976,284,2.336,288,1.264,337,2.117,338,1.526,349,1.352,360,1.526,365,1.09,374,1.639,376,1.639,378,2.476,379,2.336,380,2.983,393,2.336,394,2.336,395,2.79,400,2.336,442,2.983,444,3.654,461,2.064,491,2.251,492,2.251,493,3.281,494,2.064,495,4.154,499,3.679,520,1.526,521,1.904,524,2.251,525,2.476,536,2.336,541,3.281,542,4.154,543,3.654,547,4.154,689,3.654,880,4.154,935,2.476,944,4.154,946,2.476,947,4.154,952,2.758,1031,3.281,1032,3.135,1033,4.96,1034,5.509,1035,3.707,1036,5.865,1037,4.912,1038,3.707,1039,3.707,1040,3.707,1041,3.067,1042,3.707,1043,3.135,1044,3.707,1045,5.509,1046,3.707,1047,3.707,1048,3.707,1049,3.707,1050,3.135,1051,3.707,1052,3.135,1053,3.707]],["title/modules/PreguntasModule.html",[68,1.314,81,2.077]],["body/modules/PreguntasModule.html",[0,0.114,3,0.281,4,0.244,5,0.244,14,0.026,23,0.45,29,0.919,30,0.82,32,0.838,37,0.754,38,1.081,40,0.485,46,0.623,49,0.281,51,0.755,62,0.464,66,0.019,67,0.019,68,2.196,70,1.902,71,1.902,72,2.226,73,2.226,74,1.902,75,3.182,76,2.226,81,3.888,83,2.873,84,2.226,85,2.053,87,2.428,88,1.256,91,3.667,92,0.89,93,1.902,97,0.527,98,1.536,99,1.767,104,2.428,108,2.428,109,1.646,110,2.671,111,1.328,116,1.471,137,2.052,138,1.198,168,2.428,283,1.176,285,1.42,337,1.983,338,1.646,342,1.622,354,2.65,360,2.125,376,2.281,434,1.767,443,2.455,491,3.471,492,3.134,520,1.646,521,2.65,629,2.873,630,3.134,632,1.622,635,2.974,637,3.839,638,2.974,639,2.974,640,2.974,641,2.974,642,2.974,643,2.428,644,2.974,645,2.974,962,2.053,963,2.226,1031,3.817,1041,3.565,1054,3.381,1055,3.381,1056,3.998,1057,3.998,1058,3.998,1059,3.998]],["title/injectables/PreguntasService.html",[646,1.512,1041,1.904]],["body/injectables/PreguntasService.html",[0,0.094,1,3.398,3,0.232,4,0.202,5,0.202,8,0.296,10,1.745,13,0.517,14,0.027,18,0.627,23,0.426,29,0.803,30,0.474,32,1.172,33,1.27,37,0.436,38,0.692,40,0.451,43,1.27,44,3.381,45,0.941,46,0.821,49,0.232,51,0.399,52,1.11,62,0.456,64,1.25,66,0.017,67,0.017,88,1.038,89,1.872,92,0.514,97,0.436,98,1.27,109,1.361,111,1.337,133,2.162,137,1.186,138,0.692,219,2.458,228,1.11,255,1.172,273,0.944,288,1.44,301,1.572,337,2.15,342,1.905,349,1.429,360,1.361,365,0.972,379,2.162,380,2.884,393,2.471,394,2.162,395,2.662,400,2.162,451,2.334,475,3.381,476,2.53,522,2.162,523,2.76,524,2.76,525,3.036,529,2.53,530,3.266,536,2.162,548,3.036,565,2.207,577,2.76,578,2.53,584,2.53,592,2.207,593,2.007,632,1.632,646,2.009,647,2.007,655,3.772,673,2.794,674,2.207,675,2.207,676,4.393,680,2.207,685,2.794,686,2.794,689,3.381,710,2.207,780,3.381,781,3.381,796,2.458,822,3.036,827,3.737,830,2.76,935,2.207,946,2.207,962,1.697,963,1.84,978,2.458,979,2.458,981,3.381,982,3.843,989,2.794,1033,4.393,1041,2.53,1043,2.794,1050,2.794,1052,2.794,1060,2.794,1061,5.195,1062,3.304,1063,5.195,1064,3.304,1065,4.545,1066,3.304,1067,5.596,1068,3.304,1069,6.211,1070,3.304,1071,3.304,1072,3.304,1073,3.304,1074,3.304,1075,3.304,1076,4.545,1077,3.304,1078,3.304,1079,3.304,1080,3.304]],["title/classes/RegistrarRespuestasDto.html",[0,0.098,1081,1.904]],["body/classes/RegistrarRespuestasDto.html",[0,0.166,2,1.312,3,0.257,4,0.223,5,0.223,8,0.327,9,0.949,11,1.339,12,1.832,13,0.621,14,0.026,15,1.222,16,0.766,18,0.441,23,0.342,24,3.541,25,3.045,27,1.738,29,0.915,30,0.698,32,0.766,37,0.722,38,0.766,39,1.876,40,0.469,41,0.785,45,0.819,46,0.66,49,0.342,51,0.733,55,2.954,57,0.949,59,1.615,62,0.41,64,1.502,66,0.018,67,0.018,92,0.569,97,0.482,116,1.641,124,1.431,181,2.44,205,1.738,208,2.034,209,2.44,213,3.653,215,3.381,216,3.653,220,0.615,228,1.227,234,3.653,235,3.249,236,2.252,238,2.034,239,3.249,273,0.851,282,3.895,283,1.608,284,2.314,285,1.005,288,1.501,300,1.312,301,1.738,309,1.958,365,1.074,434,2.151,467,2.718,520,1.505,590,2.709,591,2.314,693,2.219,699,3.619,703,2.709,830,2.219,832,3.619,969,2.718,1021,3.249,1022,3.249,1081,2.709,1082,3.249,1083,2.718,1084,4.258,1085,3.654,1086,3.654,1087,3.654,1088,3.09,1089,4.114,1090,3.09,1091,3.09,1092,2.718,1093,3.09,1094,3.09,1095,2.718,1096,3.09,1097,3.09,1098,3.09,1099,3.09,1100,4.114,1101,4.625,1102,3.09,1103,3.09,1104,3.09,1105,3.09,1106,3.09,1107,3.09,1108,4.114,1109,3.09,1110,3.09,1111,3.09]],["title/entities/Respuesta.html",[41,0.491,304,0.88]],["body/entities/Respuesta.html",[0,0.098,3,0.242,4,0.211,5,0.211,8,0.309,9,0.914,13,0.593,14,0.026,16,1.248,18,0.719,23,0.4,30,0.818,37,0.81,38,0.981,40,0.468,41,0.956,45,1.075,49,0.242,51,0.688,52,1.572,62,0.46,66,0.017,67,0.017,97,0.618,111,0.888,138,0.981,140,2.843,220,1.14,242,2.71,255,1.248,273,0.887,275,1.084,283,1.806,285,1.288,300,2.206,304,0.888,305,1.525,309,2.237,328,2.527,331,2.843,340,1.641,341,2.958,342,1.79,349,0.95,358,2.07,361,2.922,362,2.922,433,3.73,607,2.227,701,4.239,703,3.42,901,2.096,905,2.607,906,2.404,907,2.71,909,1.921,912,2.227,976,2.843,1006,3.979,1012,2.843,1024,2.305,1112,2.918,1113,3.127,1114,3.959,1115,3.953,1116,4.493,1117,3.451,1118,3.451,1119,3.127,1120,3.451,1121,2.926,1122,4.682,1123,4.682,1124,3.451,1125,4.818,1126,4.682,1127,4.682,1128,3.451,1129,4.682,1130,2.305,1131,2.918]],["title/entities/Respuesta-1.html",[41,0.411,304,0.737,596,1.594]],["body/entities/Respuesta-1.html",[0,0.096,3,0.238,4,0.207,5,0.207,8,0.303,9,0.902,13,0.589,14,0.026,16,1.24,18,0.714,23,0.397,30,0.811,37,0.806,38,0.968,40,0.466,41,0.965,45,1.071,49,0.238,51,0.682,52,1.551,62,0.458,66,0.017,67,0.017,97,0.61,111,0.871,124,1.359,138,0.968,140,2.806,220,1.147,242,2.688,255,1.24,273,0.88,275,1.063,283,1.796,285,1.271,300,2.193,304,0.871,305,1.496,309,2.23,312,2.572,328,2.502,331,2.806,340,1.61,341,2.929,342,1.776,349,0.931,358,2.042,361,2.905,362,2.905,433,3.708,607,2.198,701,4.204,703,3.4,804,2.862,905,2.572,906,2.372,907,2.905,909,1.884,912,2.198,976,2.806,1006,3.952,1008,2.862,1012,2.806,1024,2.26,1113,3.086,1114,3.907,1115,3.913,1116,4.448,1119,3.086,1121,3.136,1125,4.779,1130,2.26,1131,2.862,1132,2.862,1133,3.384,1134,3.384,1135,3.384,1136,3.384,1137,4.62,1138,3.384,1139,4.62,1140,3.384]],["title/entities/RespuestaAbierta.html",[304,0.88,1121,1.756]],["body/entities/RespuestaAbierta.html",[0,0.094,3,0.232,4,0.201,5,0.201,8,0.295,9,0.885,11,1.708,13,0.618,14,0.026,15,0.951,16,1.269,18,0.731,23,0.364,37,0.737,38,0.951,40,0.464,41,0.997,45,1.019,46,0.813,49,0.232,51,0.763,52,2.034,57,0.885,62,0.482,66,0.017,67,0.017,97,0.435,111,1.168,124,1.781,138,0.951,140,3.394,154,2.755,220,0.763,228,1.524,255,1.301,273,0.943,275,1.036,285,1.249,300,2.007,304,0.848,305,1.457,312,3.373,328,2.468,337,1.267,338,1.357,339,2.202,340,2.158,342,1.904,349,1.249,358,2.471,361,2.659,362,2.659,365,1.334,590,3.264,591,3.089,607,2.158,901,2.755,905,2.889,906,2.664,908,3.769,912,2.659,963,1.835,976,2.755,998,2.452,1012,2.755,1015,3.837,1095,3.375,1113,3.734,1119,3.734,1121,2.33,1141,2.787,1142,4.361,1143,3.297,1144,3.297,1145,3.297,1146,4.538,1147,3.297,1148,3.297,1149,4.538,1150,3.297,1151,4.538,1152,2.787,1153,3.297]],["title/entities/RespuestaOpcion.html",[304,0.88,907,1.627]],["body/entities/RespuestaOpcion.html",[0,0.099,3,0.243,4,0.211,5,0.211,8,0.309,9,0.914,13,0.593,14,0.026,16,1.249,18,0.719,23,0.373,37,0.811,40,0.474,41,0.992,45,1.102,46,0.566,49,0.243,51,0.688,52,1.574,57,0.914,62,0.478,64,1.127,66,0.017,67,0.017,92,0.729,111,0.889,124,1.676,140,3.462,154,3.462,220,0.788,255,1.317,273,0.956,275,1.086,283,1.959,285,1.289,300,2.047,304,0.889,305,1.527,312,3.174,328,2.529,340,1.644,342,1.931,349,1.289,358,2.52,361,2.712,362,2.712,365,1.676,607,2.229,632,2.036,901,2.845,905,2.96,906,2.73,907,2.229,908,3.731,912,2.229,936,2.845,962,1.774,976,2.845,1012,2.845,1113,4.104,1119,3.808,1142,4.433,1152,2.922,1154,2.922,1155,5.196,1156,4.686,1157,5.039,1158,3.455,1159,3.455,1160,3.455,1161,3.455,1162,3.455,1163,3.455]],["title/classes/RespuestaPreguntaDto.html",[0,0.098,1084,2.285]],["body/classes/RespuestaPreguntaDto.html",[0,0.163,2,1.241,3,0.243,4,0.211,5,0.211,8,0.309,9,0.914,10,1.914,11,1.569,12,1.931,13,0.645,14,0.026,15,1.249,16,1.195,17,2.922,18,0.688,23,0.329,24,3.462,25,2.96,27,1.644,29,0.902,30,0.673,32,0.724,37,0.701,38,0.724,39,1.774,40,0.464,41,0.763,45,0.788,46,0.642,49,0.329,51,0.719,55,2.845,57,0.914,59,1.527,62,0.4,64,1.478,66,0.017,67,0.017,92,0.538,97,0.456,116,1.617,124,1.378,181,2.308,199,2.57,205,1.644,208,1.924,209,2.308,213,3.551,215,3.318,216,3.551,220,0.581,228,1.16,234,3.551,235,3.551,236,2.189,238,1.924,239,3.13,273,0.928,282,3.808,283,1.563,284,2.229,285,0.951,288,1.581,300,1.241,301,1.644,309,1.574,365,1.016,434,2.071,467,2.57,520,1.423,590,3.174,591,2.529,693,2.845,699,3.486,703,2.609,830,2.098,832,3.486,969,2.57,1021,3.551,1022,3.551,1081,1.924,1082,3.98,1083,2.57,1084,4.198,1088,2.922,1089,3.962,1090,2.922,1091,2.922,1092,2.57,1093,2.922,1094,2.922,1095,2.57,1096,2.922,1097,2.922,1098,2.922,1099,2.922,1100,3.962,1101,4.496,1102,2.922,1103,2.922,1104,2.922,1105,2.922,1106,2.922,1107,2.922,1108,3.962,1109,2.922,1110,2.922,1111,2.922,1164,3.455,1165,3.455,1166,3.455,1167,3.455,1168,3.455,1169,3.455,1170,3.455]],["title/controllers/RespuestasController.html",[374,1.512,1171,2.285]],["body/controllers/RespuestasController.html",[0,0.055,3,0.137,4,0.119,5,0.119,8,0.174,10,1.277,13,0.539,14,0.026,15,1.169,16,0.797,18,0.459,23,0.351,29,0.929,30,0.836,32,0.797,33,1.461,37,0.502,38,1.096,40,0.485,41,0.441,45,1.077,46,0.371,49,0.137,51,0.673,57,1.212,62,0.461,64,1.258,66,0.011,67,0.011,88,0.611,92,0.672,93,0.925,97,0.659,98,1.179,99,0.86,107,0.925,116,0.79,124,1.382,138,0.985,154,3.387,160,0.698,165,3.493,169,2.828,173,2.232,181,1.299,182,1.576,202,0.925,203,1.181,204,1.864,220,1.158,221,1.709,224,1.357,226,0.925,228,1.031,232,1.681,236,1.264,237,2.05,243,1.709,255,1.302,258,2.828,260,3.496,261,2.413,268,3.815,273,0.777,275,2.106,283,0.903,284,1.46,285,1.046,288,0.79,309,2.202,338,0.801,349,1.491,358,1.681,360,0.801,365,0.903,368,1.864,374,0.86,376,0.86,378,1.299,379,1.46,380,2.653,393,1.809,394,1.809,395,2.376,400,1.809,405,2.595,406,4.422,408,2.595,409,2.595,410,2.595,423,1.864,429,4.149,432,2.781,435,4.249,436,3.651,437,2.595,438,3.651,439,3.215,440,1.644,442,3.033,443,2.376,444,3.212,450,3.215,451,0.999,457,3.212,458,3.651,459,3.212,475,3.716,476,2.781,477,3.139,481,3.336,482,3.651,484,3.89,485,2.595,486,1.644,488,2.595,489,2.283,490,2.283,493,2.05,494,1.083,496,1.447,499,2.54,500,3.651,501,4.224,502,4.583,505,1.952,508,1.299,515,1.46,517,1.447,520,1.264,521,1.576,524,1.181,527,3.215,528,4.422,529,1.709,530,2.117,536,1.809,541,2.05,581,2.283,583,3.215,584,1.083,596,2.404,622,1.644,629,1.083,643,2.622,710,2.05,833,1.644,936,1.864,950,1.447,952,1.447,967,1.644,1081,3.18,1171,2.05,1172,1.644,1173,3.215,1174,3.215,1175,3.802,1176,1.644,1177,5.924,1178,1.945,1179,1.945,1180,3.651,1181,3.069,1182,5.34,1183,1.945,1184,1.945,1185,3.069,1186,3.069,1187,1.945,1188,1.945,1189,3.069,1190,3.069,1191,1.945,1192,1.945,1193,1.945,1194,1.945,1195,1.945,1196,1.945,1197,1.945,1198,1.945,1199,4.318,1200,3.069,1201,1.945,1202,3.069,1203,3.069,1204,3.069,1205,3.069,1206,1.945,1207,1.644,1208,1.945,1209,1.945,1210,1.945,1211,1.945,1212,1.945,1213,1.945,1214,1.945,1215,1.945,1216,1.644,1217,1.945,1218,1.945,1219,1.644,1220,1.945,1221,1.945,1222,1.644,1223,1.945,1224,1.945,1225,1.644,1226,1.945,1227,1.945,1228,1.945,1229,3.069,1230,1.945,1231,1.945,1232,1.945,1233,1.945,1234,1.945,1235,1.945,1236,1.945,1237,1.945,1238,1.945,1239,1.945,1240,3.069,1241,1.945,1242,1.945,1243,1.945,1244,1.945,1245,1.945,1246,1.945]],["title/modules/RespuestasModule.html",[68,1.314,82,1.904]],["body/modules/RespuestasModule.html",[0,0.102,3,0.25,4,0.217,5,0.217,14,0.026,23,0.463,29,0.89,30,0.775,32,0.746,37,0.712,38,1.002,40,0.485,41,0.89,46,0.652,49,0.25,51,0.787,62,0.48,66,0.018,67,0.018,68,2.075,70,1.694,71,1.694,72,1.982,73,1.982,74,1.694,75,3.006,76,3.006,82,3.526,83,2.662,84,1.982,85,1.828,87,2.162,88,1.119,91,3.505,92,0.986,93,1.694,97,0.47,98,1.368,99,1.574,104,2.162,107,1.694,108,2.162,109,1.466,110,2.378,111,1.231,137,2.274,138,1.327,168,2.162,220,0.908,283,1.047,285,1.706,337,1.838,338,1.466,342,1.948,354,3.183,360,1.969,376,2.114,434,1.574,443,2.275,491,3.279,492,2.904,505,3.438,520,1.466,521,2.455,591,1.694,629,2.662,630,2.904,632,1.503,635,2.649,637,3.557,638,2.649,639,2.649,640,2.649,641,2.649,642,2.649,643,2.162,644,2.649,645,2.649,907,2.275,909,1.982,962,1.828,963,1.982,1024,2.378,1121,2.455,1130,2.378,1171,3.606,1216,3.011,1247,3.011,1248,3.011,1249,3.011,1250,3.561,1251,3.561,1252,3.561,1253,4.782,1254,3.561,1255,3.561]],["title/injectables/RespuestasService.html",[505,1.756,646,1.512]],["body/injectables/RespuestasService.html",[0,0.044,3,0.109,4,0.094,5,0.094,8,0.138,10,1.269,11,1.238,12,1.023,13,0.376,14,0.027,15,1.113,18,0.456,20,0.594,23,0.404,29,0.881,30,0.813,32,0.535,33,1.829,35,0.637,37,0.701,38,0.792,40,0.466,41,0.542,45,0.953,46,0.721,49,0.109,51,0.393,52,1.269,54,1.977,55,1.549,57,0.929,62,0.465,64,0.909,66,0.009,67,0.009,88,0.486,92,0.397,97,0.498,109,0.637,111,0.398,116,1.367,124,0.75,133,2.452,138,0.324,154,2.294,160,0.555,165,2.524,169,1.898,173,2.187,182,0.794,183,0.861,187,2.294,191,1.549,208,1.813,220,1.121,224,0.684,226,0.736,227,0.939,232,1.439,233,1.308,236,0.637,237,3.179,243,1.421,247,1.813,251,1.797,252,1.214,255,1.305,258,2.422,260,1.898,261,1.672,266,1.704,267,2.524,273,0.741,275,1.023,278,1.452,283,1.229,288,1.076,308,2.147,309,1.96,325,0.794,349,1.04,358,0.684,365,0.455,379,1.214,380,2.452,393,1.797,394,1.988,395,2.14,398,0.939,399,1.033,400,1.549,423,0.939,424,2.158,426,1.308,429,3.7,432,2.505,434,0.684,442,2.539,443,0.736,451,1.672,460,1.151,463,1.898,476,2.505,477,3.005,481,2.175,484,1.151,494,2.505,498,4.05,505,1.31,508,1.033,515,2.14,517,1.898,522,1.214,523,2.732,529,3.547,530,3.153,536,0.736,540,2.158,558,2.754,559,1.151,561,3.54,562,2.158,563,1.898,564,2.811,565,1.704,566,1.151,567,2.422,568,2.158,569,1.898,577,3.377,578,3.327,581,2.422,586,1.308,587,1.308,589,1.704,590,1.421,592,1.033,593,2.294,596,1.421,632,1.62,643,0.939,646,1.128,647,0.939,655,3.698,656,2.158,658,2.754,675,1.033,680,2.792,687,1.308,688,1.308,694,1.308,696,1.308,698,1.308,703,1.813,740,1.308,756,1.308,783,2.158,785,2.158,786,2.158,787,2.158,788,1.308,789,3.195,790,2.158,791,2.158,792,2.158,793,2.158,794,2.158,795,2.754,796,2.422,797,2.754,801,2.158,822,1.033,826,1.308,828,1.308,834,2.158,835,1.308,836,2.754,845,1.308,872,1.308,907,1.549,908,1.549,909,0.861,912,1.549,916,1.033,921,0.939,922,1.421,928,1.033,936,2.294,972,2.754,974,2.754,978,1.151,979,1.151,981,2.422,1006,1.033,1009,1.308,1081,2.104,1082,1.033,1092,2.422,1115,1.898,1121,0.794,1130,1.033,1142,2.422,1155,3.195,1157,2.754,1173,3.535,1174,3.535,1176,1.308,1180,2.158,1182,4.36,1219,1.308,1222,1.308,1225,2.158,1256,1.308,1257,1.547,1258,3.256,1259,3.256,1260,1.547,1261,5.156,1262,1.547,1263,1.547,1264,3.778,1265,4.5,1266,1.547,1267,2.552,1268,1.547,1269,2.552,1270,1.547,1271,1.547,1272,2.552,1273,3.778,1274,2.552,1275,1.547,1276,1.547,1277,1.547,1278,1.547,1279,1.547,1280,1.547,1281,4.18,1282,2.552,1283,3.256,1284,1.547,1285,1.547,1286,2.552,1287,1.547,1288,1.547,1289,1.547,1290,2.552,1291,2.552,1292,1.547,1293,1.547,1294,1.547,1295,1.547,1296,3.256,1297,3.256,1298,1.547,1299,1.547,1300,1.547,1301,1.547,1302,1.547,1303,1.547,1304,1.547,1305,1.547,1306,1.547,1307,1.547,1308,1.547,1309,1.547,1310,1.547,1311,1.547,1312,1.547,1313,1.547,1314,2.552,1315,2.552,1316,2.552,1317,1.547,1318,1.547,1319,3.256,1320,1.547,1321,3.256,1322,3.256,1323,1.547,1324,1.547,1325,2.552,1326,2.552,1327,1.547,1328,1.547,1329,2.552,1330,2.552,1331,1.547,1332,1.547,1333,4.18,1334,3.256,1335,2.552,1336,1.547,1337,1.547,1338,1.547,1339,1.547,1340,1.547,1341,1.547,1342,1.547,1343,1.547,1344,1.547,1345,1.547,1346,1.547,1347,1.547,1348,1.547,1349,1.547,1350,2.552,1351,1.547,1352,1.547,1353,1.547,1354,1.547,1355,1.547,1356,1.547,1357,2.552,1358,1.547,1359,1.547,1360,1.547,1361,1.547,1362,1.547,1363,1.547,1364,1.547,1365,1.547]],["title/classes/VisualizarRespuestasDto.html",[0,0.098,515,1.627]],["body/classes/VisualizarRespuestasDto.html",[0,0.169,2,1.546,3,0.302,4,0.263,5,0.263,8,0.385,9,1.056,11,1.489,12,1.353,13,0.649,14,0.026,15,1.416,18,0.788,20,2.079,23,0.302,30,0.618,35,1.773,37,0.568,40,0.38,41,0.618,46,0.52,49,0.416,62,0.38,66,0.02,67,0.02,97,0.568,116,1.523,160,2.125,179,1.903,220,0.91,236,1.773,251,2.814,252,2.814,255,1.34,273,1.031,278,2.079,285,1.489,288,1.393,308,3.038,309,1.446,325,2.778,400,2.048,515,2.574,522,2.048,913,3.286,914,4.425,915,2.876,916,2.876,921,2.615,922,3.294,923,2.876,924,3.203,925,3.203,926,3.203,927,3.203,928,2.876,929,3.203,930,3.203,1366,4.306,1367,4.306,1368,4.306,1369,4.306,1370,4.306,1371,4.306]],["title/coverage.html",[1372,3.462]],["body/coverage.html",[0,0.193,1,2.438,5,0.245,6,3.396,7,3.85,13,0.4,14,0.026,41,0.743,46,0.625,66,0.019,67,0.019,74,1.91,182,2.062,183,3.368,184,3.85,196,2.682,220,0.871,249,2.682,250,3.396,276,2.236,277,3.396,304,1.7,306,3.396,374,2.674,375,2.682,377,3.396,418,2.682,503,2.236,505,2.062,515,1.91,578,2.236,593,4.229,632,1.262,646,2.674,648,3.396,888,3.396,898,3.396,907,1.91,908,3.143,913,2.438,914,3.825,915,3.825,922,2.236,931,2.682,932,3.396,948,2.236,970,3.396,990,3.396,1007,3.396,1031,2.682,1032,3.396,1041,2.236,1060,3.396,1081,2.236,1082,3.457,1083,3.85,1084,2.682,1112,3.396,1121,2.062,1132,3.396,1141,3.396,1154,3.396,1171,2.682,1172,3.396,1256,3.396,1372,2.987,1373,3.396,1374,4.016,1375,4.016,1376,3.396,1377,4.016,1378,6.049,1379,4.016,1380,4.016,1381,6.049,1382,4.016,1383,4.016,1384,5.727,1385,6.41,1386,6.261,1387,4.016,1388,4.016,1389,4.016,1390,4.016,1391,4.016,1392,4.016,1393,4.016,1394,4.016,1395,4.016,1396,4.016,1397,4.016,1398,4.016,1399,4.016,1400,4.016]],["title/dependencies.html",[71,1.955,1401,2.422]],["body/dependencies.html",[0,0.167,14,0.026,27,2.34,66,0.022,67,0.022,71,2.34,88,1.546,96,3.659,109,2.026,111,1.266,202,2.34,205,2.34,432,2.739,518,4.16,682,4.16,683,4.16,735,4.16,1402,6.275,1403,4.919,1404,4.919,1405,4.919,1406,4.919,1407,4.919,1408,4.919,1409,4.919,1410,4.919,1411,4.919,1412,4.919,1413,4.919,1414,4.919,1415,4.919,1416,4.919,1417,4.919,1418,4.919,1419,4.919,1420,4.919,1421,4.919,1422,4.919,1423,4.919,1424,4.919,1425,4.919,1426,4.919,1427,4.919,1428,4.919]],["title/miscellaneous/enumerations.html",[1429,1.913,1430,3.475]],["body/miscellaneous/enumerations.html",[8,0.441,14,0.026,20,2.5,41,0.845,66,0.022,67,0.022,261,3.021,511,3.929,591,3.095,693,3.951,921,2.998,1021,4.346,1022,4.346,1429,3.297,1430,4.174,1431,4.937,1432,5.883,1433,5.883,1434,6.506,1435,4.937,1436,6.948,1437,4.937]],["title/miscellaneous/functions.html",[1429,1.913,1438,3.475]],["body/miscellaneous/functions.html",[8,0.487,14,0.023,66,0.023,67,0.023,74,3.113,1376,4.605,1429,3.637,1438,4.605,1439,5.446]],["title/index.html",[8,0.256,1440,2.864,1441,2.864]],["body/index.html",[4,0.229,14,0.026,57,0.73,66,0.018,67,0.018,85,3.229,93,3.096,130,4.179,271,4.68,275,1.176,435,4.379,655,2.272,850,3.164,1207,4.68,1372,2.783,1373,4.179,1442,3.742,1443,3.742,1444,3.742,1445,4.942,1446,3.742,1447,3.742,1448,3.742,1449,3.742,1450,4.942,1451,5.534,1452,3.742,1453,5.887,1454,3.742,1455,6.509,1456,3.742,1457,6.412,1458,3.742,1459,3.742,1460,3.742,1461,4.942,1462,3.742,1463,3.742,1464,5.534,1465,3.742,1466,4.942,1467,3.742,1468,3.742,1469,3.742,1470,3.742,1471,3.742,1472,5.887,1473,6.288,1474,3.742,1475,4.942,1476,3.742,1477,3.742,1478,3.742,1479,3.742,1480,3.742,1481,6.288,1482,4.942,1483,5.887,1484,3.742,1485,4.942,1486,3.742,1487,3.742,1488,4.942,1489,6.288,1490,5.887,1491,3.742,1492,4.942,1493,3.742,1494,3.742,1495,3.742,1496,3.742,1497,5.887,1498,3.742,1499,3.742,1500,3.742,1501,3.742,1502,4.942,1503,3.742,1504,3.742,1505,3.742,1506,3.742,1507,3.742,1508,4.942,1509,3.742,1510,3.742,1511,3.742,1512,4.942,1513,3.742,1514,3.742,1515,4.978,1516,4.942,1517,3.742,1518,3.742,1519,3.742,1520,3.742,1521,3.742,1522,3.742,1523,3.742,1524,3.742,1525,4.942,1526,3.742,1527,3.742,1528,3.742,1529,3.742,1530,3.742,1531,3.742,1532,3.742,1533,3.742,1534,3.742,1535,3.742,1536,4.942,1537,3.742,1538,3.742,1539,3.742,1540,3.742,1541,3.742,1542,4.942,1543,3.742,1544,3.742,1545,3.742,1546,4.942,1547,4.942,1548,3.742,1549,3.742,1550,3.742,1551,3.742,1552,3.742,1553,3.742,1554,3.742,1555,3.742,1556,3.742,1557,3.742,1558,3.742,1559,3.164,1560,3.742,1561,3.742,1562,3.742,1563,3.742,1564,3.742,1565,3.742,1566,3.164]],["title/modules.html",[70,2.214]],["body/modules.html",[14,0.023,66,0.023,67,0.023,69,3.514,70,2.503,79,3.195,80,3.195,81,3.195,82,2.929,1515,5.716,1567,6.76,1568,6.76,1569,6.76]],["title/overview.html",[1570,3.935]],["body/overview.html",[2,1.678,14,0.026,66,0.021,67,0.021,68,1.796,69,4.604,70,2.223,71,2.223,72,2.602,73,2.602,74,2.223,75,2.602,76,2.602,77,3.951,78,3.951,79,4.093,80,3.976,81,3.976,82,3.753,83,3.169,84,2.602,85,2.399,305,2.066,376,2.066,503,3.417,505,3.461,624,3.951,626,3.951,647,2.838,895,4.813,948,3.417,956,3.951,957,3.951,1041,3.417,1054,3.951,1055,3.951,1247,3.951,1248,3.951,1249,3.951,1570,3.951,1571,4.673,1572,4.673,1573,4.673]],["title/properties.html",[9,0.802,1401,2.422]],["body/properties.html",[9,1.056,14,0.026,66,0.023,67,0.023,275,1.701,1559,4.578,1566,4.578,1574,5.414,1575,5.414,1576,5.414]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":593,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1575,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["0.3.24",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":596,"title":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["1'})@apiresponse({status",{"_index":473,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["1.5.4",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1573,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["11.1.2",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":697,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["2.2.17",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":438,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["201",{"_index":405,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["3.3.2",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":895,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"overview.html":{}}}],["4.0.2",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":408,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["404",{"_index":475,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["5",{"_index":1571,"title":{},"body":{"overview.html":{}}}],["5.5.3",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["6.0.6",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1572,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["8.14.1",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["a.numero",{"_index":840,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["abc123def456",{"_index":436,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["abierta",{"_index":591,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta-1.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"miscellaneous/enumerations.html":{}}}],["abierta.entity",{"_index":1130,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["abierta.entity.ts",{"_index":1141,"title":{},"body":{"entities/RespuestaAbierta.html":{},"coverage.html":{}}}],["abierta.entity.ts:19",{"_index":1143,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:23",{"_index":1150,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:27",{"_index":1144,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:31",{"_index":1145,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:39",{"_index":1147,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:47",{"_index":1148,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abiertas",{"_index":703,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["acceder",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["accesible",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["acceso",{"_index":608,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["acortar",{"_index":746,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["activo",{"_index":716,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actual",{"_index":790,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["actualiza",{"_index":824,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizada",{"_index":1076,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizar",{"_index":44,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizardto",{"_index":1036,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarestadoencuesta",{"_index":649,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarestadoencuesta(id",{"_index":659,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarpregunta",{"_index":1033,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizarpregunta(id",{"_index":1035,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarpregunta(idpregunta",{"_index":1066,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizarpreguntadto",{"_index":1,"title":{"classes/ActualizarPreguntaDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"coverage.html":{}}}],["actúa",{"_index":1105,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["adicional",{"_index":1269,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["agrega",{"_index":691,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agregan",{"_index":866,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agrego",{"_index":876,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["agrupa",{"_index":1231,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["agrupadora",{"_index":1146,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["ahora",{"_index":786,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["ahora.toisostring",{"_index":791,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["al",{"_index":232,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["alguien",{"_index":1222,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["alias",{"_index":760,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["allowing",{"_index":1503,"title":{},"body":{"index.html":{}}}],["almacenar",{"_index":1100,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["amazing",{"_index":1552,"title":{},"body":{"index.html":{}}}],["andwhere('encuesta.habilitada",{"_index":767,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["anidados",{"_index":210,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["anónima",{"_index":1363,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["api",{"_index":368,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/RespuestasController.html":{}}}],["api/v1/encuestas/resultados/{id}?codigo={codigoresultados",{"_index":726,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["api/v1/respuestas/participar/{id}/{codigorespuesta",{"_index":724,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apibody",{"_index":1229,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apioperation",{"_index":500,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiparam",{"_index":501,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiprefix",{"_index":720,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apiproperty",{"_index":201,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty()@isnumber()@isnotempty",{"_index":279,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isstring",{"_index":188,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":194,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isuuid('4')@isnotempty",{"_index":889,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({description",{"_index":256,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["apiproperty({enum",{"_index":294,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({type",{"_index":197,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiresponse",{"_index":502,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apitags",{"_index":1228,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apitags('respuestas",{"_index":1233,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apiversion",{"_index":722,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["app_url",{"_index":714,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["application",{"_index":1473,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1450,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":69,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["armar",{"_index":864,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["array",{"_index":1101,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["arrayminsize",{"_index":211,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arrayminsize(1",{"_index":230,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arraynotempty",{"_index":212,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arreglo",{"_index":229,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["arroja",{"_index":856,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["asc",{"_index":775,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["asegurar",{"_index":1110,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["asigna",{"_index":1074,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["asocia",{"_index":942,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["asociada",{"_index":976,"title":{},"body":{"injectables/OpcionesService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["asociadas",{"_index":242,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["assignment",{"_index":853,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["async",{"_index":380,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["attachment",{"_index":619,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["author",{"_index":1559,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autogenerada",{"_index":353,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["autoloadentities",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["automaticamente",{"_index":246,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["automáticamente",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["await",{"_index":530,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["aws",{"_index":1492,"title":{},"body":{"index.html":{}}}],["añade",{"_index":540,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["añadirlo",{"_index":1294,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["b",{"_index":844,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["b.numero",{"_index":841,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["backers",{"_index":1553,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":498,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["badrequestexception('código",{"_index":579,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["badrequestexception('datos",{"_index":782,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["badrequestexception('encuesta",{"_index":823,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["badrequestexception('no",{"_index":1288,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["bajo",{"_index":1232,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["base",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["based",{"_index":1487,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":717,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/encuestas/${encuestacreada.id}/resultados?codigo=${codigoresultados",{"_index":727,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/respuestas/participar/${encuestacreada.id}/${codigorespuesta",{"_index":725,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["bd",{"_index":837,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["board",{"_index":1545,"title":{},"body":{"index.html":{}}}],["body",{"_index":493,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["body('habilitada",{"_index":600,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["boolean",{"_index":325,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["bootstrap",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":771,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["browse",{"_index":1569,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1567,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1445,"title":{},"body":{"index.html":{}}}],["busca",{"_index":822,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["buscar",{"_index":835,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["búsqueda",{"_index":1292,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cada",{"_index":236,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cadena",{"_index":60,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["cambiarestadoencuesta",{"_index":381,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cambiarestadoencuesta(id",{"_index":390,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["campo",{"_index":832,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["cantidad",{"_index":872,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["cantidad_respuestas",{"_index":916,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cantidadrespuestas",{"_index":1357,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["carga",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":333,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["case",{"_index":769,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["caso",{"_index":749,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["catch",{"_index":575,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["channel",{"_index":1518,"title":{},"body":{"index.html":{}}}],["check",{"_index":1481,"title":{},"body":{"index.html":{}}}],["clase",{"_index":43,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["class",{"_index":0,"title":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"overview.html":{}}}],["clave",{"_index":351,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["clicks",{"_index":1502,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1486,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule",{"_index":624,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule_imports",{"_index":625,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["cluster_encuestasmodule_providers",{"_index":626,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule",{"_index":956,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule_providers",{"_index":957,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule",{"_index":1054,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule_providers",{"_index":1055,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule",{"_index":1247,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_exports",{"_index":1248,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_providers",{"_index":1249,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["codigo",{"_index":431,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["codigo_respuesta",{"_index":311,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigo_resultados",{"_index":314,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigoparticipacion",{"_index":1261,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["codigoqr",{"_index":185,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigorespuesta",{"_index":251,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigoresultados",{"_index":252,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigotipo",{"_index":666,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["codigotipoenum",{"_index":511,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"miscellaneous/enumerations.html":{}}}],["codigotipoenum.respuesta",{"_index":555,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum.resultados",{"_index":576,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum})@isenum(codigotipoenum)@isnotempty",{"_index":891,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["codigovisualizacion",{"_index":1273,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["column",{"_index":340,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column('int",{"_index":1119,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column({default",{"_index":326,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({name",{"_index":310,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({nullable",{"_index":317,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["column({type",{"_index":998,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/RespuestaAbierta.html":{}}}],["columna",{"_index":350,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["come",{"_index":1509,"title":{},"body":{"index.html":{}}}],["como",{"_index":228,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["completa",{"_index":458,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["con",{"_index":37,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["condición",{"_index":1291,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["conexión",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/configuration",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{}}}],["configservice.get('database.host",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logger",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logging",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configuraciones",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configuración",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["configuration",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":745,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.error('error",{"_index":752,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.log",{"_index":836,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('comparación",{"_index":839,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.log('fecha",{"_index":789,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('validando",{"_index":788,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.log('¿est",{"_index":793,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["console.warn",{"_index":739,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["const",{"_index":529,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["construcción",{"_index":757,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor",{"_index":522,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"injectables/OpcionesService.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["constructor(encuestarepository",{"_index":654,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor(opcionrepository",{"_index":971,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["constructor(preguntarepo",{"_index":1062,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["constructor(private",{"_index":952,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["constructor(respuestarepository",{"_index":1257,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["construir",{"_index":1290,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["consulta",{"_index":545,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["consultar",{"_index":488,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["consultas",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["contenedor",{"_index":1106,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["contener",{"_index":1114,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["contenido",{"_index":623,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["content",{"_index":617,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["conteo",{"_index":815,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["contiene",{"_index":969,"title":{},"body":{"modules/OpcionesModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["contienen",{"_index":641,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["contraseña",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["controlador",{"_index":520,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["controladores",{"_index":638,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["controller",{"_index":374,"title":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"coverage.html":{}}}],["controller('encuestas",{"_index":519,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["controller('preguntas",{"_index":1044,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["controller('preguntas/:preguntaid/opciones",{"_index":951,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["controller('respuestas",{"_index":1234,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["controllers",{"_index":376,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["controllers/encuestas.controller",{"_index":628,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["controllers/opciones.controller",{"_index":964,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["controllers/respuestas.controller",{"_index":1251,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["convierte",{"_index":880,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["copia",{"_index":706,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["correctamente",{"_index":830,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["corresponde",{"_index":1015,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/RespuestaAbierta.html":{}}}],["corta",{"_index":539,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["corto",{"_index":244,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["courses",{"_index":1524,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1372,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crea",{"_index":399,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["creación",{"_index":704,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["creada",{"_index":48,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["crear",{"_index":224,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["crearencuesta",{"_index":382,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearencuesta(dto",{"_index":396,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearopcion",{"_index":937,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["crearopcion(preguntaid",{"_index":939,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["create",{"_index":218,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["create.php?url=${encodeuricomponent(url",{"_index":737,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["createencuestadto",{"_index":182,"title":{"classes/CreateEncuestaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["createencuestadto})@apiresponse({status",{"_index":1183,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["createencuestaresponsedto",{"_index":249,"title":{"classes/CreateEncuestaResponseDto.html":{}},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"coverage.html":{}}}],["createencuestaresponsedto})@apiresponse({status",{"_index":407,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["createopciondto",{"_index":276,"title":{"classes/CreateOpcionDto.html":{}},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"coverage.html":{}}}],["createpreguntadto",{"_index":196,"title":{"classes/CreatePreguntaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["createquerybuilder('encuesta",{"_index":759,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["csv",{"_index":602,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["cualquier",{"_index":428,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cuando",{"_index":450,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["cuantas",{"_index":1356,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuenta",{"_index":1355,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuerpo",{"_index":1047,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["current_timestamp",{"_index":320,"title":{},"body":{"entities/Encuesta.html":{}}}],["cuántas",{"_index":927,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["código",{"_index":247,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["código'})@apiparam({name",{"_index":472,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["códigos",{"_index":403,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cómo",{"_index":1220,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["data",{"_index":221,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["database",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":191,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["date(encuesta.fechavencimiento",{"_index":787,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["datos",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["de",{"_index":40,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["debe",{"_index":1092,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["deben",{"_index":700,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["declara",{"_index":966,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["declaración",{"_index":637,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["declarations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["decorador",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["decoradores",{"_index":338,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"entities/RespuestaAbierta.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["deeper",{"_index":1520,"title":{},"body":{"index.html":{}}}],["default",{"_index":319,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["defecto",{"_index":1002,"title":{},"body":{"entities/Pregunta.html":{}}}],["define",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["definidos",{"_index":302,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["definir",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["del",{"_index":32,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["delete",{"_index":947,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["delete(':id",{"_index":944,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["delimiter",{"_index":883,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dentro",{"_index":923,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["dependencies",{"_index":71,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1472,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1491,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1482,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1501,"title":{},"body":{"index.html":{}}}],["depuración",{"_index":426,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["descarga",{"_index":611,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["desconocido",{"_index":753,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["description",{"_index":275,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"index.html":{},"properties.html":{}}}],["desde",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["deshabilita",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["deshabilitada",{"_index":829,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["deshabilitar",{"_index":371,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["detallada",{"_index":425,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["determinar",{"_index":831,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["development",{"_index":1458,"title":{},"body":{"index.html":{}}}],["devolvemos",{"_index":1210,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["devolverla",{"_index":367,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["devtools",{"_index":1531,"title":{},"body":{"index.html":{}}}],["devuelve",{"_index":457,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["diagnosticar",{"_index":448,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dinámico",{"_index":715,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["disable",{"_index":847,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["discord",{"_index":1517,"title":{},"body":{"index.html":{}}}],["disponibles",{"_index":1334,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["disposition",{"_index":618,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dive",{"_index":1519,"title":{},"body":{"index.html":{}}}],["documenta",{"_index":225,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["documentar",{"_index":203,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["documentation",{"_index":1373,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["donde",{"_index":1212,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["dto",{"_index":33,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["dto.codigo",{"_index":550,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dto.fechavencimiento",{"_index":708,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dto.preguntas",{"_index":692,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dto.tipo",{"_index":551,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/create",{"_index":507,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["dtos/obtener",{"_index":509,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/registrar",{"_index":1218,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["dtos/visualizar",{"_index":1225,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["e2e",{"_index":1467,"title":{},"body":{"index.html":{}}}],["each",{"_index":235,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["efficient",{"_index":1446,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1479,"title":{},"body":{"index.html":{}}}],["ejecuta",{"_index":777,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ejemplo",{"_index":366,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["ejemplorespuesta",{"_index":588,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["el",{"_index":57,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"index.html":{}}}],["elegidas",{"_index":930,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["elemento",{"_index":234,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["elimina",{"_index":946,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminada",{"_index":989,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["eliminan",{"_index":1078,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminar",{"_index":935,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminaropcion",{"_index":938,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminaropcion(id",{"_index":943,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminarpregunta",{"_index":1034,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpregunta(id",{"_index":1039,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpreguntaconopciones",{"_index":1061,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminarpreguntaconopciones(idpregunta",{"_index":1070,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["ella",{"_index":1185,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["emilia",{"_index":603,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["en",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["encabezados",{"_index":613,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encontrada",{"_index":476,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encontraron",{"_index":858,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuentra",{"_index":779,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuentran",{"_index":855,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta",{"_index":220,"title":{"entities/Encuesta.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["encuesta'})@apiresponse({status",{"_index":1193,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["encuesta.codigorespuesta",{"_index":587,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.codigoresultados",{"_index":1339,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuesta.dto",{"_index":508,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.dto.ts",{"_index":184,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["encuesta.dto.ts:10",{"_index":890,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:15",{"_index":892,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:20",{"_index":195,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:28",{"_index":200,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:32",{"_index":193,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:37",{"_index":190,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:42",{"_index":189,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.enlaceparticipacion",{"_index":534,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encuesta.entity",{"_index":1000,"title":{},"body":{"entities/Pregunta.html":{}}}],["encuesta.fechavencimiento",{"_index":785,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.habilitada",{"_index":826,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.id",{"_index":558,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.nombre",{"_index":559,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas",{"_index":1009,"title":{},"body":{"entities/Pregunta-1.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas.foreach((pregunta",{"_index":842,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta.preguntas.map((pregunta",{"_index":560,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["encuesta.respuestas",{"_index":804,"title":{},"body":{"injectables/EncuestasService.html":{},"entities/Respuesta-1.html":{}}}],["encuesta.respuestas)@joincolumn({name",{"_index":1133,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["encuesta.respuestas.length",{"_index":821,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada",{"_index":711,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigorespuesta",{"_index":732,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigoresultados",{"_index":733,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.fechavencimiento",{"_index":734,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.id",{"_index":731,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestaid",{"_index":1265,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuestarepository",{"_index":658,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuestas",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/dtos/actualizar",{"_index":1043,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["encuestas/dtos/create",{"_index":950,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/RespuestasController.html":{}}}],["encuestas/entities/encuesta.entity",{"_index":1024,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/entities/opcion.entity",{"_index":962,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/entities/pregunta.entity",{"_index":963,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/enums/tipos",{"_index":1023,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["encuestascontroller",{"_index":375,"title":{"controllers/EncuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"coverage.html":{}}}],["encuestasmodule",{"_index":79,"title":{"modules/EncuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["encuestasservice",{"_index":503,"title":{"injectables/EncuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["endpoint",{"_index":444,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["enlace",{"_index":243,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["enlacecorto",{"_index":186,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlaceparticipacion",{"_index":253,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlaces",{"_index":402,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["enlacevisualizacion",{"_index":254,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"injectables/EncuestasService.html":{}}}],["ensure",{"_index":1477,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1535,"title":{},"body":{"index.html":{}}}],["entidad",{"_index":342,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{}}}],["entidades",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["entities",{"_index":305,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"overview.html":{}}}],["entities/encuesta.entity",{"_index":510,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["entities/opcion.entity",{"_index":633,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/pregunta.entity",{"_index":631,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/respuesta",{"_index":1253,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entities/respuesta.entity",{"_index":1252,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entity",{"_index":304,"title":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["entity('respuestas",{"_index":1131,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["entity('respuestas_abiertas",{"_index":1153,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["entity('respuestas_opciones",{"_index":1163,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["entorno",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":36,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["enumerador",{"_index":297,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["enumerations",{"_index":1430,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/codigo",{"_index":512,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["enums/tipos",{"_index":34,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{}}}],["enunciado",{"_index":1017,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["env",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["enviar",{"_index":610,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["envía",{"_index":622,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["error",{"_index":740,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["error.message",{"_index":748,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["es",{"_index":54,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["eslint",{"_index":846,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["eslint/no",{"_index":851,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["especifica",{"_index":1005,"title":{},"body":{"entities/Pregunta.html":{}}}],["específica",{"_index":936,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["específico",{"_index":756,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["específicos",{"_index":1094,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["esperada",{"_index":1020,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["est",{"_index":226,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["esta",{"_index":52,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["estado",{"_index":825,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["estadísticas",{"_index":1203,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["este",{"_index":443,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["estructura",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["están",{"_index":1299,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["etc",{"_index":1215,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["etiqueta",{"_index":1230,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["exactamente",{"_index":1324,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["example",{"_index":435,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"index.html":{}}}],["excepción",{"_index":781,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["exclude",{"_index":346,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluir",{"_index":347,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluye",{"_index":363,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["existe",{"_index":981,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["existentes",{"_index":1004,"title":{},"body":{"entities/Pregunta.html":{}}}],["exitosamente",{"_index":406,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["exitosamente'})@apiresponse({status",{"_index":440,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["experience",{"_index":1522,"title":{},"body":{"index.html":{}}}],["explicitamente",{"_index":1104,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["explícitamente",{"_index":557,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["exporta",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["exportación",{"_index":642,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["exportar",{"_index":604,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exportarresultadoscsv",{"_index":383,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exportarresultadoscsv(id",{"_index":412,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["express",{"_index":518,"title":{},"body":{"controllers/EncuestasController.html":{},"dependencies.html":{}}}],["extra",{"_index":370,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["extrae",{"_index":1046,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["falla",{"_index":446,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["false",{"_index":269,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["false})@isarray()@isoptional()@validatenested({each",{"_index":291,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["falso",{"_index":698,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["faltan",{"_index":1282,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["fast",{"_index":1495,"title":{},"body":{"index.html":{}}}],["features",{"_index":1505,"title":{},"body":{"index.html":{}}}],["fecha",{"_index":266,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fecha_vencimiento",{"_index":322,"title":{},"body":{"entities/Encuesta.html":{}}}],["fechaactualizacion",{"_index":307,"title":{},"body":{"entities/Encuesta.html":{}}}],["fechavencimiento",{"_index":187,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fechavencimiento.toisostring",{"_index":792,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fetch",{"_index":735,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["few",{"_index":1497,"title":{},"body":{"index.html":{}}}],["fila",{"_index":860,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["fila.respuesta",{"_index":878,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas",{"_index":859,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas.push",{"_index":869,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filas.push(fila",{"_index":879,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["filename=\"resultados_encuesta_${id}.csv",{"_index":620,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["filter((ra",{"_index":807,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filter((ro",{"_index":817,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filtra",{"_index":766,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["final",{"_index":1361,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["flatmap((r",{"_index":805,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["focus",{"_index":1504,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1539,"title":{},"body":{"index.html":{}}}],["format",{"_index":270,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["formato",{"_index":605,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["foránea",{"_index":910,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["framework",{"_index":1207,"title":{},"body":{"controllers/RespuestasController.html":{},"index.html":{}}}],["frontend",{"_index":1211,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["fue",{"_index":828,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fueron",{"_index":929,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["full",{"_index":1534,"title":{},"body":{"index.html":{}}}],["funcionalidad",{"_index":369,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["funciones",{"_index":1237,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["función",{"_index":677,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["function",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1438,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1500,"title":{},"body":{"index.html":{}}}],["genera",{"_index":707,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generado",{"_index":245,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{}}}],["general",{"_index":1113,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["generamos",{"_index":695,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generando",{"_index":401,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["generar",{"_index":532,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["generarcodigoqr",{"_index":650,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarcodigoqr(texto",{"_index":662,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto",{"_index":651,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto(url",{"_index":664,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["gestiona",{"_index":959,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["gestionar",{"_index":934,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["get(':id",{"_index":419,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/csv/:codigoresultados",{"_index":415,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados",{"_index":595,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados')@apioperation({summary",{"_index":471,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo",{"_index":570,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo')@apioperation({summary",{"_index":422,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo",{"_index":585,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo')@apioperation({summary",{"_index":466,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo",{"_index":552,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo')@apioperation({summary",{"_index":456,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:id/:tokenparticipacion",{"_index":1245,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('participar/:id/:tokenparticipacion')@apioperation({summary",{"_index":1178,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:codigo",{"_index":580,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:codigo')@apioperation({summary",{"_index":480,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:tokenvisualizacion",{"_index":1242,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:tokenvisualizacion')@apioperation({summary",{"_index":1197,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["getting",{"_index":1440,"title":{"index.html":{}},"body":{}}],["global",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["globalmente",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":1527,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1549,"title":{},"body":{"index.html":{}}}],["guarda",{"_index":710,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["guardamos",{"_index":1362,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["guardar",{"_index":1213,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["ha",{"_index":1296,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["habilita",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["habilitada",{"_index":308,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["habilitado",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["hace",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1521,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1510,"title":{},"body":{"index.html":{}}}],["hay",{"_index":877,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["haypreguntaabierta",{"_index":861,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["header",{"_index":884,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["helmet",{"_index":1410,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1525,"title":{},"body":{"index.html":{}}}],["here",{"_index":1557,"title":{},"body":{"index.html":{}}}],["herramientas",{"_index":1205,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["host",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":968,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["http://localhost:3000",{"_index":719,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["http://tinyurl.com/api",{"_index":736,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["httpcode",{"_index":1208,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["httpcode(httpstatus.created",{"_index":1239,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["https://nestjs.com",{"_index":1563,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":1209,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["id",{"_index":255,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["id_encuesta",{"_index":1006,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["id_encuesta'})@exclude",{"_index":991,"title":{},"body":{"entities/Pregunta.html":{}}}],["id_opcion",{"_index":1157,"title":{},"body":{"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta",{"_index":590,"title":{},"body":{"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta'})@exclude",{"_index":902,"title":{},"body":{"entities/Opcion.html":{}}}],["id_respuesta",{"_index":1142,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["identifica",{"_index":1090,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["identificador",{"_index":1012,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["identificar",{"_index":896,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["identifier",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["idopcion",{"_index":1333,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["idpregunta",{"_index":1069,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["ids",{"_index":467,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["ignora",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreenvfile",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["importa",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/OpcionesModule.html":{}}}],["importación",{"_index":337,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["importamos",{"_index":1204,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["imports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["incluir",{"_index":556,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["incluye",{"_index":1202,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["incluyendo",{"_index":1186,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["incompletos",{"_index":410,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indica",{"_index":50,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Pregunta-1.html":{}}}],["individual",{"_index":1088,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["individuales",{"_index":867,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["información",{"_index":424,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["information",{"_index":1484,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1507,"title":{},"body":{"index.html":{}}}],["ingresado",{"_index":1151,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["inicializar",{"_index":1347,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inject",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":646,"title":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["injectables",{"_index":647,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"overview.html":{}}}],["injectrepository",{"_index":675,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(encuesta",{"_index":687,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(opcion",{"_index":978,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(pregunta",{"_index":979,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuesta",{"_index":688,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaabierta",{"_index":1279,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaopcion",{"_index":1280,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["innerjoinandselect('encuesta.preguntas",{"_index":761,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["insert",{"_index":357,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["insertar",{"_index":359,"title":{},"body":{"entities/Encuesta.html":{}}}],["install",{"_index":1499,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1456,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":747,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["instancia",{"_index":240,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["integración",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["intenta",{"_index":427,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["intentar",{"_index":572,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["interact",{"_index":1528,"title":{},"body":{"index.html":{}}}],["interactuar",{"_index":960,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{}}}],["inválidas",{"_index":1285,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inválido",{"_index":477,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["inválido'})@apiresponse({status",{"_index":1194,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inválidos",{"_index":409,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["inyección",{"_index":525,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["inyecta",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["inyectable",{"_index":686,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["inyectamos",{"_index":1235,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inyectar",{"_index":673,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["isarray",{"_index":213,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isarray()@validatenested({each",{"_index":1085,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["isdatestring",{"_index":214,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["isenum",{"_index":26,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["isenum(codigotipoenum",{"_index":897,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isenum(tiposrespuestaenum",{"_index":63,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["isglobal",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber",{"_index":282,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber()@isnotempty",{"_index":1164,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional",{"_index":24,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isarray()@isnumber",{"_index":1166,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isdatestring",{"_index":192,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["isoptional()@isenum(tiposrespuestaenum",{"_index":21,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["isoptional()@isstring",{"_index":17,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring()@isnotempty()@type(undefined",{"_index":1169,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isuuid",{"_index":893,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isuuid('4",{"_index":894,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["itera",{"_index":1340,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["job",{"_index":1542,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1544,"title":{},"body":{"index.html":{}}}],["join",{"_index":1555,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":905,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["json.stringify(opcionesdisponibles",{"_index":1338,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["junto",{"_index":1052,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["kamil",{"_index":1560,"title":{},"body":{"index.html":{}}}],["key",{"_index":1474,"title":{},"body":{"index.html":{}}}],["la",{"_index":62,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["lanza",{"_index":780,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["las",{"_index":30,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["le",{"_index":690,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["learn",{"_index":1513,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('pregunta.opciones",{"_index":763,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["legend",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["libre",{"_index":1095,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["librería",{"_index":681,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["license",{"_index":1566,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1547,"title":{},"body":{"index.html":{}}}],["line",{"_index":849,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["linkedin",{"_index":1541,"title":{},"body":{"index.html":{}}}],["lista",{"_index":241,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["listas",{"_index":1348,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["llama",{"_index":547,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["lo",{"_index":1045,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["load",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":1485,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1537,"title":{},"body":{"index.html":{}}}],["los",{"_index":38,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["lógica",{"_index":629,"title":{},"body":{"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["maia",{"_index":373,"title":{},"body":{"entities/Encuesta.html":{}}}],["makes",{"_index":1493,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1506,"title":{},"body":{"index.html":{}}}],["maneja",{"_index":967,"title":{},"body":{"modules/OpcionesModule.html":{},"controllers/RespuestasController.html":{}}}],["manejar",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["manejarán",{"_index":639,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["manera",{"_index":812,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["manytoone",{"_index":906,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["manytoone(undefined",{"_index":1008,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":901,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["map((ra",{"_index":809,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["marca",{"_index":685,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":1489,"title":{},"body":{"index.html":{}}}],["menos",{"_index":233,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["mensaje",{"_index":827,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["message",{"_index":583,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["metadata",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":379,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["mica",{"_index":372,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["miscellaneous",{"_index":1429,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":1546,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1461,"title":{},"body":{"index.html":{}}}],["module",{"_index":68,"title":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["modules",{"_index":70,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/encuestas/encuestas.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/opciones/opciones.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/preguntas/preguntas.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/respuestas/respuestas.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1483,"title":{},"body":{"index.html":{}}}],["mostrarán",{"_index":1221,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["muchos",{"_index":362,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["myśliwiec",{"_index":1561,"title":{},"body":{"index.html":{}}}],["método",{"_index":689,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["módulo",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["módulos",{"_index":491,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["múltiple",{"_index":699,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["múltiples",{"_index":1098,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["name",{"_index":349,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["navegador",{"_index":1227,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["necesarias",{"_index":1206,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["necesarios",{"_index":492,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["need",{"_index":1532,"title":{},"body":{"index.html":{}}}],["negocio",{"_index":630,"title":{},"body":{"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["nest",{"_index":1451,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1565,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["new",{"_index":578,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["newline",{"_index":885,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["next",{"_index":848,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["nico",{"_index":607,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["node",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":1444,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["notfoundexception",{"_index":680,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('encuesta",{"_index":801,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('no",{"_index":857,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["notfoundexception('opción",{"_index":987,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["notfoundexception('pregunta",{"_index":982,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["npm",{"_index":1455,"title":{},"body":{"index.html":{}}}],["nueva",{"_index":398,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["nuevo",{"_index":61,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["nuevos",{"_index":1050,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["nullable",{"_index":312,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["nulos",{"_index":356,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["number",{"_index":273,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["numero",{"_index":278,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["numérico",{"_index":1180,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["número",{"_index":284,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["números",{"_index":1102,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["o",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta-1.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["object",{"_index":223,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["object.assign(pregunta",{"_index":1073,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["objeto",{"_index":237,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["objetos",{"_index":209,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["obligatorias",{"_index":1283,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["obligatorio",{"_index":1089,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["obtenemos",{"_index":1365,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["obtener",{"_index":423,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuesta",{"_index":384,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuesta(id",{"_index":417,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuestadebug",{"_index":385,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(@param('codigo",{"_index":571,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(codigo",{"_index":421,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadto",{"_index":418,"title":{"classes/ObtenerEncuestaDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["obtenerencuestaparaparticipacion",{"_index":1173,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipacion(id",{"_index":1176,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipar",{"_index":386,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaparaparticipar(codigo",{"_index":455,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaporcodigo",{"_index":652,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerencuestaporcodigo(codigo",{"_index":668,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerestructuraencuesta",{"_index":387,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerestructuraencuesta(codigo",{"_index":465,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultados",{"_index":388,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultados(id",{"_index":470,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultadosencuesta",{"_index":389,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultadosencuesta(codigo",{"_index":479,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenida",{"_index":439,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["obtenidas",{"_index":1200,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["obtenidos",{"_index":474,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtiene",{"_index":442,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["offer",{"_index":1543,"title":{},"body":{"index.html":{}}}],["official",{"_index":1490,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":341,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["onetomany(undefined",{"_index":331,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["opcion",{"_index":632,"title":{"entities/Opcion.html":{}},"body":{"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["opcion.conteo",{"_index":875,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.dto",{"_index":299,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["opcion.dto.ts",{"_index":277,"title":{},"body":{"classes/CreateOpcionDto.html":{},"coverage.html":{}}}],["opcion.dto.ts:14",{"_index":280,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.dto.ts:9",{"_index":281,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.entity",{"_index":909,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["opcion.entity.ts",{"_index":1154,"title":{},"body":{"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["opcion.entity.ts:19",{"_index":1158,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:23",{"_index":1160,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:27",{"_index":1159,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:35",{"_index":1162,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:43",{"_index":1161,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.id",{"_index":567,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion.id).length",{"_index":819,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.numero",{"_index":568,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["opcion.opcion",{"_index":874,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.pregunta",{"_index":995,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["opcion.texto",{"_index":569,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion_multiple_seleccion_multiple",{"_index":1022,"title":{},"body":{"entities/Pregunta-1.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcion_multiple_seleccion_simple",{"_index":1021,"title":{},"body":{"entities/Pregunta-1.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcional",{"_index":55,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["opcionconrespuestasdto",{"_index":913,"title":{"classes/OpcionConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["opciones",{"_index":288,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["opcionesconteo",{"_index":814,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcionescontroller",{"_index":931,"title":{"controllers/OpcionesController.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"coverage.html":{}}}],["opcionesdisponibles",{"_index":1335,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["opcionesmodule",{"_index":80,"title":{"modules/OpcionesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OpcionesModule.html":{},"modules.html":{},"overview.html":{}}}],["opcionesservice",{"_index":948,"title":{"injectables/OpcionesService.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"coverage.html":{},"overview.html":{}}}],["opcionguardada",{"_index":984,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["opcionrepo",{"_index":1063,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["opcionrepository",{"_index":974,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["opción",{"_index":283,"title":{},"body":{"classes/CreateOpcionDto.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["open",{"_index":1548,"title":{},"body":{"index.html":{}}}],["optional",{"_index":10,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["orden",{"_index":286,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Pregunta-1.html":{}}}],["ordena",{"_index":773,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["original",{"_index":743,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["otros",{"_index":645,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["out",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1570,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1303,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["p.numero).join",{"_index":1307,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["package",{"_index":1401,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["papa",{"_index":684,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["papa.unparse(filas",{"_index":881,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["papaparse",{"_index":683,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["para",{"_index":29,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["param",{"_index":494,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["param('codigo",{"_index":553,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["param('codigoresultados",{"_index":606,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["param('id",{"_index":541,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["param('preguntaid",{"_index":953,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["param('tokenparticipacion",{"_index":1240,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["param('tokenvisualizacion",{"_index":1243,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["parameters",{"_index":393,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["params",{"_index":546,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["parseada",{"_index":838,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["parseintpipe",{"_index":499,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["part",{"_index":1533,"title":{},"body":{"index.html":{}}}],["participación",{"_index":429,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["participación'})@apiparam({name",{"_index":462,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["participación.'})@apiparam({name",{"_index":1191,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["participar",{"_index":258,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["participar.'})@apiparam({name",{"_index":1179,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["parámetro",{"_index":542,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["parámetros",{"_index":544,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["password",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["pasándole",{"_index":1049,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch",{"_index":495,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["patch(':id",{"_index":1037,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch(':id/habilitar",{"_index":391,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["permite",{"_index":358,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["permitido",{"_index":303,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Pregunta.html":{}}}],["permitidos",{"_index":298,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["permitiendo",{"_index":355,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["permitir",{"_index":1001,"title":{},"body":{"entities/Pregunta.html":{}}}],["personalizada",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["personalizado",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["pertenece",{"_index":912,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["petición",{"_index":1048,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["pg",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1488,"title":{},"body":{"index.html":{}}}],["please",{"_index":1516,"title":{},"body":{"index.html":{}}}],["pm2",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["poder",{"_index":1236,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["por",{"_index":365,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["port",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["posición",{"_index":287,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["possible",{"_index":1480,"title":{},"body":{"index.html":{}}}],["post",{"_index":496,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion",{"_index":1238,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion')@httpcode(httpstatus.created)@apioperation({summary",{"_index":1188,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post()@apioperation({summary",{"_index":397,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["postgres",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":378,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["pregunta",{"_index":46,"title":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["pregunta.dto",{"_index":219,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["pregunta.dto.ts",{"_index":7,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["pregunta.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.dto.ts:20",{"_index":289,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:25",{"_index":293,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:30",{"_index":296,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:37",{"_index":292,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:8",{"_index":19,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.encuesta",{"_index":332,"title":{},"body":{"entities/Encuesta.html":{}}}],["pregunta.entity",{"_index":344,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{}}}],["pregunta.id",{"_index":561,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.numero",{"_index":562,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones",{"_index":565,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.foreach((opcion",{"_index":873,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones.length",{"_index":592,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.map((opcion",{"_index":566,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.sort((a",{"_index":843,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones?.length",{"_index":702,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones[0].id",{"_index":594,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["pregunta.pregunta",{"_index":870,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.respuestas.foreach((textorespuesta",{"_index":868,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.texto",{"_index":563,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.tipo",{"_index":564,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas",{"_index":1342,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.id",{"_index":1343,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.numero",{"_index":1344,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones",{"_index":1349,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones.push",{"_index":1359,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.respuestas_abiertas",{"_index":1350,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.texto",{"_index":1345,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.tipo",{"_index":1346,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestasdto",{"_index":922,"title":{"classes/PreguntaConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["preguntaid",{"_index":941,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["preguntaopcion",{"_index":764,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["preguntarepo",{"_index":1065,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["preguntarepository",{"_index":972,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"modules/OpcionesModule.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["preguntas.opciones",{"_index":797,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas/:preguntaid/opciones",{"_index":933,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["preguntas/controllers/preguntas.controller",{"_index":1058,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntas/services/preguntas.service",{"_index":1057,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntascontroller",{"_index":1031,"title":{"controllers/PreguntasController.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"coverage.html":{}}}],["preguntasfaltantes",{"_index":1301,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.length",{"_index":1305,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.map((p",{"_index":1306,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasmodule",{"_index":81,"title":{"modules/PreguntasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PreguntasModule.html":{},"modules.html":{},"overview.html":{}}}],["preguntasobligatorias.filter",{"_index":1302,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasrespondidas.includes(p.id",{"_index":1304,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasservice",{"_index":1041,"title":{"injectables/PreguntasService.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"coverage.html":{},"overview.html":{}}}],["primaria",{"_index":352,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["primarygeneratedcolumn",{"_index":328,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["primero",{"_index":445,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["principal",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["private",{"_index":523,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["probar",{"_index":1226,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["problemas",{"_index":449,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["procesamos",{"_index":811,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["procesar",{"_index":802,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["process.env.node_env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["producción",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progressive",{"_index":1443,"title":{},"body":{"index.html":{}}}],["project",{"_index":1453,"title":{},"body":{"index.html":{}}}],["promise",{"_index":395,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"properties.html":{}}}],["propiedad",{"_index":53,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["propiedades",{"_index":31,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["proporciona",{"_index":1293,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["proporcionado",{"_index":490,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["proporcionaron",{"_index":1289,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["provee",{"_index":961,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["proveedores",{"_index":640,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["pueda",{"_index":643,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["puede",{"_index":433,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["puerto",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{}}}],["qr",{"_index":248,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["qr'})@apiresponse({status",{"_index":404,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["qrcode",{"_index":682,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["qrcode.todataurl(texto",{"_index":750,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["qu",{"_index":453,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta-1.html":{}}}],["que",{"_index":51,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["query",{"_index":497,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["query('codigo",{"_index":597,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["query.addorderby('preguntaopcion.numero",{"_index":776,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigorespuesta",{"_index":770,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigoresultados",{"_index":772,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.getone",{"_index":778,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.orderby('pregunta.numero",{"_index":774,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["questions",{"_index":1514,"title":{},"body":{"index.html":{}}}],["quiera",{"_index":1223,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["quotes",{"_index":882,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r",{"_index":1353,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r.id_pregunta",{"_index":1298,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r.respuestasabiertas",{"_index":806,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.respuestasopciones",{"_index":816,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.texto",{"_index":1354,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r\\n",{"_index":886,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ra",{"_index":1122,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.id_pregunta",{"_index":808,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ra.respuesta",{"_index":1123,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.texto",{"_index":810,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["read",{"_index":1556,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":524,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["ready",{"_index":1471,"title":{},"body":{"index.html":{}}}],["real",{"_index":1529,"title":{},"body":{"index.html":{}}}],["rechazar",{"_index":784,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["recibido",{"_index":1107,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["recopiladas",{"_index":482,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["recorre",{"_index":863,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["recuperar",{"_index":1214,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["reemplaza",{"_index":537,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["referencia",{"_index":911,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["reflect",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["registarrespuestasdto",{"_index":1264,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas",{"_index":1286,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas.length",{"_index":1287,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registra",{"_index":1267,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registradas",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrar",{"_index":1189,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestas",{"_index":1174,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrarrespuestas(codigoparticipacion",{"_index":1263,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registrarrespuestas(id",{"_index":1187,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestasdto",{"_index":1081,"title":{"classes/RegistrarRespuestasDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["registro",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["registros",{"_index":1003,"title":{},"body":{"entities/Pregunta.html":{}}}],["reglas",{"_index":1109,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["relaciona",{"_index":1156,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["relacionada",{"_index":343,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["relacionadas",{"_index":360,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["relación",{"_index":361,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["relations",{"_index":796,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["relevantes",{"_index":730,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["repositorio",{"_index":676,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["repositorios",{"_index":674,"title":{},"body":{"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["repository",{"_index":655,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"index.html":{}}}],["representa",{"_index":285,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"modules/EncuestasModule.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["requerida",{"_index":1317,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["requerido",{"_index":598,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["requiere",{"_index":1190,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["required",{"_index":268,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["requiring",{"_index":1496,"title":{},"body":{"index.html":{}}}],["res",{"_index":413,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.send(csv",{"_index":621,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.setheader",{"_index":616,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["res.setheader('content",{"_index":614,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["reset",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["resources",{"_index":1508,"title":{},"body":{"index.html":{}}}],["responde",{"_index":1217,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["responder",{"_index":586,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["responder'})@apiparam({name",{"_index":468,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respondidas",{"_index":1300,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["response",{"_index":414,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["response.dto",{"_index":514,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["response.dto.ts",{"_index":250,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":262,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:14",{"_index":264,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:17",{"_index":265,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:20",{"_index":263,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:23",{"_index":257,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:31",{"_index":272,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:5",{"_index":274,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:8",{"_index":259,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.ok",{"_index":738,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.statustext",{"_index":742,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.text",{"_index":744,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuesta",{"_index":41,"title":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["respuesta.encuesta",{"_index":335,"title":{},"body":{"entities/Encuesta.html":{}}}],["respuesta.entity",{"_index":1152,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["respuesta.enum",{"_index":35,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuesta.enum.ts",{"_index":1434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respuestaabierta",{"_index":1121,"title":{"entities/RespuestaAbierta.html":{}},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaabierta.respuesta",{"_index":1137,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaabiertarepository",{"_index":1258,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada",{"_index":1310,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada.id",{"_index":1319,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaopcion",{"_index":907,"title":{"entities/RespuestaOpcion.html":{}},"body":{"entities/Opcion.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaopcion.respuesta",{"_index":1139,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaopciones",{"_index":1254,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["respuestaopcionrepository",{"_index":1259,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta",{"_index":1312,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.id_pregunta",{"_index":1314,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones",{"_index":1321,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones.length",{"_index":1322,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones[0",{"_index":1326,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.texto",{"_index":1316,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.tipo",{"_index":1315,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapreguntadto",{"_index":1084,"title":{"classes/RespuestaPreguntaDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestarepository",{"_index":656,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["respuestas",{"_index":309,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dto",{"_index":1219,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dto.ts",{"_index":1083,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestas.dto.ts:23",{"_index":1165,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:28",{"_index":1170,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:36",{"_index":1168,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:42",{"_index":1167,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:55",{"_index":1087,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["respuestas.dtos",{"_index":517,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dtos.ts",{"_index":915,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["respuestas.dtos.ts:13",{"_index":1026,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:14",{"_index":1027,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:15",{"_index":1029,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:16",{"_index":1030,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:17",{"_index":1028,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:18",{"_index":1025,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:26",{"_index":918,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:27",{"_index":920,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:28",{"_index":919,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:29",{"_index":917,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:4",{"_index":1369,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:5",{"_index":1370,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:6",{"_index":1366,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:7",{"_index":1367,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:8",{"_index":1368,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:9",{"_index":1371,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.respuestasabiertas",{"_index":798,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones",{"_index":799,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones.opcion",{"_index":800,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas/dtos/visualizar",{"_index":516,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas/entities/respuesta",{"_index":1129,"title":{},"body":{"entities/Respuesta.html":{}}}],["respuestas/entities/respuesta.entity",{"_index":345,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["respuestas/respuestas.module",{"_index":634,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["respuestas/services/respuestas.service",{"_index":506,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas_abiertas",{"_index":924,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestasabiertas",{"_index":1115,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["respuestasabiertas.map",{"_index":1352,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestascontroller",{"_index":1171,"title":{"controllers/RespuestasController.html":{}},"body":{"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"coverage.html":{}}}],["respuestasmodule",{"_index":82,"title":{"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["respuestasopciones",{"_index":1116,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["respuestasservice",{"_index":505,"title":{"injectables/RespuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["respuestastexto",{"_index":803,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultado",{"_index":581,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["resultado.preguntas.push(preguntaconrespuestas",{"_index":1360,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["resultados",{"_index":261,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"miscellaneous/enumerations.html":{}}}],["resultados)'})@apiparam({name",{"_index":430,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["resultados.resultados.foreach((pregunta",{"_index":865,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultados.resultados.some",{"_index":862,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultadoscsv",{"_index":653,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultadoscsv(id",{"_index":671,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["results",{"_index":66,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retorna",{"_index":548,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["retornar",{"_index":754,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["return",{"_index":536,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["returns",{"_index":394,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["ro",{"_index":1126,"title":{},"body":{"entities/Respuesta.html":{}}}],["ro.opcion?.id",{"_index":818,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ro.respuesta",{"_index":1127,"title":{},"body":{"entities/Respuesta.html":{}}}],["run",{"_index":1457,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1478,"title":{},"body":{"index.html":{}}}],["rutas",{"_index":521,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["rxjs",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["sabe",{"_index":452,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["scalable",{"_index":1447,"title":{},"body":{"index.html":{}}}],["se",{"_index":451,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["sea",{"_index":59,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["según",{"_index":238,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccion",{"_index":1332,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["seleccionable",{"_index":1097,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionables",{"_index":1099,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionada",{"_index":1155,"title":{},"body":{"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["seleccionadas",{"_index":1103,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["seleccionar",{"_index":1323,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["select",{"_index":1337,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["ser",{"_index":434,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["serialización",{"_index":348,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["serializar",{"_index":364,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["server",{"_index":1448,"title":{},"body":{"index.html":{}}}],["services/encuestas.service",{"_index":504,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{}}}],["services/opciones.service",{"_index":949,"title":{},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{}}}],["services/preguntas.service",{"_index":1042,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["services/respuestas.service",{"_index":1216,"title":{},"body":{"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["servicio",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["servicios",{"_index":526,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["setup",{"_index":1454,"title":{},"body":{"index.html":{}}}],["shortid",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["si",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta-1.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["side",{"_index":1449,"title":{},"body":{"index.html":{}}}],["similar",{"_index":813,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["simple",{"_index":1498,"title":{},"body":{"index.html":{}}}],["sincronizar",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["sobre",{"_index":1341,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["sola",{"_index":1096,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["solo",{"_index":460,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["son",{"_index":1284,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"index.html":{}}}],["sponsors",{"_index":1551,"title":{},"body":{"index.html":{}}}],["src/.../codigo",{"_index":1431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tipos",{"_index":1433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":1376,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts",{"_index":377,"title":{},"body":{"controllers/EncuestasController.html":{},"coverage.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:106",{"_index":464,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:162",{"_index":441,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:249",{"_index":487,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:266",{"_index":469,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:331",{"_index":478,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:342",{"_index":392,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:351",{"_index":416,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:53",{"_index":411,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:75",{"_index":420,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/dtos/actualizar",{"_index":6,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/create",{"_index":183,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/obtener",{"_index":888,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/encuestas.module.ts",{"_index":627,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["src/modules/encuestas/entities/encuesta.entity",{"_index":1276,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts",{"_index":306,"title":{},"body":{"entities/Encuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:13",{"_index":329,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:16",{"_index":330,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:23",{"_index":321,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:27",{"_index":334,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:30",{"_index":313,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:34",{"_index":316,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:38",{"_index":327,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:42",{"_index":324,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:45",{"_index":336,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/opcion.entity",{"_index":1278,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts",{"_index":898,"title":{},"body":{"entities/Opcion.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:19",{"_index":899,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:22",{"_index":904,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:25",{"_index":900,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:30",{"_index":903,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/pregunta.entity",{"_index":1277,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts",{"_index":990,"title":{},"body":{"entities/Pregunta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:22",{"_index":993,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:25",{"_index":994,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:28",{"_index":997,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:37",{"_index":999,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:42",{"_index":992,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:45",{"_index":996,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts",{"_index":1112,"title":{},"body":{"entities/Respuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:21",{"_index":1118,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:25",{"_index":1120,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:33",{"_index":1117,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:40",{"_index":1124,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:47",{"_index":1128,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/enums/codigo",{"_index":1435,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/enums/tipos",{"_index":921,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts",{"_index":648,"title":{},"body":{"injectables/EncuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:117",{"_index":665,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:138",{"_index":663,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:152",{"_index":667,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:207",{"_index":670,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:25",{"_index":657,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:285",{"_index":660,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:308",{"_index":669,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:36",{"_index":661,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:368",{"_index":672,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts",{"_index":932,"title":{},"body":{"controllers/OpcionesController.html":{},"coverage.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:30",{"_index":940,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:43",{"_index":945,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/opciones.module.ts",{"_index":958,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["src/modules/opciones/services/opciones.service.ts",{"_index":970,"title":{},"body":{"injectables/OpcionesService.html":{},"coverage.html":{}}}],["src/modules/opciones/services/opciones.service.ts:26",{"_index":975,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:60",{"_index":977,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:9",{"_index":973,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts",{"_index":1032,"title":{},"body":{"controllers/PreguntasController.html":{},"coverage.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:20",{"_index":1038,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:29",{"_index":1040,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts",{"_index":1007,"title":{},"body":{"entities/Pregunta-1.html":{},"coverage.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:19",{"_index":1011,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:23",{"_index":1013,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:27",{"_index":1016,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:38",{"_index":1019,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:45",{"_index":1010,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:52",{"_index":1014,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/enums/tipos",{"_index":1437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/preguntas/preguntas.module.ts",{"_index":1056,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts",{"_index":1060,"title":{},"body":{"injectables/PreguntasService.html":{},"coverage.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:15",{"_index":1064,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:26",{"_index":1068,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:40",{"_index":1071,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts",{"_index":1172,"title":{},"body":{"controllers/RespuestasController.html":{},"coverage.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:113",{"_index":1201,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:153",{"_index":1184,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:72",{"_index":1195,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/dtos/registrar",{"_index":1082,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/dtos/visualizar",{"_index":914,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta",{"_index":908,"title":{},"body":{"entities/Opcion.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity",{"_index":1275,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts",{"_index":1132,"title":{},"body":{"entities/Respuesta-1.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:21",{"_index":1135,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:25",{"_index":1136,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:33",{"_index":1134,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:43",{"_index":1138,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:53",{"_index":1140,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/respuestas.module.ts",{"_index":1250,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts",{"_index":1256,"title":{},"body":{"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:21",{"_index":1260,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:242",{"_index":1271,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:319",{"_index":1262,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:45",{"_index":1266,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["start",{"_index":1459,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1462,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1463,"title":{},"body":{"index.html":{}}}],["started",{"_index":1441,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1452,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":528,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["stay",{"_index":1536,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1475,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1494,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["su",{"_index":461,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{}}}],["summary",{"_index":527,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["support",{"_index":1515,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sus",{"_index":400,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["svg",{"_index":1568,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":204,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["switch",{"_index":768,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["synchronize",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["tabla",{"_index":354,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["table",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1476,"title":{},"body":{"index.html":{}}}],["temporalmente",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["tener",{"_index":701,"title":{},"body":{"injectables/EncuestasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["tenga",{"_index":231,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/EncuestasService.html":{}}}],["test",{"_index":1466,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1469,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1468,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1464,"title":{},"body":{"index.html":{}}}],["text",{"_index":1149,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["text/csv",{"_index":615,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["texto",{"_index":11,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["textorespuesta",{"_index":871,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["thanks",{"_index":1550,"title":{},"body":{"index.html":{}}}],["this.configservice.get",{"_index":718,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.configservice.get('global_prefix",{"_index":721,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository",{"_index":758,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.create",{"_index":705,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.findone",{"_index":795,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["this.encuestarepository.save(encuesta",{"_index":712,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestasservice.actualizarestadoencuesta(id",{"_index":601,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.crearencuesta(dto",{"_index":531,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarcodigoqr(enlacecorto",{"_index":535,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarenlacecorto",{"_index":533,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuesta",{"_index":549,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuestaporcodigo",{"_index":554,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerresultados(id",{"_index":599,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.resultadoscsv(id",{"_index":612,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.generarcodigoqr(enlacecorto",{"_index":729,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.generarenlacecorto(enlaceparticipacion",{"_index":728,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.obtenerresultados(id",{"_index":854,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.opciones",{"_index":925,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.opcionesservice.crearopcion(preguntaid",{"_index":954,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionesservice.eliminaropcion(id",{"_index":955,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionrepo.delete",{"_index":1079,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.opcionrepository.create",{"_index":983,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.delete(id",{"_index":988,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.find",{"_index":1336,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findone",{"_index":1325,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findoneby",{"_index":986,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.save(opcion",{"_index":985,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntarepo.delete(idpregunta",{"_index":1080,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findone",{"_index":1077,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findoneby",{"_index":1072,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.save(pregunta",{"_index":1075,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepository.findone",{"_index":1313,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.preguntarepository.findoneby",{"_index":980,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntasservice.actualizarpregunta(id",{"_index":1051,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.preguntasservice.eliminarpreguntaconopciones(id",{"_index":1053,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.respuestaabiertarepository.create",{"_index":1318,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.find",{"_index":1351,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.save(respuestasabiertas",{"_index":1320,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.count",{"_index":1358,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.create",{"_index":1329,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.save(respuestaopcion",{"_index":1330,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.create",{"_index":1309,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.save(respuesta",{"_index":1311,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestas_abiertas",{"_index":926,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.respuestasservice.obtenerencuestaparaparticipacion",{"_index":1246,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.registrarrespuestas",{"_index":1241,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(codigo",{"_index":582,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(tokenvisualizacion",{"_index":1244,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["throw",{"_index":577,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["throws",{"_index":1281,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["tiene",{"_index":454,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["til",{"_index":447,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["time",{"_index":271,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"index.html":{}}}],["timestamp",{"_index":318,"title":{},"body":{"entities/Encuesta.html":{}}}],["timestamptz",{"_index":323,"title":{},"body":{"entities/Encuesta.html":{}}}],["tinyurl",{"_index":741,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["tipo",{"_index":12,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["tipo.enum",{"_index":513,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["tipo.enum.ts",{"_index":1432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tipo_codigo",{"_index":574,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["tipo_respuesta",{"_index":1018,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["tipos",{"_index":39,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["tiposrespuestaenum",{"_index":20,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["tiposrespuestaenum.abierta",{"_index":589,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.opcion_multiple_seleccion_simple",{"_index":1331,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.verdadero_falso",{"_index":694,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum})@isenum(tiposrespuestaenum)@isnotempty",{"_index":295,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["toda",{"_index":1274,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["todas",{"_index":481,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["token",{"_index":1182,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["tokenparticipacion",{"_index":1177,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["tokenvisualizacion",{"_index":1199,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["toma",{"_index":709,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["toques",{"_index":1442,"title":{},"body":{"index.html":{}}}],["totalrespuestas",{"_index":820,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["touch",{"_index":1558,"title":{},"body":{"index.html":{}}}],["trabajar",{"_index":635,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["transfer",{"_index":222,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["transforma",{"_index":239,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["transformado",{"_index":1111,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["transformar",{"_index":207,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{}}}],["transformer",{"_index":205,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["tres",{"_index":1093,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["true",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["true})@apibody({type",{"_index":1192,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["true})@apiparam({name",{"_index":1181,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["true})@apiresponse({status",{"_index":437,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["true})@exclude",{"_index":315,"title":{},"body":{"entities/Encuesta.html":{}}}],["true})@type(undefined",{"_index":199,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["true})@type(undefined)@isnotempty",{"_index":1086,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["try",{"_index":573,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["twitter",{"_index":1564,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["typeorm",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature",{"_index":1255,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature([encuesta",{"_index":636,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["typeormmodule.forfeature([opcion",{"_index":965,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["typeormmodule.forfeature([pregunta",{"_index":1059,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["typeormmodule.forrootasync",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":850,"title":{},"body":{"injectables/EncuestasService.html":{},"index.html":{}}}],["ufeff",{"_index":887,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["un",{"_index":64,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["una",{"_index":45,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["undefined",{"_index":290,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["undefined})@isarray()@arraynotempty()@arrayminsize(1)@validatenested({each",{"_index":198,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["une",{"_index":762,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unit",{"_index":1465,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":751,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unlicensed",{"_index":1576,"title":{},"body":{"properties.html":{}}}],["uno",{"_index":300,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["unsafe",{"_index":852,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["updatedto",{"_index":1067,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["updates",{"_index":1538,"title":{},"body":{"index.html":{}}}],["url",{"_index":543,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["usa",{"_index":1108,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["usamos",{"_index":713,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["usando",{"_index":459,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["usar",{"_index":833,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["usefactory",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["username",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":1530,"title":{},"body":{"index.html":{}}}],["uso",{"_index":609,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/OpcionesModule.html":{}}}],["usuario",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["utilidad",{"_index":206,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["utilidades",{"_index":339,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/RespuestaAbierta.html":{}}}],["utilizado",{"_index":644,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["utilizando",{"_index":489,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{}}}],["uuid",{"_index":432,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["uuids",{"_index":678,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v1",{"_index":723,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v4",{"_index":679,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacía",{"_index":755,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacío",{"_index":227,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["valida",{"_index":56,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{}}}],["validaciones",{"_index":28,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["validación",{"_index":783,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["validado",{"_index":1091,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["validadores",{"_index":217,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["validando",{"_index":845,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["validar",{"_index":208,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["validatenested",{"_index":216,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["valor",{"_index":58,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["valores",{"_index":301,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["value",{"_index":1436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["variables",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["varias",{"_index":1125,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["veces",{"_index":928,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["vencida",{"_index":463,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["vencido",{"_index":1297,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["vencimiento",{"_index":267,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["ver",{"_index":1224,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["verdadero",{"_index":696,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["verdadero/falso",{"_index":1328,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["verdadero_falso",{"_index":693,"title":{},"body":{"injectables/EncuestasService.html":{},"entities/Pregunta-1.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["verificar",{"_index":794,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["version",{"_index":1574,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":538,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["video",{"_index":1523,"title":{},"body":{"index.html":{}}}],["vinculada",{"_index":1308,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visit",{"_index":1512,"title":{},"body":{"index.html":{}}}],["visualización",{"_index":484,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["visualización'})@apiparam({name",{"_index":483,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["visualización.'})@apiparam({name",{"_index":1198,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizamos",{"_index":1364,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizar",{"_index":260,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["visualizarlas",{"_index":1272,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestas",{"_index":1175,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestas(tokenvisualizacion",{"_index":1196,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestasdto",{"_index":515,"title":{"classes/VisualizarRespuestasDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["visualizarrespuestasdto(codigovisualizacion",{"_index":1270,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestasdto})@apiresponse({status",{"_index":486,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["visualize",{"_index":1526,"title":{},"body":{"index.html":{}}}],["válida",{"_index":1327,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["válido",{"_index":65,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["válidos",{"_index":42,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["watch",{"_index":1460,"title":{},"body":{"index.html":{}}}],["website",{"_index":1562,"title":{},"body":{"index.html":{}}}],["where('encuesta.id",{"_index":765,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["wherecondition",{"_index":834,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["wherecondition.id",{"_index":1295,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["working",{"_index":1511,"title":{},"body":{"index.html":{}}}],["x",{"_index":1540,"title":{},"body":{"index.html":{}}}],["xito",{"_index":584,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["xyz789uvw012",{"_index":485,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["y",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["ya",{"_index":47,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["yes",{"_index":1268,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["you'd",{"_index":1554,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1470,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActualizarPreguntaDto.html":{"url":"classes/ActualizarPreguntaDto.html","title":"class - ActualizarPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActualizarPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(TiposRespuestaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, IsEnum } from 'class-validator'; // Validaciones para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enum con los tipos de respuesta válidos\n\n// Clase DTO para actualizar una pregunta ya creada\nexport class ActualizarPreguntaDto {\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsString() // Valida que el valor sea una cadena de texto\n  texto?: string; // Nuevo texto de la pregunta\n\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsEnum(TiposRespuestaEnum) // Valida que sea un valor válido del enum TiposRespuestaEnum\n  tipo?: TiposRespuestaEnum; // Nuevo tipo de respuesta para la pregunta\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EncuestasModule\n                        \n                        \n                            OpcionesModule\n                        \n                        \n                            PreguntasModule\n                        \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'; // Decorador para definir un módulo en NestJS\nimport { ConfigModule, ConfigService } from '@nestjs/config'; // Módulo y servicio para manejar configuraciones\nimport configuration from './config/configuration'; // Archivo de configuración personalizado\nimport { EncuestasModule } from './modules/encuestas/encuestas.module'; // Módulo de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo para la integración con TypeORM\nimport { PreguntasModule } from './modules/preguntas/preguntas.module';\nimport { RespuestasModule } from './modules/respuestas/respuestas.module';\nimport { OpcionesModule } from './modules/opciones/opciones.module';\n\n@Module({\n  imports: [\n    // Importa el módulo de encuestas y preguntas\n    EncuestasModule,\n    PreguntasModule,\n    RespuestasModule,\n    OpcionesModule,\n    // Configuración global del módulo de configuración\n    ConfigModule.forRoot({\n      load: [configuration], // Carga la configuración personalizada desde un archivo\n      isGlobal: true, // Hace que el módulo de configuración sea accesible globalmente\n      ignoreEnvFile: process.env.NODE_ENV === 'production', // Ignora el archivo .env si el entorno es producción\n    }),\n\n    // Configuración de TypeORM para la conexión con la base de datos\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Importa el módulo de configuración para acceder a las variables de entorno\n      inject: [ConfigService], // Inyecta el servicio de configuración\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres', // Tipo de base de datos (PostgreSQL)\n        host: configService.get('database.host'), // Host de la base de datos\n        port: configService.get('database.port'), // Puerto de la base de datos\n        username: configService.get('database.username'), // Usuario de la base de datos\n        password: configService.get('database.password'), // Contraseña de la base de datos\n        database: configService.get('database.name'), // Nombre de la base de datos\n        synchronize: true, // Temporalmente habilitado para sincronizar la estructura de la base de datos\n        autoLoadEntities: true, // Carga automáticamente las entidades registradas\n        logging: configService.get('database.logging'), // Habilita o deshabilita el registro de consultas\n        logger: configService.get('database.logger'), // Define el tipo de logger para la base de datos\n      }),\n    }),\n  ],\n})\nexport class AppModule {} // Exporta la clase del módulo principal\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaDto.html":{"url":"classes/CreateEncuestaDto.html","title":"class - CreateEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                codigoQR\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                enlaceCorto\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                    \n                                    \n                                nombre\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()@ArrayNotEmpty()@ArrayMinSize(1)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport {\n  ArrayMinSize,\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CreatePreguntaDto } from './create-pregunta.dto'; // DTO para las preguntas de la encuesta\n\n// Clase DTO (Data Transfer Object) para crear una encuesta\nexport class CreateEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"nombre\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  nombre: string; // Nombre de la encuesta\n\n  @ApiProperty({ type: [CreatePreguntaDto] }) // Documenta la propiedad \"preguntas\" en Swagger como un arreglo de CreatePreguntaDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @ArrayNotEmpty() // Valida que el arreglo no esté vacío\n  @ArrayMinSize(1) // Valida que el arreglo tenga al menos un elemento\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreatePreguntaDto\n  @Type(() => CreatePreguntaDto) // Transforma cada elemento del arreglo en una instancia de CreatePreguntaDto\n  preguntas: CreatePreguntaDto[]; // Lista de preguntas asociadas a la encuesta\n\n  @IsOptional()\n  @IsDateString()\n  fechaVencimiento?: Date;\n\n  //Propiedad para el enlace corto\n  @ApiProperty()\n  @IsString()\n  enlaceCorto?: string; // generado automaticamente\n\n  // Propiedad para el código QR\n  @ApiProperty()\n  @IsString()\n  codigoQR?: string; // generado automáticamente\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaResponseDto.html":{"url":"classes/CreateEncuestaResponseDto.html","title":"class - CreateEncuestaResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoQR\n                            \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                enlaceCorto\n                            \n                            \n                                    \n                                enlaceParticipacion\n                            \n                            \n                                    \n                                enlaceVisualizacion\n                            \n                            \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código QR generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace corto generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceParticipacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceVisualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Fecha de vencimiento de la encuesta', required: false, type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID de la encuesta creada'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateEncuestaResponseDto {\n  @ApiProperty({ description: 'ID de la encuesta creada' })\n  id: number;\n\n  @ApiProperty({ description: 'Código para participar en la encuesta' })\n  codigoRespuesta: string;\n\n  @ApiProperty({ description: 'Código para visualizar resultados' })\n  codigoResultados: string;\n\n  @ApiProperty({ description: 'Enlace para participar en la encuesta' })\n  enlaceParticipacion: string;\n\n  @ApiProperty({ description: 'Enlace para visualizar resultados' })\n  enlaceVisualizacion: string;\n\n  @ApiProperty({ description: 'Enlace corto generado automáticamente' })\n  enlaceCorto: string;\n\n  @ApiProperty({ description: 'Código QR generado automáticamente' })\n  codigoQR: string;\n\n  @ApiProperty({\n    description: 'Fecha de vencimiento de la encuesta',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  fechaVencimiento?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOpcionDto.html":{"url":"classes/CreateOpcionDto.html","title":"class - CreateOpcionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOpcionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-opcion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator'; // Validadores para las propiedades del DTO\n\n// Clase DTO (Data Transfer Object) para crear una opción\nexport class CreateOpcionDto {\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la opción\n\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la opción\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePreguntaDto.html":{"url":"classes/CreatePreguntaDto.html","title":"class - CreatePreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                opciones\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateOpcionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: false})@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: TiposRespuestaEnum})@IsEnum(TiposRespuestaEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport {\n  IsArray,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enumerador para los tipos de respuesta permitidos\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport { CreateOpcionDto } from './create-opcion.dto'; // DTO para las opciones de una pregunta\n\n// Clase DTO (Data Transfer Object) para crear una pregunta\nexport class CreatePreguntaDto {\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la pregunta\n\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la pregunta\n\n  @ApiProperty({ enum: TiposRespuestaEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(TiposRespuestaEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: TiposRespuestaEnum; // Tipo de respuesta permitido para la pregunta\n\n  @ApiProperty({ type: [CreateOpcionDto], required: false }) // Documenta la propiedad \"opciones\" en Swagger como un arreglo de CreateOpcionDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @IsOptional() // Valida que esta propiedad sea opcional\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreateOpcionDto\n  @Type(() => CreateOpcionDto) // Transforma cada elemento del arreglo en una instancia de CreateOpcionDto\n  opciones: CreateOpcionDto[]; // Opciones asociadas a la pregunta (opcional)\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Encuesta.html":{"url":"entities/Encuesta.html","title":"entity - Encuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Encuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/encuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                fechaActualizacion\n                            \n                            \n                                    \n                                    Optional\n                                fechaVencimiento\n                            \n                            \n                                    \n                                habilitada\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                nombre\n                            \n                            \n                                    \n                                preguntas\n                            \n                            \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_respuesta', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_resultados', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fechaActualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fechaVencimiento\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'fecha_vencimiento', type: 'timestamptz', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        habilitada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Pregunta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, pregunta => pregunta.encuesta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Respuesta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuesta => respuesta.encuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n// Importación de la entidad relacionada \"Respuesta\"\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n\n@Entity({ name: 'encuestas' }) // Define la clase como una entidad de la base de datos con el nombre \"encuestas\"\nexport class Encuesta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"nombre\" en la tabla, permitiendo valores nulos temporalmente\n  nombre: string;\n\n  @Column({\n    nullable: true,\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  fechaActualizacion: Date;\n  @OneToMany(() => Pregunta, (pregunta) => pregunta.encuesta, {\n    cascade: ['insert'], // Permite insertar automáticamente las preguntas relacionadas\n  })\n  preguntas: Pregunta[]; // Relación uno a muchos con la entidad \"Pregunta\"\n\n  @Column({ name: 'codigo_respuesta', nullable: true }) // Define la columna \"codigo_respuesta\" en la tabla, permitiendo valores nulos temporalmente\n  codigoRespuesta: string;\n\n  @Column({ name: 'codigo_resultados', nullable: true }) // Define la columna \"codigo_resultados\" en la tabla, permitiendo valores nulos temporalmente\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  codigoResultados: string;\n\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  @Column({ default: true })\n  habilitada: boolean; // Columna que indica si la encuesta está habilitada o no\n\n  // Funcionalidad extra (MAIA): Fecha de vencimiento\n  @Column({ name: 'fecha_vencimiento', type: 'timestamptz', nullable: true })\n  fechaVencimiento?: Date;\n\n  @OneToMany(() => Respuesta, (respuesta) => respuesta.encuesta)\n  respuestas: Respuesta[]; // Relación uno a muchos con la entidad \"Respuesta\"\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EncuestasController.html":{"url":"controllers/EncuestasController.html","title":"controller - EncuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EncuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/controllers/encuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                encuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                cambiarEstadoEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    \n                                    Async\n                                exportarResultadosCSV\n                            \n                            \n                                    \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaDebug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipar\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEstructuraEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerResultados\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerResultadosEncuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cambiarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    cambiarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/habilitar')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:342\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Crear una nueva encuesta', description: 'Crea una encuesta con sus preguntas y opciones, generando enlaces y códigos QR'})@ApiResponse({status: 201, description: 'Encuesta creada exitosamente', type: CreateEncuestaResponseDto})@ApiResponse({status: 400, description: 'Datos de encuesta inválidos o incompletos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        exportarResultadosCSV\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportarResultadosCSV(id: number, codigoResultados: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/csv/:codigoResultados')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:351\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, dto: ObtenerEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ObtenerEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaDebug\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaDebug(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('debug/:codigo')@ApiOperation({summary: 'Obtener información detallada de la encuesta para depuración', description: 'Intenta obtener la encuesta con cualquier tipo de código (participación o resultados)'})@ApiParam({name: 'codigo', description: 'Código UUID de la encuesta (puede ser de participación o resultados)', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente'})@ApiResponse({status: 400, description: 'Código de encuesta no válido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtiene información detallada de la encuesta para depuración\nEste endpoint intenta obtener la encuesta primero con el código de participación,\ny si falla, intenta con el código de resultados. Es útil para diagnosticar problemas\ncuando no se sabe qué tipo de código se tiene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticipar\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipar(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:codigo')@ApiOperation({summary: 'Obtener encuesta para participación', description: 'Devuelve la estructura completa de una encuesta usando solo su código de participación'})@ApiParam({name: 'codigo', description: 'Código UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente'})@ApiResponse({status: 400, description: 'Código de encuesta no válido o encuesta vencida'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        obtenerEstructuraEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEstructuraEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('estructura/:codigo')@ApiOperation({summary: 'Obtener estructura de la encuesta con IDs para responder'})@ApiParam({name: 'codigo', description: 'Código de participación de la encuesta', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/resultados')@ApiOperation({summary: 'Obtener resultados de una encuesta por ID y código'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiResponse({status: 200, description: 'Resultados obtenidos exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o código inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:331\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerResultadosEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultadosEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:codigo')@ApiOperation({summary: 'Obtener resultados de una encuesta', description: 'Devuelve todas las respuestas recopiladas para una encuesta usando su código de visualización'})@ApiParam({name: 'codigo', description: 'Código UUID de visualización de resultados', example: 'xyz789uvw012', required: true})@ApiResponse({status: 200, description: 'Resultados obtenidos exitosamente', type: VisualizarRespuestasDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o código inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:249\n                        \n                    \n\n\n            \n                \n                        Obtiene los resultados de una encuesta usando su código de visualización\nEste endpoint permite consultar todas las respuestas recopiladas para una encuesta\nutilizando el código de visualización proporcionado al crear la encuesta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Res,\n  BadRequestException,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { ApiOperation, ApiParam, ApiResponse } from '@nestjs/swagger';\n// Importación del servicio de encuestas\nimport { EncuestasService } from '../services/encuestas.service';\n// Importación del servicio de respuestas\nimport { RespuestasService } from '../../respuestas/services/respuestas.service';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación del DTO para obtener encuestas\nimport { ObtenerEncuestaDto } from '../dtos/obtener-encuesta.dto';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { CreateEncuestaResponseDto } from '../dtos/create-encuesta-response.dto';\nimport { VisualizarRespuestasDto } from '../../respuestas/dtos/visualizar-respuestas.dtos';\n\nimport { Response } from 'express';\n\n@Controller('encuestas') // Define el controlador para manejar las rutas relacionadas con \"encuestas\"\nexport class EncuestasController {\n  constructor(\n    private readonly encuestasService: EncuestasService,\n    private readonly respuestasService: RespuestasService,\n  ) {} // Inyección de los servicios\n  @Post()\n  @ApiOperation({\n    summary: 'Crear una nueva encuesta',\n    description:\n      'Crea una encuesta con sus preguntas y opciones, generando enlaces y códigos QR',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Encuesta creada exitosamente',\n    type: CreateEncuestaResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de encuesta inválidos o incompletos',\n  })\n  async crearEncuesta(\n    @Body() dto: CreateEncuestaDto,\n  ): Promise {\n    // Crea la encuesta utilizando el servicio\n    const encuesta = await this.encuestasService.crearEncuesta(dto);\n\n    // Generar enlace corto\n    const enlaceCorto = await this.encuestasService.generarEnlaceCorto(\n      encuesta.enlaceParticipacion,\n    );\n\n    // Generar código QR\n    const codigoQR = await this.encuestasService.generarCodigoQR(enlaceCorto);\n\n    return {\n      ...encuesta,\n      enlaceParticipacion: enlaceCorto, // Se reemplaza el enlace con la versión corta\n      codigoQR, // Se añade el código QR\n    };\n  }\n\n  @Get(':id') // Define un endpoint GET para obtener una encuesta por su ID\n  async obtenerEncuesta(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Query() dto: ObtenerEncuestaDto, // Obtiene los parámetros de consulta (query params)\n  ): Promise {\n    // Llama al servicio para obtener la encuesta y la retorna\n    return await this.encuestasService.obtenerEncuesta(\n      id,\n      dto.codigo, // Código de respuesta o resultados\n      dto.tipo, // Tipo de código (respuesta o resultados)\n    );\n  }\n  @Get('participar/:codigo')\n  @ApiOperation({\n    summary: 'Obtener encuesta para participación',\n    description:\n      'Devuelve la estructura completa de una encuesta usando solo su código de participación',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Código de encuesta no válido o encuesta vencida',\n  })\n  async obtenerEncuestaParaParticipar(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    // Transformar la respuesta para incluir explícitamente los IDs\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n    };\n  }\n\n  /**\n   * Obtiene información detallada de la encuesta para depuración\n   *\n   * Este endpoint intenta obtener la encuesta primero con el código de participación,\n   * y si falla, intenta con el código de resultados. Es útil para diagnosticar problemas\n   * cuando no se sabe qué tipo de código se tiene.\n   */\n  @Get('debug/:codigo')\n  @ApiOperation({\n    summary: 'Obtener información detallada de la encuesta para depuración',\n    description:\n      'Intenta obtener la encuesta con cualquier tipo de código (participación o resultados)',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description:\n      'Código UUID de la encuesta (puede ser de participación o resultados)',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Código de encuesta no válido',\n  })\n  async obtenerEncuestaDebug(@Param('codigo') codigo: string): Promise {\n    // Intentar primero con código de respuesta\n    try {\n      const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n        codigo,\n        CodigoTipoEnum.RESPUESTA,\n      );\n\n      // Transformar la respuesta para incluir explícitamente los IDs\n      return {\n        id: encuesta.id,\n        nombre: encuesta.nombre,\n        tipo_codigo: 'PARTICIPACIÓN',\n        preguntas: encuesta.preguntas.map((pregunta) => ({\n          id: pregunta.id,\n          numero: pregunta.numero,\n          texto: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: pregunta.opciones\n            ? pregunta.opciones.map((opcion) => ({\n                id: opcion.id,\n                numero: opcion.numero,\n                texto: opcion.texto,\n              }))\n            : [],\n        })),\n      };\n    } catch {\n      // Si falla, intentar con código de resultados\n      try {\n        const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n          codigo,\n          CodigoTipoEnum.RESULTADOS,\n        );\n\n        // Transformar la respuesta para incluir explícitamente los IDs\n        return {\n          id: encuesta.id,\n          nombre: encuesta.nombre,\n          tipo_codigo: 'RESULTADOS',\n          preguntas: encuesta.preguntas.map((pregunta) => ({\n            id: pregunta.id,\n            numero: pregunta.numero,\n            texto: pregunta.texto,\n            tipo: pregunta.tipo,\n            opciones: pregunta.opciones\n              ? pregunta.opciones.map((opcion) => ({\n                  id: opcion.id,\n                  numero: opcion.numero,\n                  texto: opcion.texto,\n                }))\n              : [],\n          })),\n        };\n      } catch {\n        throw new BadRequestException('Código de encuesta no válido');\n      }\n    }\n  }\n\n  /**\n   * Obtiene los resultados de una encuesta usando su código de visualización\n   *\n   * Este endpoint permite consultar todas las respuestas recopiladas para una encuesta\n   * utilizando el código de visualización proporcionado al crear la encuesta.\n   */\n  @Get('resultados/:codigo')\n  @ApiOperation({\n    summary: 'Obtener resultados de una encuesta',\n    description:\n      'Devuelve todas las respuestas recopiladas para una encuesta usando su código de visualización',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código UUID de visualización de resultados',\n    example: 'xyz789uvw012',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultados obtenidos exitosamente',\n    type: VisualizarRespuestasDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o código inválido',\n  })\n  async obtenerResultadosEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(codigo);\n    return { message: 'Éxito', data: resultado };\n  }\n\n  @Get('estructura/:codigo')\n  @ApiOperation({\n    summary: 'Obtener estructura de la encuesta con IDs para responder',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  async obtenerEstructuraEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n      ejemploRespuesta: {\n        respuestas: encuesta.preguntas.map((pregunta) => {\n          if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              texto: 'Ejemplo de respuesta abierta',\n            };\n          } else {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              opciones:\n                pregunta.opciones && pregunta.opciones.length > 0\n                  ? [pregunta.opciones[0].id]\n                  : [],\n            };\n          }\n        }),\n      },\n    };\n  }\n\n  @Get(':id/resultados')\n  @ApiOperation({\n    summary: 'Obtener resultados de una encuesta por ID y código',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultados obtenidos exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o código inválido',\n  })\n  async obtenerResultados(\n    @Param('id') id: number,\n    @Query('codigo') codigo: string,\n  ): Promise {\n    if (!codigo) {\n      throw new BadRequestException('Código de resultados requerido');\n    }\n    return this.encuestasService.obtenerResultados(id, codigo);\n  }\n\n  @Patch(':id/habilitar')\n  async cambiarEstadoEncuesta(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('habilitada') habilitada: boolean,\n  ): Promise {\n    return await this.encuestasService.actualizarEstadoEncuesta(id, habilitada);\n  }\n\n  // Funcionalidad extra para generar un CSV (Emilia)\n  @Get(':id/csv/:codigoResultados') // Define un endpoint GET para exportar los resultados de una encuesta en formato CSV\n  async exportarResultadosCSV(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Param('codigoResultados') codigoResultados: string, // Obtiene el código único para validar el acceso a los resultados\n    @Res() res: Response, // Uso de Response para enviar el archivo CSV como descarga\n  ) {\n    const csv = await this.encuestasService.resultadosCSV(id, codigoResultados); // Obtiene los resultados en formato CSV desde el servicio\n\n    // Configuración de los encabezados\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader(\n      'Content-Disposition',\n      `attachment; filename=\"resultados_encuesta_${id}.csv\"`,\n    );\n\n    res.send(csv); // Envía el contenido del archivo CSV\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EncuestasModule.html":{"url":"modules/EncuestasModule.html","title":"module - EncuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    EncuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_imports\n\n\n\ncluster_EncuestasModule_providers\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\n\n\nEncuestasModule\n\nEncuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/encuestas/encuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EncuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EncuestasController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { EncuestasController } from './controllers/encuestas.controller'; // Controlador para manejar las rutas relacionadas con encuestas\nimport { EncuestasService } from './services/encuestas.service'; // Servicio para la lógica de negocio de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Encuesta } from './entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from './entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from './entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { Respuesta } from '../respuestas/entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestasModule } from '../respuestas/respuestas.module'; // Importación del módulo de respuestas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Encuesta, Pregunta, Opcion, Respuesta]),\n    RespuestasModule,\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [EncuestasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [EncuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class EncuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncuestasService.html":{"url":"injectables/EncuestasService.html","title":"injectable - EncuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/services/encuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarEstadoEncuesta\n                            \n                            \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    Async\n                                generarCodigoQR\n                            \n                            \n                                    Async\n                                generarEnlaceCorto\n                            \n                            \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    Async\n                                obtenerEncuestaPorCodigo\n                            \n                            \n                                    Async\n                                obtenerResultados\n                            \n                            \n                                    Async\n                                resultadosCSV\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(encuestaRepository: Repository, respuestaRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/encuestas/services/encuestas.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarCodigoQR\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarCodigoQR(texto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                texto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarEnlaceCorto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarEnlaceCorto(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaPorCodigo\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaPorCodigo(codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigoResultados: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resultadosCSV\n                        \n                    \n                \n            \n            \n                \n                        \n                    resultadosCSV(id: number, codigoResultados: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:368\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación de la función para generar UUIDs\nimport { v4 } from 'uuid';\n// Importación del enumerador para los tipos de código\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { NotFoundException } from '@nestjs/common';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\n// Importación de librería para generar QR\nimport * as QRCode from 'qrcode';\n// Importación de papaparse para generar CSV\nimport * as Papa from 'papaparse';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class EncuestasService {\n  constructor(\n    // Inyección del repositorio de la entidad Encuesta\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n    private configService: ConfigService,\n  ) {}\n\n  // Método para crear una nueva encuesta se le agrega codigo de enlace corto y codigoqr\n  async crearEncuesta(dto: CreateEncuestaDto): Promise {\n    for (const pregunta of dto.preguntas) {\n      // FUNCIÓN EXTRA: Manejar preguntas de tipo VERDADERO_FALSO\n      if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, generamos automáticamente las opciones\n        pregunta.opciones = [\n          { numero: 1, texto: 'Verdadero' },\n          { numero: 2, texto: 'Falso' },\n        ];\n      } else if (\n        pregunta.tipo !== TiposRespuestaEnum.ABIERTA &&\n        (!pregunta.opciones || pregunta.opciones.length === 0)\n      ) {\n        throw new BadRequestException(\n          `Las preguntas de opción múltiple deben tener opciones`,\n        );\n      }\n      if (\n        pregunta.tipo === TiposRespuestaEnum.ABIERTA &&\n        pregunta.opciones?.length > 0\n      ) {\n        throw new BadRequestException(\n          `Las preguntas abiertas no deben tener opciones`,\n        );\n      }\n    }\n    const codigoRespuesta = v4();\n    const codigoResultados = v4();\n\n    // Creación de una nueva instancia de Encuesta con los datos del DTO\n    const encuesta: Encuesta = this.encuestaRepository.create({\n      ...dto, // Copia las propiedades del DTO\n      codigoRespuesta, // Genera un código único para las respuestas\n      codigoResultados, // Genera un código único para los resultados\n      fechaVencimiento: dto.fechaVencimiento, // Se toma la fecha de vencimiento\n    });\n\n    // Guarda la encuesta en la base de datos\n    const encuestaCreada = await this.encuestaRepository.save(encuesta);\n\n    // Usamos APP_URL para que sea dinámico con el puerto que esté activo\n    const baseUrl = this.configService.get(\n      'APP_URL',\n      'http://localhost:3000',\n    );\n    const apiPrefix = this.configService.get('GLOBAL_PREFIX', 'api');\n    const apiVersion = 'v1';\n\n    // Formato: /api/v1/respuestas/participar/{id}/{codigoRespuesta}\n    const enlaceParticipacion = `${baseUrl}/${apiPrefix}/${apiVersion}/respuestas/participar/${encuestaCreada.id}/${codigoRespuesta}`;\n\n    // Formato: /api/v1/encuestas/resultados/{id}?codigo={codigoResultados}\n    const enlaceVisualizacion = `${baseUrl}/${apiPrefix}/${apiVersion}/encuestas/${encuestaCreada.id}/resultados?codigo=${codigoResultados}`;\n\n    //Generar enlace corto\n    const enlaceCorto = await this.generarEnlaceCorto(enlaceParticipacion);\n\n    //Generar QR\n    const codigoQR = await this.generarCodigoQR(enlaceCorto);\n\n    // Retorna los datos relevantes de la encuesta creada\n    return {\n      id: encuestaCreada.id,\n      codigoRespuesta: encuestaCreada.codigoRespuesta,\n      codigoResultados: encuestaCreada.codigoResultados,\n      enlaceParticipacion: enlaceCorto, // usamos el enlace corto\n      enlaceVisualizacion,\n      enlaceCorto,\n      codigoQR,\n      fechaVencimiento: encuestaCreada.fechaVencimiento,\n    };\n  }\n  async generarEnlaceCorto(url: string): Promise {\n    try {\n      const response = await fetch(\n        `http://tinyurl.com/api-create.php?url=${encodeURIComponent(url)}`,\n      );\n      if (!response.ok) {\n        console.warn(\n          `Error en la API de TinyURL: ${response.statusText}, usando URL original`,\n        );\n        return url; // Se retorna la URL original\n      }\n      return await response.text();\n    } catch (error) {\n      console.error(\n        'Error al acortar enlace:',\n        error instanceof Error ? error.message : error,\n      );\n      return url; // Devuelve la URL original en caso de error\n    }\n  }\n\n  async generarCodigoQR(texto: string): Promise {\n    try {\n      const qr = await QRCode.toDataURL(texto);\n      return qr;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error('Error generando QR:', error.message);\n      } else {\n        console.error('Error desconocido generando QR:', error);\n      }\n      return ''; // En caso de error, retornar cadena vacía\n    }\n  }\n  // Método para obtener una encuesta por su ID y un código específico\n  async obtenerEncuesta(\n    id: number, // ID de la encuesta\n    codigo: string, // Código de respuesta o resultados\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS, // Tipo de código\n  ): Promise {\n    // Construcción de la consulta para obtener la encuesta\n    const query = this.encuestaRepository\n      .createQueryBuilder('encuesta') // Alias para la tabla Encuesta\n      .innerJoinAndSelect('encuesta.preguntas', 'pregunta') // Une las preguntas relacionadas\n      .leftJoinAndSelect('pregunta.opciones', 'preguntaOpcion') // Une las opciones de las preguntas\n      .where('encuesta.id = :id', { id }) // Filtra por el ID de la encuesta\n      .andWhere('encuesta.habilitada = true');\n    // Filtra según el tipo de código proporcionado\n    switch (codigoTipo) {\n      case CodigoTipoEnum.RESPUESTA:\n        query.andWhere('encuesta.codigoRespuesta = :codigo', { codigo });\n        break;\n\n      case CodigoTipoEnum.RESULTADOS:\n        query.andWhere('encuesta.codigoResultados = :codigo', { codigo });\n        break;\n    }\n\n    // Ordena las preguntas y opciones por su número\n    query.orderBy('pregunta.numero', 'ASC');\n    query.addOrderBy('preguntaOpcion.numero', 'ASC');\n\n    // Ejecuta la consulta y obtiene la encuesta\n    const encuesta = await query.getOne();\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Datos de encuesta no válidos');\n    }\n\n    // Se agrega una validación para rechazar el acceso si la encuesta ya está vencida.\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('Validando fecha de vencimiento (obtenerEncuesta):');\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  {\n    // Verificar primero que el código sea válido\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoResultados: codigoResultados, habilitada: true },\n      relations: [\n        'preguntas',\n        'preguntas.opciones',\n        'respuestas',\n        'respuestas.respuestasAbiertas',\n        'respuestas.respuestasOpciones',\n        'respuestas.respuestasOpciones.opcion',\n      ],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o código inválido');\n    }\n\n    // Procesar resultados\n    const resultados = encuesta.preguntas.map((pregunta) => {\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasTexto = encuesta.respuestas\n          .flatMap((r) => r.respuestasAbiertas)\n          .filter((ra) => ra.id_pregunta === pregunta.id)\n          .map((ra) => ra.texto);\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: 'ABIERTA',\n          respuestas: respuestasTexto,\n        };\n      } else if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, procesamos de manera similar a las de opción múltiple\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: TiposRespuestaEnum.VERDADERO_FALSO,\n          opciones: opcionesConteo,\n        };\n      } else {\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: opcionesConteo,\n        };\n      }\n    });\n\n    return {\n      encuesta: encuesta.nombre,\n      totalRespuestas: encuesta.respuestas.length,\n      resultados,\n    };\n  }\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  async actualizarEstadoEncuesta(\n    id: number,\n    habilitada: boolean,\n  ): Promise {\n    // Busca la encuesta por su ID\n    const encuesta = await this.encuestaRepository.findOne({ where: { id } });\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Encuesta no encontrada');\n    }\n\n    // Actualiza el estado de la encuesta\n    encuesta.habilitada = habilitada;\n    await this.encuestaRepository.save(encuesta);\n\n    // Retorna un mensaje de éxito\n    return {\n      mensaje: `La encuesta fue ${habilitada ? 'habilitada' : 'deshabilitada'} correctamente`,\n    };\n  }\n\n  // Método para obtener una encuesta por su código de respuesta\n  async obtenerEncuestaPorCodigo(\n    codigo: string,\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS,\n  ): Promise {\n    // Determinar qué campo usar según el tipo de código\n    const whereCondition =\n      codigoTipo === CodigoTipoEnum.RESPUESTA\n        ? { codigoRespuesta: codigo, habilitada: true }\n        : { codigoResultados: codigo, habilitada: true };\n\n    // Buscar la encuesta que tenga este código\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition,\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new BadRequestException('Código de encuesta no válido');\n    }\n\n    // Se agrega una validación para rechazar el acceso si la encuesta ya está vencida.\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('=== VALIDACIÓN DE FECHA DE VENCIMIENTO ===');\n      console.log('Fecha actual (ahora):', ahora.toISOString());\n      console.log('Fecha vencimiento BD:', encuesta.fechaVencimiento);\n      console.log(\n        'Fecha vencimiento parseada:',\n        fechaVencimiento.toISOString(),\n      );\n      console.log('Comparación (vencida?):', fechaVencimiento  a.numero - b.numero);\n    encuesta.preguntas.forEach((pregunta) => {\n      if (pregunta.opciones) {\n        pregunta.opciones.sort((a, b) => a.numero - b.numero);\n      }\n    });\n\n    return encuesta;\n  }\n\n  // Funcionalidad extra para generar un CSV (Emilia)\n  async resultadosCSV(id: number, codigoResultados: string): Promise {\n    // Obtiene los resultados de la encuesta validando el código de resultados\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const resultados = await this.obtenerResultados(id, codigoResultados);\n\n    // Si no se encuentran resultados, arroja una excepción\n    if (!resultados) {\n      throw new NotFoundException('No se encontraron resultados');\n    }\n\n    const filas: any[] = []; // Guarda los datos en formato fila para el CSV\n\n    const hayPreguntaAbierta = resultados.resultados.some(\n      (pregunta: any) => pregunta.tipo === 'ABIERTA',\n    );\n\n    // Recorre cada pregunta para armar las filas\n    resultados.resultados.forEach((pregunta: any) => {\n      // Si la pregunta es abierta, se agregan todas las respuestas individuales como filas\n      if (pregunta.tipo === 'ABIERTA') {\n        pregunta.respuestas.forEach((textoRespuesta: string) => {\n          filas.push({\n            Pregunta: pregunta.pregunta,\n            Tipo: pregunta.tipo,\n            Respuesta: textoRespuesta,\n          });\n        });\n      } else {\n        // Si la pregunta es de opción, se agregan las opciones con la cantidad de respuestas\n        pregunta.opciones.forEach((opcion: any) => {\n          const fila: any = {\n            Pregunta: pregunta.pregunta,\n            Tipo: pregunta.tipo,\n            Opcion: opcion.opcion,\n            'Cantidad Respuestas': opcion.conteo,\n          };\n          // Solo agrego si hay preguntas abiertas\n          if (hayPreguntaAbierta) {\n            fila.Respuesta = '';\n          }\n          filas.push(fila);\n        });\n      }\n    });\n\n    // Convierte las filas a formato csv utilizando papaparse\n    const csv = Papa.unparse(filas, {\n      quotes: true,\n      delimiter: ';',\n      header: true,\n      newline: '\\r\\n',\n    });\n\n    // Retorna el CSV\n    return '\\uFEFF' + csv;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObtenerEncuestaDto.html":{"url":"classes/ObtenerEncuestaDto.html","title":"class - ObtenerEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObtenerEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                codigo\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        codigo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsUUID('4')@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CodigoTipoEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CodigoTipoEnum})@IsEnum(CodigoTipoEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsEnum, IsNotEmpty, IsUUID } from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum'; // Enumerador para los tipos de código permitidos\n\n// Clase DTO (Data Transfer Object) para obtener una encuesta\nexport class ObtenerEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"codigo\" en Swagger\n  @IsUUID('4') // Valida que el valor sea un UUID versión 4\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  codigo: string; // Código único para identificar la encuesta\n\n  @ApiProperty({ enum: CodigoTipoEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(CodigoTipoEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: CodigoTipoEnum; // Tipo de código (puede ser \"RESULTADOS\" o \"RESPUESTA\")\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Opcion.html":{"url":"entities/Opcion.html","title":"entity - Opcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Opcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/opcion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  //OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n//import { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\n\n@Entity({ name: 'opciones' }) // Define la clase como una entidad de la base de datos con el nombre \"opciones\"\nexport class Opcion {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @ManyToOne(() => Pregunta) // Relación muchos a uno con la entidad \"Pregunta\"\n  @JoinColumn({ name: 'id_pregunta' }) // Define la columna \"id_pregunta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  pregunta: Pregunta; // Referencia a la pregunta a la que pertenece esta opción\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OpcionConRespuestasDto.html":{"url":"classes/OpcionConRespuestasDto.html","title":"class - OpcionConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OpcionConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cantidad_respuestas\n                            \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cantidad_respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OpcionesController.html":{"url":"controllers/OpcionesController.html","title":"controller - OpcionesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OpcionesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/controllers/opciones.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas/:preguntaId/opciones\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar las opciones de una pregunta.\nPermite crear y eliminar opciones asociadas a una pregunta específica.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Crea una nueva opción para una pregunta específica.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la pregunta a la que se asocia la opción.\n\n                                            \n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos de la opción a crear.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Un mensaje de éxito y la opción creada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Elimina una opción por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la opción a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Un mensaje de éxito.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  ParseIntPipe,\n  Delete,\n} from '@nestjs/common';\nimport { OpcionesService } from '../services/opciones.service';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n/**\n * Controlador para gestionar las opciones de una pregunta.\n * Permite crear y eliminar opciones asociadas a una pregunta específica.\n */\n@Controller('preguntas/:preguntaId/opciones')\nexport class OpcionesController {\n  /**\n   * Inyecta el servicio de opciones para manejar la lógica de negocio.\n   */\n  constructor(private readonly opcionesService: OpcionesService) {}\n\n  /**\n   * Crea una nueva opción para una pregunta específica.\n   * @param preguntaId ID de la pregunta a la que se asocia la opción.\n   * @param createOpcionDto Datos de la opción a crear.\n   * @returns Un mensaje de éxito y la opción creada.\n   */\n  @Post()\n  async crearOpcion(\n    @Param('preguntaId', ParseIntPipe) preguntaId: number,\n    @Body() createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    return this.opcionesService.crearOpcion(preguntaId, createOpcionDto);\n  }\n\n  /**\n   * Elimina una opción por su ID.\n   * @param id ID de la opción a eliminar.\n   * @returns Un mensaje de éxito.\n   */\n  @Delete(':id')\n  async eliminarOpcion(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return this.opcionesService.eliminarOpcion(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpcionesModule.html":{"url":"modules/OpcionesModule.html","title":"module - OpcionesModule","body":"\n                   \n\n\n\n\n    Modules\n    OpcionesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\n\nOpcionesService\n\nOpcionesService\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/opciones/opciones.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Módulo de Opciones.\nEste módulo gestiona las opciones asociadas a las preguntas de las encuestas.\nImporta las entidades Opcion y Pregunta para interactuar con la base de datos.\nProvee el servicio y el controlador de opciones.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpcionesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OpcionesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Opcion } from '../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../encuestas/entities/pregunta.entity';\nimport { OpcionesService } from './services/opciones.service';\nimport { OpcionesController } from './controllers/opciones.controller';\n\n/**\n * Módulo de Opciones.\n * Este módulo gestiona las opciones asociadas a las preguntas de las encuestas.\n * Importa las entidades Opcion y Pregunta para interactuar con la base de datos.\n * Provee el servicio y el controlador de opciones.\n */\n@Module({\n  // Importa los repositorios de Opcion y Pregunta para su uso en el servicio\n  imports: [TypeOrmModule.forFeature([Opcion, Pregunta])],\n  // Declara el controlador que maneja las rutas HTTP relacionadas con opciones\n  controllers: [OpcionesController],\n  // Provee el servicio que contiene la lógica de negocio para las opciones\n  providers: [OpcionesService],\n})\nexport class OpcionesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpcionesService.html":{"url":"injectables/OpcionesService.html","title":"injectable - OpcionesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpcionesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/services/opciones.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(opcionRepository: Repository, preguntaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/opciones/services/opciones.service.ts:9\n                            \n                        \n\n                \n                    \n                            Inyecta los repositorios de Opcion y Pregunta para interactuar con la base de datos.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Crea una nueva opción asociada a una pregunta específica.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la pregunta a la que se asocia la opción.\n\n                                            \n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos de la opción a crear.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Un mensaje de éxito y la opción creada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Elimina una opción por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la opción a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Un mensaje de éxito.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n@Injectable()\nexport class OpcionesService {\n  /**\n   * Inyecta los repositorios de Opcion y Pregunta para interactuar con la base de datos.\n   */\n  constructor(\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n  ) {}\n\n  /**\n   * Crea una nueva opción asociada a una pregunta específica.\n   * @param preguntaId ID de la pregunta a la que se asocia la opción.\n   * @param createOpcionDto Datos de la opción a crear.\n   * @returns Un mensaje de éxito y la opción creada.\n   */\n  async crearOpcion(\n    preguntaId: number,\n    createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    // Busca la pregunta por su ID\n    const pregunta = await this.preguntaRepository.findOneBy({\n      id: preguntaId,\n    });\n    // Si no existe la pregunta, lanza una excepción\n    if (!pregunta) {\n      throw new NotFoundException('Pregunta no encontrada');\n    }\n\n    // Crea la nueva opción asociada a la pregunta encontrada\n    const opcion = this.opcionRepository.create({\n      ...createOpcionDto,\n      pregunta,\n    });\n\n    // Guarda la opción en la base de datos\n    const opcionGuardada = await this.opcionRepository.save(opcion);\n\n    // Retorna un mensaje de éxito y la opción creada\n    return {\n      mensaje: 'Opción creada correctamente',\n      opcion: opcionGuardada,\n    };\n  }\n\n  /**\n   * Elimina una opción por su ID.\n   * @param id ID de la opción a eliminar.\n   * @returns Un mensaje de éxito.\n   */\n  async eliminarOpcion(id: number): Promise {\n    // Busca la opción por su ID\n    const opcion = await this.opcionRepository.findOneBy({ id });\n    // Si no existe la opción, lanza una excepción\n    if (!opcion) {\n      throw new NotFoundException('Opción no encontrada');\n    }\n\n    // Elimina la opción de la base de datos\n    await this.opcionRepository.delete(id);\n    return { mensaje: 'Opción eliminada correctamente' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta.html":{"url":"entities/Pregunta.html","title":"entity - Pregunta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/pregunta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación del enumerador para los tipos de respuesta\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de la entidad relacionada \"Encuesta\"\nimport { Encuesta } from './encuesta.entity';\n// Importación de la entidad relacionada \"Opcion\"\nimport { Opcion } from './opcion.entity';\n\n@Entity({ name: 'preguntas' }) // Define la clase como una entidad de la base de datos con el nombre \"preguntas\"\nexport class Pregunta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo', // Nombre de la columna en la base de datos\n    nullable: true, // Permitir valores nulos temporalmente\n    default: TiposRespuestaEnum.ABIERTA, // Valor por defecto para registros existentes\n  }) // Define la columna \"tipo\" como un enumerador\n  tipo: TiposRespuestaEnum; // Especifica el tipo de respuesta permitido para la pregunta\n\n  @ManyToOne(() => Encuesta) // Relación muchos a uno con la entidad \"Encuesta\"\n  @JoinColumn({ name: 'id_encuesta' }) // Define la columna \"id_encuesta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  encuesta: Encuesta; // Referencia a la encuesta a la que pertenece esta pregunta\n\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta, { cascade: ['insert'] }) // Relación uno a muchos con la entidad \"Opcion\"\n  opciones: Opcion[]; // Lista de opciones asociadas a la pregunta\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta-1.html":{"url":"entities/Pregunta-1.html","title":"entity - Pregunta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/entities/pregunta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad que representa una pregunta dentro de una encuesta.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.preguntas)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:45\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Encuesta.\nIndica a qué encuesta pertenece esta pregunta.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:19\n                        \n                    \n\n            \n                \n                    Identificador único de la pregunta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:23\n                        \n                    \n\n            \n                \n                    Número de orden de la pregunta dentro de la encuesta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:52\n                        \n                    \n\n            \n                \n                    Relación uno-a-muchos con la entidad Opcion.\nLista de opciones asociadas a la pregunta (si corresponde).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:27\n                        \n                    \n\n            \n                \n                    Texto o enunciado de la pregunta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:38\n                        \n                    \n\n            \n                \n                    Tipo de respuesta esperada para la pregunta.\nPuede ser: ABIERTA, OPCION_MULTIPLE_SELECCION_SIMPLE, OPCION_MULTIPLE_SELECCION_MULTIPLE, VERDADERO_FALSO.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { TiposRespuestaEnum } from '../../encuestas/enums/tipos-respuesta.enum';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n/**\n * Entidad que representa una pregunta dentro de una encuesta.\n */\n@Entity({ name: 'preguntas' })\nexport class Pregunta {\n  /** Identificador único de la pregunta */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** Número de orden de la pregunta dentro de la encuesta */\n  @Column()\n  numero: number;\n\n  /** Texto o enunciado de la pregunta */\n  @Column()\n  texto: string;\n\n  /**\n   * Tipo de respuesta esperada para la pregunta.\n   * Puede ser: ABIERTA, OPCION_MULTIPLE_SELECCION_SIMPLE, OPCION_MULTIPLE_SELECCION_MULTIPLE, VERDADERO_FALSO.\n   */\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo_respuesta', // Nombre de la columna en la base de datos\n  })\n  tipo: TiposRespuestaEnum;\n\n  /**\n   * Relación muchos-a-uno con la entidad Encuesta.\n   * Indica a qué encuesta pertenece esta pregunta.\n   */\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.preguntas)\n  encuesta: Encuesta;\n\n  /**\n   * Relación uno-a-muchos con la entidad Opcion.\n   * Lista de opciones asociadas a la pregunta (si corresponde).\n   */\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta)\n  opciones: Opcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PreguntaConRespuestasDto.html":{"url":"classes/PreguntaConRespuestasDto.html","title":"class - PreguntaConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PreguntaConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                opciones\n                            \n                            \n                                respuestas_abiertas\n                            \n                            \n                                texto\n                            \n                            \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpcionConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        respuestas_abiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PreguntasController.html":{"url":"controllers/PreguntasController.html","title":"controller - PreguntasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PreguntasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/controllers/preguntas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    \n                                    Async\n                                eliminarPregunta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(id: number, actualizarDto: ActualizarPreguntaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                actualizarDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPregunta(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Param,\n  Patch,\n  Delete,\n  ParseIntPipe,\n} from '@nestjs/common';\n// Importación del servicio de preguntas\nimport { PreguntasService } from '../services/preguntas.service';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Controller('preguntas') // Define el controlador para manejar las rutas relacionadas con \"/preguntas\"\nexport class PreguntasController {\n  constructor(private readonly preguntasService: PreguntasService) {} // Inyección del servicio de preguntas\n\n  @Patch(':id') // Define un endpoint PATCH para actualizar una pregunta por su ID\n  async actualizarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n    @Body() actualizarDto: ActualizarPreguntaDto, // Extrae el cuerpo de la petición y lo valida según ActualizarPreguntaDto.\n  ): Promise {\n    // Llama al método actualizarPregunta del servicio, pasándole el id y los nuevos datos.\n    return this.preguntasService.actualizarPregunta(id, actualizarDto);\n  }\n\n  @Delete(':id') // Define un endpoint DELETE para eliminar una pregunta y sus opciones\n  async eliminarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n  ): Promise {\n    // Llama al método del servicio que elimina la pregunta junto con sus opciones\n    return this.preguntasService.eliminarPreguntaConOpciones(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PreguntasModule.html":{"url":"modules/PreguntasModule.html","title":"module - PreguntasModule","body":"\n                   \n\n\n\n\n    Modules\n    PreguntasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\n\nPreguntasService\n\nPreguntasService\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/preguntas/preguntas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PreguntasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PreguntasController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Pregunta } from '../encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from '../encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { PreguntasService } from '../preguntas/services/preguntas.service'; // Servicio para la lógica de negocio de preguntas\nimport { PreguntasController } from '../preguntas/controllers/preguntas.controller'; // Controlador para manejar las rutas relacionadas con preguntas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Pregunta, Opcion]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [PreguntasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [PreguntasService],\n})\n// Exportación del módulo de preguntas para que pueda ser utilizado en otros módulos\nexport class PreguntasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreguntasService.html":{"url":"injectables/PreguntasService.html","title":"injectable - PreguntasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PreguntasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/services/preguntas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    Async\n                                eliminarPreguntaConOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(preguntaRepo: Repository, opcionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/preguntas/services/preguntas.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        preguntaRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(idPregunta: number, updateDto: ActualizarPreguntaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarPreguntaConOpciones\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPreguntaConOpciones(idPregunta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación de la entidad Pregunta\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\n// Importación de la entidad Opcion\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class PreguntasService {\n  constructor(\n    // Inyección del repositorio de la entidad Pregunta\n    @InjectRepository(Pregunta)\n    private readonly preguntaRepo: Repository,\n    // Inyección del repositorio de la entidad Opcion\n    @InjectRepository(Opcion)\n    private readonly opcionRepo: Repository,\n  ) {}\n\n  // Método para actualizar una pregunta\n  async actualizarPregunta(\n    idPregunta: number,\n    updateDto: ActualizarPreguntaDto,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOneBy({ id: idPregunta }); // Busca la pregunta por ID\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza una excepción 404\n\n    Object.assign(pregunta, updateDto); // Asigna los nuevos valores a la entidad pregunta\n    await this.preguntaRepo.save(pregunta); // Guarda la entidad actualizada en la base de datos\n\n    return { mensaje: 'Pregunta actualizada correctamente' }; // Retorna un mensaje de éxito\n  }\n\n  // Método para eliminar una pregunta y sus opciones\n  async eliminarPreguntaConOpciones(\n    idPregunta: number,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOne({\n      // Busca la pregunta junto con sus opciones\n      where: { id: idPregunta },\n      relations: ['opciones'],\n    });\n\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza excepción 404\n\n    // Se eliminan las opciones relacionadas\n    if (pregunta.opciones && pregunta.opciones.length > 0) {\n      await this.opcionRepo.delete({ pregunta: { id: idPregunta } });\n    }\n\n    // Se elimina la pregunta\n    await this.preguntaRepo.delete(idPregunta);\n\n    return { mensaje: 'Pregunta eliminada correctamente' }; // Retorna un mensaje de éxito\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarRespuestasDto.html":{"url":"classes/RegistrarRespuestasDto.html","title":"class - RegistrarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RespuestaPreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\n// Representa la respuesta a una pregunta individual de la encuesta:\n// id_pregunta: Un número obligatorio que identifica la pregunta (validado con @IsNumber() y @IsNotEmpty())\n// tipo: Un string que debe ser uno de tres valores específicos (tipos de pregunta):\n// 'ABIERTA': Para preguntas de respuesta libre\n// 'OPCION_MULTIPLE_SELECCION_SIMPLE': Para preguntas con una sola opción seleccionable\n// 'OPCION_MULTIPLE_SELECCION_MULTIPLE': Para preguntas con múltiples opciones seleccionables\n// texto: Un campo opcional (@IsOptional()) de tipo string para almacenar la respuesta a preguntas abiertas\n// opciones: Un campo opcional que contiene un array de números, para almacenar los IDs de las opciones seleccionadas en preguntas de opción múltiple\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\n// Actúa como contenedor principal que será recibido por el controlador:\n// respuestas: Un array obligatorio de objetos RespuestaPreguntaDto\n// Usa @ValidateNested() para validar cada elemento del array según las reglas de RespuestaPreguntaDto\n// Usa @Type(() => RespuestaPreguntaDto) para asegurar que cada elemento sea transformado correctamente\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta.html":{"url":"entities/Respuesta.html","title":"entity - Respuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/respuesta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad que representa una respuesta general a una encuesta.\nPuede contener respuestas abiertas y respuestas de opción.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:33\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Encuesta.\nPermite acceder a los datos de la encuesta asociada.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:21\n                        \n                    \n\n            \n                \n                    Identificador único de la respuesta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:25\n                        \n                    \n\n            \n                \n                    ID de la encuesta a la que pertenece esta respuesta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ra => ra.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:40\n                        \n                    \n\n            \n                \n                    Relación uno-a-muchos con las respuestas abiertas.\nUna respuesta puede tener varias respuestas abiertas asociadas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ro => ro.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:47\n                        \n                    \n\n            \n                \n                    Relación uno-a-muchos con las respuestas de opción.\nUna respuesta puede tener varias respuestas de opción asociadas.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from '../../respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from '../../respuestas/entities/respuesta-opcion.entity';\n\n/**\n * Entidad que representa una respuesta general a una encuesta.\n * Puede contener respuestas abiertas y respuestas de opción.\n */\n@Entity('respuestas')\nexport class Respuesta {\n  /** Identificador único de la respuesta */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** ID de la encuesta a la que pertenece esta respuesta */\n  @Column('int')\n  id_encuesta: number;\n\n  /**\n   * Relación muchos-a-uno con la entidad Encuesta.\n   * Permite acceder a los datos de la encuesta asociada.\n   */\n  @ManyToOne(() => Encuesta)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  /**\n   * Relación uno-a-muchos con las respuestas abiertas.\n   * Una respuesta puede tener varias respuestas abiertas asociadas.\n   */\n  @OneToMany(() => RespuestaAbierta, (ra) => ra.respuesta)\n  respuestasAbiertas: RespuestaAbierta[];\n\n  /**\n   * Relación uno-a-muchos con las respuestas de opción.\n   * Una respuesta puede tener varias respuestas de opción asociadas.\n   */\n  @OneToMany(() => RespuestaOpcion, (ro) => ro.respuesta)\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta-1.html":{"url":"entities/Respuesta-1.html","title":"entity - Respuesta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad que representa una respuesta general a una encuesta.\nPuede contener respuestas abiertas y respuestas de opción.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.respuestas)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:33\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Encuesta.\nPermite acceder a los datos de la encuesta asociada.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:21\n                        \n                    \n\n            \n                \n                    Identificador único de la respuesta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:25\n                        \n                    \n\n            \n                \n                    ID de la encuesta a la que pertenece esta respuesta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaAbierta => respuestaAbierta.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:43\n                        \n                    \n\n            \n                \n                    Relación uno-a-muchos con las respuestas abiertas.\nUna respuesta puede tener varias respuestas abiertas asociadas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaOpcion => respuestaOpcion.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:53\n                        \n                    \n\n            \n                \n                    Relación uno-a-muchos con las respuestas de opción.\nUna respuesta puede tener varias respuestas de opción asociadas.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  JoinColumn,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from './respuesta-abierta.entity';\nimport { RespuestaOpcion } from './respuesta-opcion.entity';\n\n/**\n * Entidad que representa una respuesta general a una encuesta.\n * Puede contener respuestas abiertas y respuestas de opción.\n */\n@Entity('respuestas')\nexport class Respuesta {\n  /** Identificador único de la respuesta */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** ID de la encuesta a la que pertenece esta respuesta */\n  @Column('int', { nullable: true })\n  id_encuesta: number;\n\n  /**\n   * Relación muchos-a-uno con la entidad Encuesta.\n   * Permite acceder a los datos de la encuesta asociada.\n   */\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.respuestas)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  /**\n   * Relación uno-a-muchos con las respuestas abiertas.\n   * Una respuesta puede tener varias respuestas abiertas asociadas.\n   */\n  @OneToMany(\n    () => RespuestaAbierta,\n    (respuestaAbierta) => respuestaAbierta.respuesta,\n  )\n  respuestasAbiertas: RespuestaAbierta[];\n\n  /**\n   * Relación uno-a-muchos con las respuestas de opción.\n   * Una respuesta puede tener varias respuestas de opción asociadas.\n   */\n  @OneToMany(\n    () => RespuestaOpcion,\n    (respuestaOpcion) => respuestaOpcion.respuesta,\n  )\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaAbierta.html":{"url":"entities/RespuestaAbierta.html","title":"entity - RespuestaAbierta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaAbierta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-abierta.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad que representa una respuesta abierta (texto libre) a una pregunta de una encuesta.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:19\n                        \n                    \n\n            \n                \n                    Identificador único de la respuesta abierta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:27\n                        \n                    \n\n            \n                \n                    ID de la pregunta a la que corresponde esta respuesta abierta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:31\n                        \n                    \n\n            \n                \n                    ID de la respuesta general (agrupadora) a la que pertenece esta respuesta abierta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:39\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Pregunta.\nPermite acceder a los datos de la pregunta asociada.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:47\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Respuesta.\nPermite acceder a la respuesta general a la que pertenece esta respuesta abierta.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:23\n                        \n                    \n\n            \n                \n                    Texto ingresado por el usuario como respuesta\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { Respuesta } from './respuesta.entity';\n\n/**\n * Entidad que representa una respuesta abierta (texto libre) a una pregunta de una encuesta.\n */\n@Entity('respuestas_abiertas')\nexport class RespuestaAbierta {\n  /** Identificador único de la respuesta abierta */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** Texto ingresado por el usuario como respuesta */\n  @Column({ type: 'text', nullable: true })\n  texto: string;\n\n  /** ID de la pregunta a la que corresponde esta respuesta abierta */\n  @Column('int', { nullable: true })\n  id_pregunta: number;\n\n  /** ID de la respuesta general (agrupadora) a la que pertenece esta respuesta abierta */\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  /**\n   * Relación muchos-a-uno con la entidad Pregunta.\n   * Permite acceder a los datos de la pregunta asociada.\n   */\n  @ManyToOne(() => Pregunta)\n  @JoinColumn({ name: 'id_pregunta' })\n  pregunta: Pregunta;\n\n  /**\n   * Relación muchos-a-uno con la entidad Respuesta.\n   * Permite acceder a la respuesta general a la que pertenece esta respuesta abierta.\n   */\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaOpcion.html":{"url":"entities/RespuestaOpcion.html","title":"entity - RespuestaOpcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaOpcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-opcion.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad que representa una respuesta de opción seleccionada por un usuario en una encuesta.\nRelaciona una respuesta general con una opción específica de una pregunta.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_opcion\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                opcion\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:19\n                        \n                    \n\n            \n                \n                    Identificador único de la respuesta de opción\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:27\n                        \n                    \n\n            \n                \n                    ID de la opción seleccionada\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:23\n                        \n                    \n\n            \n                \n                    ID de la respuesta general a la que pertenece esta respuesta de opción\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_opcion'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:43\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Opcion.\nPermite acceder a la opción seleccionada por el usuario.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:35\n                        \n                    \n\n            \n                \n                    Relación muchos-a-uno con la entidad Respuesta.\nPermite acceder a la respuesta general asociada.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Respuesta } from './respuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n/**\n * Entidad que representa una respuesta de opción seleccionada por un usuario en una encuesta.\n * Relaciona una respuesta general con una opción específica de una pregunta.\n */\n@Entity('respuestas_opciones')\nexport class RespuestaOpcion {\n  /** Identificador único de la respuesta de opción */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** ID de la respuesta general a la que pertenece esta respuesta de opción */\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  /** ID de la opción seleccionada */\n  @Column('int', { nullable: true })\n  id_opcion: number;\n\n  /**\n   * Relación muchos-a-uno con la entidad Respuesta.\n   * Permite acceder a la respuesta general asociada.\n   */\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n\n  /**\n   * Relación muchos-a-uno con la entidad Opcion.\n   * Permite acceder a la opción seleccionada por el usuario.\n   */\n  @ManyToOne(() => Opcion)\n  @JoinColumn({ name: 'id_opcion' })\n  opcion: Opcion;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaPreguntaDto.html":{"url":"classes/RespuestaPreguntaDto.html","title":"class - RespuestaPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                opciones\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ABIERTA\" | \"OPCION_MULTIPLE_SELECCION_SIMPLE\" | \"OPCION_MULTIPLE_SELECCION_MULTIPLE\" | \"VERDADERO_FALSO\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\n// Representa la respuesta a una pregunta individual de la encuesta:\n// id_pregunta: Un número obligatorio que identifica la pregunta (validado con @IsNumber() y @IsNotEmpty())\n// tipo: Un string que debe ser uno de tres valores específicos (tipos de pregunta):\n// 'ABIERTA': Para preguntas de respuesta libre\n// 'OPCION_MULTIPLE_SELECCION_SIMPLE': Para preguntas con una sola opción seleccionable\n// 'OPCION_MULTIPLE_SELECCION_MULTIPLE': Para preguntas con múltiples opciones seleccionables\n// texto: Un campo opcional (@IsOptional()) de tipo string para almacenar la respuesta a preguntas abiertas\n// opciones: Un campo opcional que contiene un array de números, para almacenar los IDs de las opciones seleccionadas en preguntas de opción múltiple\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\n// Actúa como contenedor principal que será recibido por el controlador:\n// respuestas: Un array obligatorio de objetos RespuestaPreguntaDto\n// Usa @ValidateNested() para validar cada elemento del array según las reglas de RespuestaPreguntaDto\n// Usa @Type(() => RespuestaPreguntaDto) para asegurar que cada elemento sea transformado correctamente\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RespuestasController.html":{"url":"controllers/RespuestasController.html","title":"controller - RespuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RespuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/controllers/respuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                respuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                visualizarRespuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, tokenParticipacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:id/:tokenParticipacion')@ApiOperation({summary: 'Obtener encuesta para participación', description: 'Devuelve la estructura completa de una encuesta para que un usuario pueda participar.'})@ApiParam({name: 'id', description: 'ID numérico de la encuesta', example: '1', required: true})@ApiParam({name: 'tokenParticipacion', description: 'Token UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiResponse({status: 200, description: 'Encuesta obtenida exitosamente', type: CreateEncuestaDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o token inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:153\n                        \n                    \n\n\n            \n                \n                        Obtiene la estructura de una encuesta para participación\nEste endpoint devuelve la estructura completa de una encuesta para que\nun usuario pueda participar en ella, incluyendo todas sus preguntas y opciones.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(id: number, tokenParticipacion: string, registrarRespuestasDto: RegistrarRespuestasDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/:tokenParticipacion')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Registrar respuestas de una encuesta', description: 'Guarda las respuestas de un usuario para una encuesta específica. Requiere el ID de la encuesta y el token de participación.'})@ApiParam({name: 'id', description: 'ID numérico de la encuesta', example: '1', required: true})@ApiParam({name: 'tokenParticipacion', description: 'Token UUID de participación de la encuesta', example: 'abc123def456', required: true})@ApiBody({type: RegistrarRespuestasDto, description: 'Objeto con las respuestas del usuario para cada pregunta de la encuesta'})@ApiResponse({status: 201, description: 'Respuestas registradas exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o enlace inválido'})@ApiResponse({status: 400, description: 'Datos de respuesta inválidos o incompletos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                registrarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        visualizarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestas(tokenVisualizacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:tokenVisualizacion')@ApiOperation({summary: 'Visualizar respuestas de una encuesta', description: 'Obtiene todas las respuestas recopiladas para una encuesta usando el token de visualización.'})@ApiParam({name: 'tokenVisualizacion', description: 'Token UUID para visualizar los resultados de la encuesta', example: 'xyz789uvw012', required: true})@ApiResponse({status: 200, description: 'Respuestas obtenidas exitosamente', type: VisualizarRespuestasDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o token de visualización inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Obtiene los resultados de una encuesta usando el token de visualización\nEste endpoint permite consultar todas las respuestas recopiladas para una encuesta\nutilizando el token de visualización proporcionado al crear la encuesta.\nIncluye estadísticas como el número de respuestas por opción.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importamos los decoradores y herramientas necesarias del framework NestJS.\nimport {\n  Controller,\n  Post,\n  Body,\n  Param,\n  HttpCode,\n  HttpStatus,\n  Get,\n  ParseIntPipe,\n} from '@nestjs/common';\n// Importamos un DTO (estructura de datos) que representa una encuesta (para cuando devolvemos datos al frontend).\nimport { CreateEncuestaDto } from '../../encuestas/dtos/create-encuesta.dto';\n// Servicio donde está la lógica principal para manejar respuestas (guardar, recuperar, etc).\nimport { RespuestasService } from '../services/respuestas.service';\n// DTO que representa los datos que el usuario envía cuando responde una encuesta.\nimport { RegistrarRespuestasDto } from '../dtos/registrar-respuestas.dto';\n// DTO que representa cómo se mostrarán las respuestas cuando alguien quiera ver los resultados.\nimport { VisualizarRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\n// Herramientas para documentar la API con Swagger (permite visualizar y probar la API en el navegador).\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiParam,\n  ApiBody,\n  ApiResponse,\n} from '@nestjs/swagger';\n// Etiqueta que agrupa las rutas de este controlador bajo el nombre \"respuestas\" en Swagger.\n@ApiTags('respuestas')\n// Este controlador maneja las rutas relacionadas a respuestas de encuestas.\n@Controller('respuestas')\nexport class RespuestasController {\n  // Inyectamos el servicio de respuestas para poder usar sus funciones.\n  constructor(private readonly respuestasService: RespuestasService) {}\n\n  @Post(':id/:tokenParticipacion')\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({\n    summary: 'Registrar respuestas de una encuesta',\n    description:\n      'Guarda las respuestas de un usuario para una encuesta específica. Requiere el ID de la encuesta y el token de participación.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID numérico de la encuesta',\n    example: '1',\n    required: true,\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiBody({\n    type: RegistrarRespuestasDto,\n    description:\n      'Objeto con las respuestas del usuario para cada pregunta de la encuesta',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Respuestas registradas exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o enlace inválido',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de respuesta inválidos o incompletos',\n  })\n  async registrarRespuestas(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n    @Body() registrarRespuestasDto: RegistrarRespuestasDto,\n  ): Promise {\n    await this.respuestasService.registrarRespuestas(\n      tokenParticipacion,\n      registrarRespuestasDto,\n      id,\n    );\n    return { message: 'Respuestas registradas exitosamente' };\n  }\n\n  /**\n   * Obtiene los resultados de una encuesta usando el token de visualización\n   *\n   * Este endpoint permite consultar todas las respuestas recopiladas para una encuesta\n   * utilizando el token de visualización proporcionado al crear la encuesta.\n   * Incluye estadísticas como el número de respuestas por opción.\n   */\n  @Get('resultados/:tokenVisualizacion')\n  @ApiOperation({\n    summary: 'Visualizar respuestas de una encuesta',\n    description:\n      'Obtiene todas las respuestas recopiladas para una encuesta usando el token de visualización.',\n  })\n  @ApiParam({\n    name: 'tokenVisualizacion',\n    description: 'Token UUID para visualizar los resultados de la encuesta',\n    example: 'xyz789uvw012',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Respuestas obtenidas exitosamente',\n    type: VisualizarRespuestasDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o token de visualización inválido',\n  })\n  async visualizarRespuestas(\n    @Param('tokenVisualizacion') tokenVisualizacion: string,\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(tokenVisualizacion);\n    return { message: 'Éxito', data: resultado };\n  }\n\n  /**\n   * Obtiene la estructura de una encuesta para participación\n   * Este endpoint devuelve la estructura completa de una encuesta para que\n   * un usuario pueda participar en ella, incluyendo todas sus preguntas y opciones.\n   */\n  @Get('participar/:id/:tokenParticipacion')\n  @ApiOperation({\n    summary: 'Obtener encuesta para participación',\n    description:\n      'Devuelve la estructura completa de una encuesta para que un usuario pueda participar.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID numérico de la encuesta',\n    example: '1',\n    required: true,\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token UUID de participación de la encuesta',\n    example: 'abc123def456',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Encuesta obtenida exitosamente',\n    type: CreateEncuestaDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o token inválido',\n  })\n  async obtenerEncuestaParaParticipacion(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n  ): Promise {\n    const encuesta =\n      await this.respuestasService.obtenerEncuestaParaParticipacion(\n        id,\n        tokenParticipacion,\n      );\n    return { message: 'Encuesta obtenida exitosamente', data: encuesta };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RespuestasModule.html":{"url":"modules/RespuestasModule.html","title":"module - RespuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    RespuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_exports\n\n\n\ncluster_RespuestasModule_providers\n\n\n\n\nRespuestasService \n\nRespuestasService \n\n\n\nRespuestasModule\n\nRespuestasModule\n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/respuestas/respuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RespuestasController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { RespuestasController } from './controllers/respuestas.controller'; // Controlador para manejar las rutas relacionadas con respuesta\nimport { RespuestasService } from './services/respuestas.service'; // Servicio para la lógica de negocio de respuesta\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Respuesta } from './entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestaAbierta } from './entities/respuesta-abierta.entity'; //Entidad que representa la tabla \"Respuesta Abierta\" en la base de datos\nimport { RespuestaOpcion } from './entities/respuesta-opcion.entity'; //Entidad que representa la tabla \"RespuestaOpciones\" en la base de datos\nimport { Encuesta } from '../encuestas/entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from '../encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from '../encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([\n      Encuesta,\n      Pregunta,\n      Opcion,\n      Respuesta,\n      RespuestaAbierta,\n      RespuestaOpcion,\n    ]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  // Declaración de los proveedores que contienen la lógica de negocio\n  controllers: [RespuestasController],\n  providers: [RespuestasService],\n  exports: [RespuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class RespuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RespuestasService.html":{"url":"injectables/RespuestasService.html","title":"injectable - RespuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RespuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/services/respuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    Async\n                                visualizarRespuestasDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(respuestaRepository: Repository, respuestaAbiertaRepository: Repository, respuestaOpcionRepository: Repository, encuestaRepository: Repository, preguntaRepository: Repository, opcionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/services/respuestas.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaAbiertaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaOpcionRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, codigoParticipacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:319\n                        \n                    \n\n\n            \n                \n                        Obtiene la estructura de una encuesta para participación\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID numérico de la encuesta\n\n\n                                            \n                                        \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID de participación\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Objeto DTO con la estructura de la encuesta para participar\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(codigoParticipacion: string, registarRespuestasDto: RegistrarRespuestasDto, encuestaId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Registra las respuestas de un usuario para una encuesta específica\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID de participación de la encuesta\n\n\n                                            \n                                        \n                                        \n                                                registarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nObjeto con las respuestas del usuario\n\n\n                                            \n                                        \n                                        \n                                                encuestaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nID opcional de la encuesta para validación adicional\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        visualizarRespuestasDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestasDto(codigoVisualizacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Obtiene las respuestas registradas de una encuesta específica para visualizarlas\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                codigoVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nToken UUID para visualizar los resultados\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Objeto DTO con toda la información de la encuesta y sus respuestas\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Respuesta } from 'src/modules/respuestas/entities/respuesta.entity';\nimport { RespuestaAbierta } from 'src/modules/respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\nimport { Encuesta } from 'src/modules/encuestas/entities/encuesta.entity';\nimport { Pregunta } from 'src/modules/encuestas/entities/pregunta.entity';\nimport { Opcion } from 'src/modules/encuestas/entities/opcion.entity';\nimport { RegistrarRespuestasDto } from 'src/modules/respuestas/dtos/registrar-respuestas.dto';\nimport { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\nimport { VisualizarRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { PreguntaConRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { CreateEncuestaDto } from 'src/modules/encuestas/dtos/create-encuesta.dto';\n\n@Injectable()\nexport class RespuestasService {\n  constructor(\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n    @InjectRepository(RespuestaAbierta)\n    private respuestaAbiertaRepository: Repository,\n    @InjectRepository(RespuestaOpcion)\n    private respuestaOpcionRepository: Repository,\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n  ) {}\n  /**\n   * Registra las respuestas de un usuario para una encuesta específica\n   *\n   * @param codigoParticipacion - Token UUID de participación de la encuesta\n   * @param registarRespuestasDto - Objeto con las respuestas del usuario\n   * @param encuestaId - ID opcional de la encuesta para validación adicional\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   * @throws BadRequestException - Si faltan respuestas obligatorias o son inválidas\n   */\n  async registrarRespuestas(\n    codigoParticipacion: string,\n    registarRespuestasDto: RegistrarRespuestasDto,\n    encuestaId?: number,\n  ): Promise {\n    // Validar que el DTO de respuestas no esté vacío\n    if (\n      !registarRespuestasDto.respuestas ||\n      registarRespuestasDto.respuestas.length === 0\n    ) {\n      throw new BadRequestException('No se proporcionaron respuestas');\n    }\n\n    // Construir la condición de búsqueda con un tipo específico\n    const whereCondition: {\n      codigoRespuesta: string;\n      habilitada: boolean;\n      id?: number;\n    } = {\n      codigoRespuesta: codigoParticipacion,\n      habilitada: true,\n    };\n\n    // Si se proporciona el ID de la encuesta, añadirlo a la condición\n    if (encuestaId) {\n      whereCondition.id = encuestaId;\n    }\n\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition,\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace inválido');\n    }\n\n    // Validar si la encuesta ha vencido\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log('Validando fecha de vencimiento en registrarRespuestas:');\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  r.id_pregunta,\n    );\n\n    // Verificar si todas las preguntas obligatorias están respondidas\n    const preguntasFaltantes = preguntasObligatorias.filter(\n      (p) => !preguntasRespondidas.includes(p.id),\n    );\n\n    if (preguntasFaltantes.length > 0) {\n      throw new BadRequestException(\n        `Debe responder todas las preguntas obligatorias. Faltan las preguntas: ${preguntasFaltantes.map((p) => p.numero).join(', ')}`,\n      );\n    }\n\n    // Crear una nueva respuesta vinculada a la encuesta\n    const respuesta = this.respuestaRepository.create({\n      id_encuesta: encuesta.id,\n    });\n    const respuestaGuardada = await this.respuestaRepository.save(respuesta);\n\n    for (const respuestaPregunta of registarRespuestasDto.respuestas) {\n      const pregunta = await this.preguntaRepository.findOne({\n        where: {\n          id: respuestaPregunta.id_pregunta,\n          encuesta: { id: encuesta.id },\n        },\n      });\n\n      if (!pregunta) {\n        throw new BadRequestException(\n          `Pregunta ${respuestaPregunta.id_pregunta} no encontrada o no pertenece a la encuesta`,\n        );\n      }\n\n      if (respuestaPregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        if (!respuestaPregunta.texto) {\n          throw new BadRequestException(\n            'Respuesta de texto requerida para preguntas abiertas',\n          );\n        }\n\n        const respuestasAbiertas = this.respuestaAbiertaRepository.create({\n          texto: respuestaPregunta.texto,\n          id_pregunta: pregunta.id,\n          id_respuesta: respuestaGuardada.id,\n        });\n        await this.respuestaAbiertaRepository.save(respuestasAbiertas);\n      } else if (\n        respuestaPregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO\n      ) {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length !== 1\n        ) {\n          throw new BadRequestException(\n            'Debe seleccionar exactamente una opción (Verdadero o Falso)',\n          );\n        }\n\n        // Verificar que la opción seleccionada pertenece a la pregunta\n        const opcion = await this.opcionRepository.findOne({\n          where: {\n            id: respuestaPregunta.opciones[0],\n            pregunta: { id: pregunta.id },\n          },\n        });\n\n        if (!opcion) {\n          throw new BadRequestException(\n            `Opción seleccionada no válida para esta pregunta de Verdadero/Falso`,\n          );\n        }\n\n        const respuestaOpcion = this.respuestaOpcionRepository.create({\n          id_respuesta: respuestaGuardada.id,\n          id_opcion: respuestaPregunta.opciones[0],\n        });\n        await this.respuestaOpcionRepository.save(respuestaOpcion);\n      } else {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length === 0\n        ) {\n          throw new BadRequestException(\n            'Al menos una opcion debe ser seleccionada',\n          );\n        }\n\n        if (\n          pregunta.tipo ===\n            TiposRespuestaEnum.OPCION_MULTIPLE_SELECCION_SIMPLE &&\n          respuestaPregunta.opciones.length > 1\n        ) {\n          throw new BadRequestException(\n            'Solo se permite una seleccion para este tipo de pregunta',\n          );\n        }\n\n        for (const idOpcion of respuestaPregunta.opciones) {\n          const opcion = await this.opcionRepository.findOne({\n            where: {\n              id: idOpcion,\n              pregunta: { id: pregunta.id },\n            },\n          });\n\n          if (!opcion) {\n            // Obtener todas las opciones disponibles para esta pregunta para depuración\n            const opcionesDisponibles = await this.opcionRepository.find({\n              where: { pregunta: { id: pregunta.id } },\n              select: ['id', 'texto', 'numero'],\n            });\n\n            console.log(\n              `Error: Opción ${idOpcion} no encontrada para la pregunta ${pregunta.id}`,\n            );\n            console.log(\n              'Opciones disponibles para esta pregunta:',\n              opcionesDisponibles,\n            );\n\n            throw new BadRequestException(\n              `Opcion ${idOpcion} no encontrada o no pertenece a esta pregunta. Opciones disponibles: ${JSON.stringify(opcionesDisponibles)}`,\n            );\n          }\n          const respuestaOpcion = this.respuestaOpcionRepository.create({\n            id_respuesta: respuestaGuardada.id,\n            id_opcion: idOpcion,\n          });\n          await this.respuestaOpcionRepository.save(respuestaOpcion);\n        }\n      }\n    }\n  }\n  /**\n   * Obtiene las respuestas registradas de una encuesta específica para visualizarlas\n   *\n   * @param codigoVisualizacion - Token UUID para visualizar los resultados\n   * @returns Objeto DTO con toda la información de la encuesta y sus respuestas\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   */\n  async visualizarRespuestasDto(\n    codigoVisualizacion: string,\n  ): Promise {\n    // Busca la encuesta con el código de visualización\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { codigoResultados: codigoVisualizacion },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace inválido');\n    }\n\n    // Construir el objeto\n    const resultado: VisualizarRespuestasDto = {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      codigoResultados: encuesta.codigoResultados,\n      habilitada: encuesta.habilitada,\n      preguntas: [],\n    };\n    //itera sobre las preguntas de la encuesta\n    for (const pregunta of encuesta.preguntas) {\n      const preguntaConRespuestas = new PreguntaConRespuestasDto(); //crea un dto de la pregunta.\n\n      preguntaConRespuestas.id = pregunta.id;\n      preguntaConRespuestas.numero = pregunta.numero;\n      preguntaConRespuestas.texto = pregunta.texto;\n      preguntaConRespuestas.tipo = pregunta.tipo;\n      // Inicializar las listas de opciones y respuestas abiertas\n      preguntaConRespuestas.opciones = [];\n      preguntaConRespuestas.respuestas_abiertas = [];\n      //obtiene las preguntas abiertas\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasAbiertas = await this.respuestaAbiertaRepository.find({\n          where: { id_pregunta: pregunta.id },\n        });\n        preguntaConRespuestas.respuestas_abiertas = respuestasAbiertas.map(\n          (r) => r.texto,\n        );\n      }\n\n      if (pregunta.opciones && pregunta.opciones.length > 0) {\n        for (const opcion of pregunta.opciones) {\n          // cuenta cuantas veces fue seleccionada cada opcion\n          const cantidadRespuestas = await this.respuestaOpcionRepository.count(\n            {\n              where: { id_opcion: opcion.id }, \n            },\n          );\n\n          //  Añade la opción con la cantidad de respuestas al DTO\n\n          preguntaConRespuestas.opciones.push({\n            id: opcion.id,\n            texto: opcion.texto,\n            numero: opcion.numero,\n            cantidad_respuestas: cantidadRespuestas,\n          });\n        }\n      }\n\n      resultado.preguntas.push(preguntaConRespuestas); //Añade la pregunta con sus respuestas al resultado final\n    }\n\n    return resultado;\n  }\n  /**\n   * Obtiene la estructura de una encuesta para participación\n   *\n   * @param id - ID numérico de la encuesta\n   * @param codigoParticipacion - Token UUID de participación\n   * @returns Objeto DTO con la estructura de la encuesta para participar\n   * @throws NotFoundException - Si la encuesta no existe o el token es inválido\n   * @throws BadRequestException - Si la encuesta ha vencido\n   */\n  async obtenerEncuestaParaParticipacion(\n    id: number,\n    codigoParticipacion: string,\n  ): Promise {\n    // Buscar la encuesta por ID y código de participación\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoRespuesta: codigoParticipacion, habilitada: true },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException(\n        'Encuesta no encontrada o código de participación inválido',\n      );\n    }\n\n    // Validar si la encuesta ha vencido\n    if (encuesta.fechaVencimiento) {\n      const ahora = new Date();\n      const fechaVencimiento = new Date(encuesta.fechaVencimiento);\n\n      console.log(\n        'Validando fecha de vencimiento en obtenerEncuestaParaParticipacion:',\n      );\n      console.log('Fecha actual:', ahora.toISOString());\n      console.log('Fecha vencimiento:', fechaVencimiento.toISOString());\n      console.log('¿Está vencida?:', fechaVencimiento  ({\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones.map((opcion) => ({\n          id: opcion.id,\n          texto: opcion.texto,\n          numero: opcion.numero,\n        })),\n      })),\n    };\n  }\n}\n\n// Guardamos respuestas de una encuesta anónima (registrarRespuestas).\n// Visualizamos los resultados de una encuesta (visualizarRespuestasDto).\n// Obtenemos los datos de una encuesta habilitada para que alguien pueda participar (obtenerEncuestaParaParticipacion).\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisualizarRespuestasDto.html":{"url":"classes/VisualizarRespuestasDto.html","title":"class - VisualizarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisualizarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                codigoRespuesta\n                            \n                            \n                                codigoResultados\n                            \n                            \n                                habilitada\n                            \n                            \n                                id\n                            \n                            \n                                nombre\n                            \n                            \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        habilitada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PreguntaConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  habilitada: boolean;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/controllers/encuestas.controller.ts\n            \n            controller\n            EncuestasController\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n            \n            class\n            ActualizarPreguntaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n            \n            class\n            CreateEncuestaResponseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta.dto.ts\n            \n            class\n            CreateEncuestaDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-opcion.dto.ts\n            \n            class\n            CreateOpcionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-pregunta.dto.ts\n            \n            class\n            CreatePreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n            \n            class\n            ObtenerEncuestaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/encuesta.entity.ts\n            \n            entity\n            Encuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/opcion.entity.ts\n            \n            entity\n            Opcion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/services/encuestas.service.ts\n            \n            injectable\n            EncuestasService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/opciones/controllers/opciones.controller.ts\n            \n            controller\n            OpcionesController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/opciones/services/opciones.service.ts\n            \n            injectable\n            OpcionesService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/modules/preguntas/controllers/preguntas.controller.ts\n            \n            controller\n            PreguntasController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/preguntas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/preguntas/services/preguntas.service.ts\n            \n            injectable\n            PreguntasService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/respuestas/controllers/respuestas.controller.ts\n            \n            controller\n            RespuestasController\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RegistrarRespuestasDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RespuestaPreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            OpcionConRespuestasDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            PreguntaConRespuestasDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            VisualizarRespuestasDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-abierta.entity.ts\n            \n            entity\n            RespuestaAbierta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-opcion.entity.ts\n            \n            entity\n            RespuestaOpcion\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/services/respuestas.service.ts\n            \n            injectable\n            RespuestasService\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.2\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            helmet : ^8.1.0\n        \n            node-fetch : ^3.3.2\n        \n            papaparse : ^5.5.3\n        \n            pg : ^8.14.1\n        \n            pm2 : ^6.0.6\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            shortid : ^2.2.17\n        \n            typeorm : ^0.3.24\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CodigoTipoEnum   (src/.../codigo-tipo.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/encuestas/enums/codigo-tipo.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CodigoTipoEnum\n                    \n                \n                        \n                            \n                                 RESULTADOS\n                            \n                        \n                        \n                            \n                                Value : RESULTADOS\n                            \n                        \n                        \n                            \n                                 RESPUESTA\n                            \n                        \n                        \n                            \n                                Value : RESPUESTA\n                            \n                        \n            \n        \n\n    src/modules/encuestas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                 VERDADERO_FALSO\n                            \n                        \n                        \n                            \n                                Value : VERDADERO_FALSO\n                            \n                        \n            \n        \n\n    src/modules/preguntas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                 VERDADERO_FALSO\n                            \n                        \n                        \n                            \n                                Value : VERDADERO_FALSO\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nno toques el\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EncuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpcionesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PreguntasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RespuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_providers\n\n\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_exports\n\n\n\ncluster_RespuestasModule_providers\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\nRespuestasService \n\nRespuestasService \n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\nOpcionesService\n\nOpcionesService\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\nPreguntasService\n\nPreguntasService\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
