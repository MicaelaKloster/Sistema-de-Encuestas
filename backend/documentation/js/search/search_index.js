var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ActualizarPreguntaDto.html",[0,0.098,1,2.077]],["body/classes/ActualizarPreguntaDto.html",[0,0.15,1,3.197,2,1.481,3,0.29,4,0.252,5,0.252,6,4.904,7,3.068,8,0.369,9,1.027,10,2.348,11,1.737,12,1.92,13,0.524,14,0.026,15,1.103,16,1.103,17,3.487,18,0.636,19,4.124,20,2.348,21,4.124,22,4.124,23,0.37,24,3.874,25,2.931,26,3.068,27,1.962,28,4.124,29,1.303,30,0.927,31,1.823,32,1.449,33,2.168,34,2.504,35,1.698,36,3.197,37,1.135,38,1.481,39,2.504,40,0.806,41,0.955,42,3.487,43,1.585,44,3.068,45,1.654,46,1.052,47,4.124,48,2.504,49,0.29,50,4.452,51,1.681,52,2.504,53,2.504,54,3.916,55,4.452,56,2.931,57,1.135,58,2.931,59,2.703,60,2.504,61,5.265,62,0.886,63,3.487,64,1.481,65,2.504,66,0.02,67,0.02]],["title/modules/AppModule.html",[68,1.314,69,2.285]],["body/modules/AppModule.html",[0,0.086,3,0.211,4,0.184,5,0.184,12,1.337,13,0.299,14,0.026,23,0.434,29,1.359,30,0.956,32,1.171,37,1.171,40,0.912,43,1.155,49,0.211,51,0.827,54,2.237,57,1.701,59,1.544,62,1.104,64,1.528,66,0.016,67,0.016,68,1.898,69,4.346,70,1.43,71,1.43,72,1.674,73,1.674,74,1.43,75,1.674,76,1.674,77,2.543,78,2.543,79,3.573,80,3.573,81,3.573,82,3.276,83,2.369,84,1.674,85,1.544,86,3.007,87,2.999,88,0.945,89,1.238,90,3.007,91,3.5,92,0.723,93,1.544,94,4.256,95,5.371,96,2.543,97,1.024,98,2.024,99,1.544,100,3.007,101,4.256,102,3.007,103,4.939,104,4.128,105,3.007,106,3.007,107,2.369,108,1.826,109,1.238,110,2.008,111,1.095,112,3.007,113,3.007,114,3.007,115,4.256,116,0.884,117,3.007,118,3.007,119,3.007,120,4.256,121,3.007,122,2.543,123,3.007,124,1.659,125,3.007,126,3.007,127,3.007,128,3.007,129,3.007,130,2.543,131,3.007,132,3.007,133,1.674,134,4.256,135,3.007,136,3.007,137,2.415,138,2.111,139,3.007,140,3.007,141,3.007,142,3.007,143,3.007,144,3.007,145,3.007,146,3.007,147,4.256,148,3.007,149,3.007,150,3.007,151,2.543,152,3.007,153,3.007,154,2.543,155,3.007,156,3.007,157,3.007,158,3.007,159,3.007,160,1.155,161,3.007,162,2.008,163,3.007,164,3.007,165,2.543,166,3.007,167,1.826,168,2.008,169,2.237,170,3.007,171,3.007,172,2.543,173,1.329,174,2.543,175,3.007,176,3.007,177,4.256,178,3.007,179,1.329,180,3.007,181,3.007]],["title/classes/CreateEncuestaDto.html",[0,0.098,182,1.756]],["body/classes/CreateEncuestaDto.html",[0,0.147,2,1.172,3,0.229,4,0.199,5,0.199,8,0.292,9,0.88,10,2.139,11,0.898,13,0.616,14,0.026,15,1.266,16,1.166,18,0.672,23,0.391,25,3.099,27,1.553,29,1.391,30,1.013,31,1.992,32,1.42,33,2.126,40,0.797,43,1.255,45,1.622,49,0.229,51,1.662,53,2.648,56,3.363,57,1.703,58,2.874,59,2.651,60,1.982,62,0.983,64,1.999,65,1.982,66,0.017,67,0.017,89,1.344,92,1.339,97,0.785,116,1.776,124,1.096,160,2.245,167,1.982,182,2.315,183,3,184,2.429,185,3.448,186,3.448,187,4.507,188,3.265,189,3.265,190,2.429,191,3.265,192,4.213,193,2.761,194,3.265,195,2.429,196,3.265,197,3.547,198,1.553,199,2.181,200,3.448,201,1.553,202,2.761,203,2.429,204,2.761,205,2.761,206,2.761,207,3.265,208,4.507,209,3.011,210,2.509,211,3.011,212,2.181,213,2.761,214,2.429,215,1.251,216,1.818,217,2.181,218,2.181,219,1.982,220,3.011,221,2.509,222,3.011,223,1.553,224,5.108,225,3.265,226,2.761,227,1.553,228,2.761,229,3.448,230,2.181,231,2.144,232,2.429,233,2.181,234,2.181,235,2.429,236,2.761,237,2.429,238,1.818,239,2.181,240,3.811,241,3.265,242,1.818,243,2.181]],["title/classes/CreateEncuestaResponseDto.html",[0,0.098,244,2.285]],["body/classes/CreateEncuestaResponseDto.html",[0,0.104,2,1.308,3,0.256,4,0.222,5,0.222,8,0.326,9,0.947,13,0.634,14,0.026,15,1.408,16,1.335,18,0.769,23,0.256,29,1.454,40,0.64,48,2.948,49,0.256,62,1.05,66,0.018,67,0.018,92,1.401,167,3.537,183,3.322,185,3.647,186,3.647,197,3.929,198,1.732,215,1.526,238,3.474,239,3.242,240,4.925,242,3.474,243,3.242,244,3.242,245,3.079,246,2.597,247,2.804,248,4.062,249,4.617,250,1.271,251,6.369,252,3.642,253,5.824,254,3.642,255,4.925,256,3.242,257,3.642,258,3.642,259,3.642,260,3.642,261,0.756,262,3.642,263,3.868]],["title/classes/CreateOpcionDto.html",[0,0.098,264,1.904]],["body/classes/CreateOpcionDto.html",[0,0.148,2,1.451,3,0.284,4,0.247,5,0.247,8,0.361,9,1.014,11,1.767,13,0.517,14,0.026,15,1.089,16,1.089,18,0.627,23,0.365,25,2.893,27,1.922,29,1.29,30,0.908,31,2.297,32,1.112,33,2.14,40,0.758,43,1.553,45,1.633,49,0.284,51,1.726,53,2.472,56,3.376,57,1.726,58,3.376,59,2.669,60,2.454,62,1.02,64,1.451,66,0.019,67,0.019,89,1.664,92,1.382,173,1.786,183,2.95,190,3.006,197,3.488,198,1.922,199,2.699,200,3.837,210,3.198,212,2.699,216,2.25,217,2.699,218,2.699,219,2.454,220,3.471,221,2.893,222,3.471,261,0.809,264,2.893,265,3.417,266,2.33,267,3.417,268,4.041,269,4.041,270,3.471,271,2.365,272,2.669,273,1.922,274,3.417,275,3.417]],["title/classes/CreatePreguntaDto.html",[0,0.098,192,2.285]],["body/classes/CreatePreguntaDto.html",[0,0.14,2,1.071,3,0.209,4,0.182,5,0.182,7,2.219,8,0.267,9,0.826,11,1.615,12,1.775,13,0.601,14,0.026,15,0.887,16,1.121,18,0.646,20,2.056,23,0.397,24,2.826,25,2.356,26,2.219,27,1.419,29,1.356,30,0.951,31,1.87,32,1.353,33,2.025,34,1.811,35,1.228,36,1.811,38,1.519,39,1.811,40,0.828,41,0.767,43,1.146,45,1.681,46,1.065,49,0.209,51,1.75,52,1.419,53,2.688,55,3.578,56,3.493,57,1.726,58,3.361,59,3.014,60,1.811,62,1.038,63,2.522,64,2.029,65,1.811,66,0.016,67,0.016,89,1.228,92,1.452,97,0.717,124,1.002,173,1.318,183,2.901,190,2.219,192,2.826,193,2.522,195,2.219,197,3.431,198,1.419,199,1.992,200,3.774,201,1.419,202,2.522,203,2.219,204,2.522,205,2.522,206,2.522,209,2.826,210,2.979,211,2.826,212,1.992,213,2.522,216,1.661,217,1.992,218,1.992,219,1.811,220,3.574,221,2.738,222,3.284,223,2.013,224,4.525,229,2.826,230,1.992,231,2.013,232,2.219,233,1.992,234,1.992,235,2.219,237,2.219,261,0.659,264,3.434,266,2.056,267,2.522,270,2.826,272,2.173,273,1.419,274,2.522,275,2.522,276,1.844,277,2.983,278,2.219,279,4.231,280,2.983,281,2.983,282,2.983,283,2.522,284,2.983,285,2.983,286,3.284,287,2.522,288,2.219,289,1.811,290,1.661,291,2.522,292,2.522,293,2.983]],["title/entities/Encuesta.html",[215,0.768,294,0.88]],["body/entities/Encuesta.html",[0,0.118,3,0.204,4,0.178,5,0.178,8,0.26,9,0.811,13,0.63,14,0.026,15,1.219,16,1.284,18,0.74,23,0.372,29,0.934,30,0.653,31,1.285,32,0.8,37,1.334,40,0.768,41,1.111,43,1.117,45,1.524,46,1.111,49,0.204,50,2.459,51,0.8,52,1.383,53,1.383,57,0.8,62,1.119,66,0.015,67,0.015,89,1.197,92,1.346,97,0.7,107,2.314,111,1.069,116,1.556,124,2.094,133,1.619,137,1.117,138,0.977,160,2.15,162,3.239,167,1.766,173,1.285,179,2.474,201,1.383,215,1.188,221,1.619,223,1.977,227,1.977,246,2.306,247,2.49,250,1.108,261,0.647,278,2.163,289,2.523,290,2.7,294,1.069,295,1.285,296,2.459,297,4.849,298,3.533,299,1.628,300,4.156,301,4.849,302,3.24,303,2.908,304,4.849,305,2.908,306,2.908,307,4.156,308,3.091,309,4.156,310,4.1,311,4.156,312,2.908,313,2.775,314,2.908,315,2.908,316,2.306,317,2.908,318,2.908,319,2.523,320,4.156,321,3.514,322,2.908,323,4.156,324,2.908,325,2.033,326,1.285,327,1.942,328,2.768,329,2.7,330,2.397,331,3.091,332,2.459,333,2.163,334,3.607,335,2.163,336,2.163,337,1.334,338,3.738,339,2.163,340,2.163,341,2.163,342,2.49,343,3.607,344,3.607,345,2.459,346,2.163,347,2.908,348,1.383,349,3.091,350,3.091,351,2.163,352,2.163,353,1.383,354,1.942,355,2.163,356,1.942,357,2.163,358,1.766,359,2.163,360,2.163]],["title/controllers/EncuestasController.html",[361,1.512,362,2.285]],["body/controllers/EncuestasController.html",[0,0.037,3,0.091,4,0.079,5,0.079,8,0.116,10,1.85,11,1.412,12,1.451,13,0.511,14,0.026,15,1.214,16,1.009,18,0.581,20,0.499,23,0.36,29,1.341,30,0.292,32,0.931,33,1.808,34,0.789,35,0.535,37,1.133,38,1.479,40,0.871,41,0.838,45,1.566,48,1.339,49,0.091,57,1.208,62,1.052,64,1.031,65,0.789,66,0.008,67,0.008,88,0.408,93,0.667,97,0.814,98,1.609,99,0.667,107,2.11,116,1.114,133,1.227,160,1.456,165,1.864,172,1.098,173,1.941,174,1.098,179,1.496,182,1.737,185,1.472,186,1.472,198,0.618,203,2.517,215,1.486,216,0.723,219,2.055,227,0.618,238,1.227,239,0.867,242,3.188,243,1.472,244,1.918,246,0.618,248,0.966,250,1.36,256,2.928,261,0.819,263,3.519,266,1.915,276,1.294,298,2.26,299,0.74,313,1.918,325,1.583,326,0.574,330,0.535,337,1.532,348,0.618,353,1.366,354,0.867,357,0.966,358,0.789,359,0.966,360,0.966,361,0.574,362,1.472,363,0.574,364,1.098,365,0.867,366,1.048,367,2.957,368,2.871,369,2.428,370,2.428,371,2.204,372,2.871,373,2.871,374,2.871,375,2.428,376,2.871,377,1.299,378,2.204,379,1.299,380,2.29,381,2.29,382,2.757,383,1.098,384,1.299,385,2.136,386,1.299,387,1.864,388,2.428,389,1.299,390,1.098,391,2.26,392,2.204,393,1.299,394,1.299,395,1.299,396,3.719,397,1.864,398,1.864,399,1.299,400,4.195,401,1.864,402,1.227,403,3.707,404,3.913,405,3.906,406,1.299,407,1.299,408,1.299,409,2.204,410,1.098,411,1.299,412,1.299,413,1.299,414,1.299,415,1.299,416,1.299,417,4.118,418,1.299,419,1.299,420,1.098,421,1.299,422,1.299,423,1.299,424,1.864,425,2.204,426,1.098,427,1.64,428,1.227,429,1.472,430,1.299,431,1.299,432,1.299,433,1.299,434,0.789,435,0.789,436,1.472,437,0.867,438,1.864,439,2.136,440,2.428,441,0.966,442,3.906,443,3.713,444,2.861,445,1.599,446,1.098,447,1.474,448,1.299,449,1.864,450,1.472,451,1.299,452,0.966,453,0.867,454,0.966,455,0.966,456,1.299,457,0.618,458,1.299,459,0.966,460,1.299,461,0.789,462,0.789,463,0.618,464,1.339,465,1.339,466,0.867,467,1.299,468,3.713,469,2.428,470,2.428,471,1.098,472,1.299,473,2.856,474,2.856,475,1.299,476,1.864,477,1.299,478,1.299,479,1.299,480,2.502,481,1.918,482,1.299,483,1.098,484,1.299,485,1.098,486,0.966,487,2.26,488,2.055,489,1.864,490,1.472,491,1.299,492,1.098,493,1.299,494,1.098,495,0.966,496,2.204,497,1.299,498,1.299,499,1.299,500,1.227,501,3.384,502,2.861,503,3.384,504,3.384,505,3.204,506,2.819,507,3.063,508,3.266,509,3.204,510,2.819,511,3.436,512,2.751,513,2.819,514,2.819,515,3.204,516,2.819,517,1.299,518,3.384,519,1.299,520,1.098,521,1.299,522,2.204,523,1.098,524,1.864,525,3.063,526,2.204,527,2.204,528,2.204,529,2.204,530,1.864,531,2.204,532,2.204,533,2.204,534,1.864,535,2.204,536,1.299,537,1.098,538,1.339,539,1.227,540,1.864,541,1.299,542,1.299,543,1.098,544,0.867,545,1.299,546,1.098,547,1.098,548,1.299,549,0.867,550,1.227,551,0.723,552,0.867,553,0.789,554,1.299,555,1.299,556,1.299,557,1.299,558,1.299,559,1.299,560,1.299,561,0.966,562,1.098,563,1.299,564,1.299]],["title/modules/EncuestasModule.html",[68,1.314,79,2.077]],["body/modules/EncuestasModule.html",[0,0.097,3,0.238,4,0.207,5,0.207,14,0.026,23,0.453,29,1.373,30,1.183,32,1.273,37,1.449,38,1.661,40,0.903,41,0.955,46,0.955,49,0.238,51,1.721,62,1.118,66,0.017,67,0.017,68,2.023,70,1.612,71,1.612,72,1.887,73,1.887,74,1.612,75,2.931,76,1.887,79,3.865,82,3.402,83,2.575,84,1.887,85,1.741,87,2.809,88,1.065,91,3.296,92,1.424,93,1.741,97,0.815,98,1.612,99,1.741,104,2.264,107,2.931,108,2.059,109,1.396,110,2.264,111,1.19,137,2.275,138,1.988,168,2.264,215,1.039,271,1.396,273,2.69,299,1.138,325,2.023,326,1.498,330,2.329,333,2.522,342,2.904,348,2.2,362,3.517,363,2.045,402,1.887,434,3.197,435,2.809,445,3.402,446,2.867,452,2.522,461,2.059,462,2.809,565,2.867,566,3.39,567,2.867,568,3.39,569,3.39,570,3.441,571,3.441,572,3.39,573,1.453,574,3.39,575,3.39,576,2.809,577,2.522,578,3.39,579,3.441,580,2.522,581,2.522,582,2.522,583,2.522,584,2.522,585,2.522,586,2.522,587,2.522]],["title/injectables/EncuestasService.html",[445,1.904,588,1.512]],["body/injectables/EncuestasService.html",[0,0.038,3,0.094,4,0.082,5,0.082,8,0.12,10,1.798,11,0.807,12,1.531,13,0.466,14,0.027,15,1.177,18,0.565,20,0.514,23,0.373,29,1.261,30,1.165,31,0.591,32,1.151,33,1.587,34,0.812,35,0.551,37,0.622,38,1.238,39,0.812,40,0.846,41,0.532,42,1.131,43,0.514,45,1.399,46,0.699,48,0.812,49,0.094,51,1.06,52,0.636,57,1.225,59,1.16,60,0.812,62,1.026,64,1.384,65,1.372,66,0.008,67,0.008,88,0.71,89,0.93,92,0.83,97,0.927,98,0.636,99,0.687,107,0.745,109,0.551,111,0.755,116,1.524,124,1.158,133,1.258,137,0.514,138,0.985,151,1.131,167,0.812,173,0.999,182,1.771,185,1.959,186,1.959,215,1.46,219,1.372,221,0.745,223,0.636,226,1.131,227,0.636,233,1.509,235,0.995,238,1.92,239,1.959,242,2.957,243,2.574,246,1.64,247,2.502,248,1.681,249,1.911,250,1.194,256,2.146,261,0.758,266,0.868,271,0.93,272,0.687,276,1.47,286,0.893,298,3.255,299,0.985,313,1.959,325,1.481,330,0.93,333,0.995,337,1.288,342,0.687,348,0.636,353,1.833,356,1.509,357,0.995,358,1.372,359,0.995,360,0.995,366,1.075,367,2.857,369,1.911,370,2.481,375,1.911,380,2.226,381,2.118,382,2.628,383,1.911,385,1.681,390,1.131,396,1.959,400,3.548,420,1.911,428,1.633,429,0.893,440,1.131,441,2.182,445,1.258,449,1.131,450,0.893,452,0.995,453,0.893,454,0.995,455,0.995,463,1.075,464,1.372,466,0.893,473,3.461,474,2.886,476,2.481,480,2.671,481,2.303,486,2.565,488,0.812,490,2.793,492,1.911,495,2.565,500,0.745,502,3.957,506,0.995,507,0.995,508,0.995,510,2.182,511,3.111,512,1.959,513,1.681,514,1.681,516,1.681,523,1.131,524,1.911,534,1.911,537,3.765,538,2.539,539,2.328,540,1.131,544,0.893,549,1.959,551,0.745,552,0.893,553,1.372,573,0.71,576,0.812,588,0.999,589,0.812,590,1.131,591,2.934,592,2.259,593,2.259,594,2.934,595,1.337,596,2.704,597,2.481,598,1.337,599,1.911,600,1.337,601,1.337,602,1.337,603,2.259,604,1.337,605,2.259,606,1.337,607,4.68,608,1.337,609,1.337,610,1.337,611,1.337,612,1.131,613,1.131,614,0.893,615,1.911,616,2.259,617,1.337,618,2.934,619,0.995,620,0.893,621,2.481,622,1.131,623,1.911,624,1.131,625,1.131,626,1.131,627,1.131,628,2.182,629,1.337,630,1.337,631,1.337,632,1.959,633,2.481,634,1.337,635,1.131,636,1.337,637,1.131,638,1.681,639,2.259,640,2.259,641,1.337,642,0.893,643,1.337,644,1.337,645,1.337,646,2.259,647,1.911,648,0.995,649,1.337,650,2.259,651,2.259,652,1.337,653,1.337,654,1.337,655,1.337,656,1.337,657,1.337,658,1.337,659,1.337,660,1.337,661,1.337,662,2.259,663,1.337,664,1.337,665,1.337,666,1.337,667,1.337,668,1.337,669,1.337,670,1.337,671,1.337,672,1.337,673,1.337,674,1.337,675,1.337,676,1.337,677,1.337,678,4.491,679,1.337,680,1.337,681,1.337,682,2.934,683,1.337,684,1.337,685,1.337,686,2.259,687,2.259,688,1.337,689,2.259,690,1.337,691,1.337,692,2.259,693,2.259,694,1.337,695,1.337,696,1.337,697,1.131,698,1.337,699,1.337,700,1.337,701,1.337,702,1.337,703,2.259,704,1.337,705,1.337,706,1.337,707,2.259,708,1.337,709,1.337,710,1.337,711,2.259,712,1.337,713,2.259,714,1.337,715,1.337,716,1.337,717,2.259,718,1.337,719,1.337,720,1.337,721,2.259,722,1.911,723,1.911,724,1.337,725,1.131,726,2.481,727,1.681,728,1.911,729,1.337,730,1.337,731,1.337,732,1.131,733,1.337,734,2.259,735,2.481,736,2.934,737,1.337,738,1.337,739,1.337,740,1.337,741,1.337,742,1.337,743,1.337,744,1.337,745,3.448,746,3.448,747,2.259,748,2.259,749,2.259,750,2.259,751,1.337,752,1.337,753,0.995,754,1.337,755,1.337,756,1.337,757,1.337,758,1.509,759,1.131,760,1.337,761,0.995,762,1.337,763,1.337,764,1.337,765,1.337,766,1.911,767,1.131,768,1.337,769,1.337,770,2.259,771,2.259,772,2.259,773,1.131,774,1.337]],["title/classes/ObtenerEncuestaDto.html",[0,0.098,391,2.285]],["body/classes/ObtenerEncuestaDto.html",[0,0.144,2,1.383,3,0.27,4,0.235,5,0.235,8,0.344,9,0.983,12,1.941,13,0.501,14,0.026,15,1.055,16,1.055,18,0.608,23,0.394,26,2.865,27,1.832,29,1.388,30,0.865,31,2.226,32,1.06,33,2.074,36,2.339,38,1.809,39,2.339,40,0.74,41,0.699,43,1.48,45,1.21,49,0.27,51,1.638,53,2.396,56,3.315,57,1.7,58,3.315,59,2.586,62,0.944,64,1.809,66,0.019,67,0.019,89,1.586,92,1.432,173,1.702,184,2.865,197,3.408,198,1.832,199,2.572,200,3.749,210,3.125,212,2.572,215,1.132,216,2.144,217,2.572,218,2.572,220,3.364,221,2.804,222,3.364,223,1.832,242,3.125,256,2.144,283,3.256,286,3.749,287,3.256,289,2.339,290,2.144,291,3.256,391,3.364,396,2.572,400,3.976,401,3.256,402,2.144,453,3.976,454,2.865,455,2.865,483,3.256,619,2.865,647,3.256,775,4.746,776,3.851,777,3.851,778,3.851,779,3.851,780,3.851,781,3.851,782,3.256,783,3.851,784,3.851]],["title/entities/Opcion.html",[294,0.88,573,1.075]],["body/entities/Opcion.html",[0,0.133,3,0.241,4,0.209,5,0.209,8,0.306,9,0.909,11,1.563,13,0.565,14,0.026,15,0.976,16,1.19,18,0.686,23,0.399,29,0.77,31,1.515,32,0.943,37,1.282,40,0.784,43,1.317,45,1.464,46,1.187,49,0.241,51,0.943,52,2.216,53,1.63,57,0.943,62,1.139,66,0.017,67,0.017,89,1.411,91,1.908,92,1.367,97,0.824,111,1.199,124,1.908,137,1.317,138,1.151,160,1.317,162,3.112,179,2.627,201,1.63,223,2.518,227,2.216,250,1.19,261,0.884,266,2.183,271,1.411,276,1.464,289,2.081,290,2.594,294,1.199,295,1.515,299,1.565,302,2.594,308,3.466,316,2.518,325,2.035,326,1.515,327,2.289,328,2.518,329,2.594,330,2.34,331,2.549,332,2.898,334,3.938,335,2.549,336,2.549,337,1.282,338,3.795,339,3.466,340,2.549,341,2.549,342,2.393,343,3.466,344,3.466,349,2.549,350,2.549,351,2.549,352,2.549,353,2.216,354,2.289,355,2.549,356,2.289,358,2.081,550,2.594,573,1.464,785,2.898,786,3.427,787,3.427,788,2.081,789,3.427,790,3.427,791,3.427,792,2.594,793,2.393,794,2.518,795,1.908,796,1.908,797,2.898,798,2.898,799,2.549,800,2.549,801,3.427]],["title/classes/OpcionConRespuestasDto.html",[0,0.098,802,2.077]],["body/classes/OpcionConRespuestasDto.html",[0,0.167,2,1.506,3,0.295,4,0.256,5,0.256,8,0.375,9,1.039,11,1.692,12,1.318,13,0.612,14,0.026,15,1.38,18,0.742,20,2.045,23,0.295,30,0.942,35,1.727,37,1.154,40,0.702,41,0.761,46,0.761,49,0.411,62,0.895,66,0.02,67,0.02,97,1.009,116,1.233,160,1.612,179,1.854,215,1.196,231,1.995,246,1.995,247,2.154,250,1.329,261,1.047,266,2.363,273,2.531,276,1.672,299,1.409,457,1.995,463,1.995,802,3.55,803,3.853,804,2.802,805,3.904,806,4.195,807,4.195,808,4.195,809,4.195,810,2.547,811,2.335,812,2.963,813,3.12,814,3.12,815,3.12,816,3.12,817,3.12,818,2.802,819,3.12,820,3.12]],["title/controllers/OpcionesController.html",[361,1.512,821,2.285]],["body/controllers/OpcionesController.html",[0,0.121,3,0.299,4,0.26,5,0.26,8,0.38,10,2.063,13,0.534,14,0.026,16,1.125,18,0.648,23,0.413,49,0.299,66,0.02,67,0.02,88,1.336,250,1.125,261,1.013,264,3.721,288,3.162,337,1.477,361,1.879,363,1.879,365,2.839,366,2.553,367,3.095,380,2.553,381,2.553,382,2.939,436,3.585,437,2.839,439,4.375,465,2.582,480,2.553,487,2.839,821,3.585,822,3.595,823,4.251,824,4.974,825,4.974,826,3.595,827,4.251,828,4.539,829,3.595,830,4.539,831,4.251,832,4.375,833,3.595,834,3.275,835,3.595,836,3.595,837,4.251,838,3.162,839,4.251,840,4.251,841,4.251]],["title/modules/OpcionesModule.html",[68,1.314,80,2.077]],["body/modules/OpcionesModule.html",[0,0.133,3,0.327,4,0.284,5,0.284,14,0.026,23,0.467,46,1.03,49,0.327,66,0.021,67,0.021,68,2.354,70,2.214,71,2.214,72,2.591,73,2.591,74,2.214,75,3.411,76,2.591,80,4.04,83,3.161,84,2.591,85,2.39,87,2.826,88,1.462,108,2.826,109,1.917,363,2.51,573,1.462,821,4.092,834,3.704,835,3.936,842,3.936,843,3.936,844,4.654,845,2.591,846,2.826,847,4.654,848,4.654]],["title/injectables/OpcionesService.html",[588,1.512,834,1.904]],["body/injectables/OpcionesService.html",[0,0.107,3,0.263,4,0.229,5,0.229,8,0.335,10,2.128,13,0.551,14,0.026,18,0.669,23,0.442,46,1.068,48,2.275,49,0.263,66,0.018,67,0.018,88,1.177,109,1.543,111,0.964,250,1.16,261,0.979,264,3.625,271,2.037,288,2.787,337,1.524,366,2.353,367,2.992,380,2.634,381,2.353,382,2.802,428,2.754,463,2.353,464,3.004,473,3.279,474,3.279,480,2.353,538,3.004,539,2.754,573,1.924,588,2.187,589,2.275,596,3.895,614,2.502,620,2.502,758,3.304,761,3.68,824,4.683,825,4.183,826,3.168,828,4.683,829,4.183,834,2.754,836,3.168,845,2.086,846,2.275,849,3.168,850,3.747,851,4.683,852,3.747,853,4.183,854,3.747,855,3.747,856,2.787,857,2.787,858,3.747,859,3.168,860,3.747,861,4.947,862,3.747,863,3.747,864,3.747,865,3.747,866,3.168]],["title/entities/Pregunta.html",[46,0.62,294,0.88]],["body/entities/Pregunta.html",[0,0.114,3,0.193,4,0.167,5,0.167,8,0.245,9,0.777,11,1.417,12,1.85,13,0.586,14,0.026,15,0.835,16,1.195,18,0.689,20,2.101,23,0.401,29,1.157,31,1.212,32,1.096,34,1.665,35,1.129,36,3.126,37,1.291,38,0.985,39,1.665,40,0.844,41,0.722,43,1.054,45,1.474,46,0.992,49,0.193,51,0.754,52,2.231,53,1.895,57,1.291,58,1.527,62,1.142,64,0.985,66,0.015,67,0.015,89,1.129,91,1.527,92,1.372,97,0.66,111,1.025,116,1.171,124,1.916,137,1.531,138,1.338,160,1.531,162,3.133,179,2.522,201,1.304,215,1.403,223,2.449,227,2.449,236,2.318,237,2.04,250,1.079,261,0.801,266,1.978,276,1.618,278,2.963,286,2.66,289,2.419,290,2.612,292,2.318,294,1.025,295,1.212,299,0.921,302,2.866,308,2.963,310,3.368,316,2.231,319,1.665,321,3.368,325,2.101,326,1.212,327,1.831,328,2.449,329,2.612,330,2.424,331,2.963,334,3.83,335,2.04,336,2.04,337,1.417,338,3.81,339,2.963,340,2.04,341,2.04,342,2.045,343,2.963,344,3.49,345,2.318,349,2.963,350,2.963,351,2.963,352,2.963,353,2.449,354,2.66,355,2.963,356,2.66,358,1.665,549,1.831,573,1.895,788,1.665,792,2.218,793,2.045,795,1.527,796,1.527,797,2.318,798,2.318,799,2.04,800,2.04,867,2.318,868,2.742,869,2.742,870,2.742,871,2.742,872,3.368,873,2.742,874,2.742,875,2.04,876,2.742,877,2.742,878,2.231,879,1.665,880,2.742,881,2.742,882,2.742,883,2.742,884,2.742,885,2.66,886,2.742,887,1.831]],["title/entities/Pregunta-1.html",[46,0.519,294,0.737,500,1.594]],["body/entities/Pregunta-1.html",[0,0.113,3,0.277,4,0.241,5,0.241,8,0.353,9,0.999,11,1.563,12,1.785,13,0.646,14,0.026,15,1.072,16,1.337,18,0.77,20,2.393,23,0.422,35,1.625,36,3.65,40,0.675,46,0.928,49,0.277,62,0.861,66,0.019,67,0.019,92,0.95,111,1.016,116,1.161,137,1.517,138,1.326,160,1.517,215,1.495,250,1.19,261,0.935,266,2.183,276,1.785,294,1.317,295,1.745,316,2.702,319,2.397,328,3.035,329,2.85,337,1.563,338,2.636,573,2.005,793,2.628,845,2.198,872,4.328,875,2.936,888,3.338,889,3.338,890,4.328,891,3.947,892,3.947,893,3.947,894,3.947,895,3.947,896,5.119,897,3.947,898,3.947,899,2.936]],["title/classes/PreguntaConRespuestasDto.html",[0,0.098,812,1.904]],["body/classes/PreguntaConRespuestasDto.html",[0,0.164,2,1.448,3,0.283,4,0.246,5,0.246,8,0.361,9,1.013,11,1.667,12,1.803,13,0.639,14,0.026,15,1.386,18,0.788,20,2.205,23,0.283,30,0.906,35,1.661,37,1.11,40,0.685,41,0.732,46,0.732,49,0.403,62,0.873,66,0.019,67,0.019,97,0.97,116,1.186,160,1.55,179,1.783,215,1.166,231,1.919,246,1.919,247,2.071,250,1.314,261,1.029,266,2.329,273,2.469,276,1.904,299,1.355,457,1.919,463,2.73,802,3.485,803,4.016,804,2.694,805,2.694,810,2.45,811,2.246,812,3.195,813,3.001,814,4.269,815,3.001,816,3.001,817,3.001,818,2.694,819,3.001,820,3.001,900,5.191,901,4.034,902,4.034,903,4.034,904,4.034,905,4.034]],["title/controllers/PreguntasController.html",[361,1.512,906,2.285]],["body/controllers/PreguntasController.html",[0,0.097,1,3.599,3,0.239,4,0.208,5,0.208,8,0.304,10,1.781,13,0.461,14,0.026,16,0.971,18,0.56,23,0.37,29,1.272,30,0.764,32,1.631,33,1.4,37,1.275,38,1.221,40,0.826,44,3.448,45,1.657,46,1.027,49,0.239,51,0.936,56,1.893,57,1.631,62,0.953,64,1.664,66,0.017,67,0.017,88,1.068,92,1.115,93,1.746,97,1.471,98,2.694,99,1.746,116,1.665,138,1.142,179,2.331,214,2.529,227,2.205,233,2.271,250,1.335,261,0.952,272,2.38,276,1.456,325,2.026,326,1.503,337,1.275,348,1.617,353,1.617,361,1.503,363,1.503,365,2.271,366,2.205,367,2.909,380,2.205,381,2.205,382,2.694,434,2.065,435,2.065,436,3.096,437,2.271,438,3.919,461,2.065,462,2.065,465,2.065,466,2.271,470,3.919,480,2.205,486,2.529,487,3.096,488,2.815,489,3.919,490,3.096,494,3.919,561,2.529,628,3.448,811,2.581,830,3.919,832,3.923,833,3.919,838,2.529,906,3.096,907,2.875,908,4.789,909,5.273,910,3.4,911,5.663,912,4.635,913,3.4,914,3.4,915,3.4,916,2.936,917,3.4,918,2.875,919,3.4,920,5.273,921,4.635,922,3.4,923,3.4,924,3.4,925,2.875,926,3.4,927,2.875,928,2.875,929,2.875,930,3.4]],["title/modules/PreguntasModule.html",[68,1.314,81,2.077]],["body/modules/PreguntasModule.html",[0,0.106,3,0.261,4,0.227,5,0.227,14,0.026,23,0.441,29,1.41,30,1.239,32,1.022,37,1.517,38,1.766,40,0.902,46,0.892,49,0.261,51,1.68,62,1.093,66,0.018,67,0.018,68,2.119,70,1.767,71,1.767,72,2.068,73,2.068,74,1.767,75,3.07,76,2.068,81,3.81,83,2.739,84,2.068,85,1.908,87,2.256,88,1.167,91,3.268,92,1.327,93,1.908,97,0.894,98,1.767,99,1.908,104,2.481,108,2.256,109,1.53,110,2.481,111,1.266,116,1.622,137,2.119,138,1.852,168,2.481,271,1.53,273,2.34,325,1.89,326,1.642,330,2.026,342,2.526,348,2.34,363,2.174,402,2.068,434,3.349,435,2.987,461,2.256,462,2.987,570,3.659,571,3.659,573,1.546,576,2.987,577,2.763,579,3.659,580,2.763,581,2.763,582,2.763,583,2.763,584,2.763,585,2.763,586,2.763,587,2.763,845,2.068,846,2.256,906,3.683,916,3.493,931,3.141,932,3.141,933,3.715,934,3.715,935,3.715,936,3.715]],["title/injectables/PreguntasService.html",[588,1.512,916,1.904]],["body/injectables/PreguntasService.html",[0,0.085,1,3.248,3,0.209,4,0.182,5,0.182,8,0.266,10,1.888,13,0.489,14,0.026,18,0.593,23,0.412,29,1.201,30,0.669,32,1.471,33,1.226,37,0.82,38,1.07,40,0.827,43,1.145,44,3.144,45,1.68,46,1.217,49,0.209,51,0.82,52,1.417,62,1.07,64,1.764,66,0.016,67,0.016,88,0.936,89,1.741,92,0.717,97,0.717,98,1.417,109,1.226,111,1.265,133,2.353,137,1.145,138,1,214,2.216,223,1.417,250,1.121,261,0.913,276,1.68,290,1.658,325,2.055,330,2.416,337,1.352,348,1.417,353,1.417,366,2.011,367,2.79,380,2.337,381,2.011,382,2.544,427,3.144,428,2.353,463,2.011,464,2.567,465,2.567,466,2.823,473,2.353,474,3.144,480,2.011,481,2.823,495,3.144,512,1.989,538,2.567,539,2.353,544,2.823,552,1.989,553,1.809,573,1.544,588,1.868,589,1.809,596,3.664,612,2.519,613,2.519,614,1.989,615,4.155,620,1.989,624,2.519,625,2.519,628,3.144,648,2.216,722,3.574,723,3.574,727,2.216,753,3.144,758,3.572,761,3.144,811,2.353,845,1.658,846,1.809,856,2.216,857,2.216,859,3.574,866,2.519,908,4.155,916,2.353,918,2.519,925,2.519,927,2.519,928,2.519,929,2.519,937,2.519,938,4.914,939,2.979,940,4.914,941,2.979,942,4.227,943,2.979,944,5.348,945,2.979,946,6.034,947,2.979,948,2.979,949,2.979,950,3.574,951,2.979,952,2.979,953,2.979,954,4.227,955,2.979,956,2.979,957,2.979,958,2.979]],["title/classes/RegistrarRespuestasDto.html",[0,0.098,959,1.904]],["body/classes/RegistrarRespuestasDto.html",[0,0.177,2,1.547,3,0.303,4,0.263,5,0.263,8,0.385,9,1.056,11,1.186,12,1.701,13,0.637,14,0.026,15,1.134,16,0.903,18,0.52,23,0.38,24,3.953,25,3.295,27,2.05,40,0.569,49,0.38,57,1.186,66,0.02,67,0.02,116,1.592,124,1.818,201,2.05,209,3.953,210,3.457,211,3.616,229,2.878,230,3.616,231,2.05,234,3.616,261,0.921,270,3.953,271,1.774,272,2.213,276,1.354,299,1.988,550,2.399,551,2.399,632,2.878,638,3.206,642,2.878,959,3.014,960,3.287,961,3.206,962,4.147,963,4.309,964,4.309,965,4.309,966,3.644,967,3.206,968,3.206]],["title/entities/Respuesta.html",[41,0.62,294,0.88]],["body/entities/Respuesta.html",[0,0.119,3,0.292,4,0.254,5,0.254,8,0.372,9,1.034,13,0.63,14,0.026,16,1.326,18,0.764,23,0.431,41,0.961,49,0.292,66,0.02,67,0.02,111,1.071,215,1.477,250,1.221,261,0.954,294,1.071,295,1.84,316,2.771,319,3.216,328,1.98,329,3.243,337,1.145,788,2.528,792,2.949,793,2.72,794,2.916,796,2.318,878,2.916,879,2.528,885,4.228,887,3.891,899,3.097,969,3.52,970,4.926,971,4.163,972,4.163,973,3.538,974,4.163,975,5.297,976,5.297,977,4.163,978,5.297,979,5.297,980,4.163,981,5.297,982,3.52]],["title/entities/Respuesta-1.html",[41,0.519,294,0.737,500,1.594]],["body/entities/Respuesta-1.html",[0,0.115,3,0.284,4,0.247,5,0.247,8,0.361,9,1.014,13,0.624,14,0.026,16,1.314,18,0.757,23,0.426,41,1.1,49,0.284,66,0.019,67,0.019,111,1.04,124,1.745,215,1.501,250,1.204,261,0.944,294,1.04,295,1.786,302,2.893,316,2.732,319,3.156,328,1.922,329,3.198,337,1.112,735,3.417,792,2.893,793,2.669,794,3.054,796,2.25,878,3.054,879,2.454,885,4.19,887,3.837,889,3.417,899,3.006,970,4.857,973,3.471,982,3.417,983,3.417,984,4.041,985,4.041,986,4.041,987,4.041,988,5.197,989,4.041,990,5.197,991,4.041]],["title/entities/RespuestaAbierta.html",[294,0.88,878,1.627]],["body/entities/RespuestaAbierta.html",[0,0.112,3,0.276,4,0.24,5,0.24,8,0.352,9,0.996,11,1.56,13,0.646,14,0.026,15,1.07,16,1.336,18,0.77,23,0.398,40,0.674,41,1.177,46,1.177,49,0.276,66,0.019,67,0.019,97,0.946,111,1.314,124,2.141,250,1.188,261,0.992,294,1.012,295,1.739,302,3.549,316,2.697,325,1.511,326,1.739,327,2.627,328,2.429,337,1.405,550,3.463,788,3.101,792,3.157,793,2.912,795,3.613,846,2.388,875,2.926,878,2.429,973,4.009,992,3.326,993,4.627,994,3.933,995,3.933,996,3.933,997,3.933,998,3.933,999,5.107,1000,3.933,1001,3.326,1002,3.933]],["title/entities/RespuestaOpcion.html",[294,0.88,794,1.627]],["body/entities/RespuestaOpcion.html",[0,0.118,3,0.292,4,0.254,5,0.254,8,0.372,9,1.032,13,0.63,14,0.026,16,1.326,18,0.764,23,0.409,41,1.192,49,0.292,66,0.02,67,0.02,111,1.069,124,2.057,250,1.219,261,1.007,294,1.069,295,1.837,302,3.411,316,2.768,328,1.976,337,1.456,573,2.065,788,3.212,792,3.24,793,2.989,794,2.516,795,3.601,845,2.313,973,4.092,993,4.706,1001,3.514,1003,3.514,1004,5.35,1005,4.155,1006,4.155,1007,4.155,1008,4.155,1009,4.155,1010,4.155]],["title/classes/RespuestaPreguntaDto.html",[0,0.098,962,2.285]],["body/classes/RespuestaPreguntaDto.html",[0,0.172,2,1.425,3,0.279,4,0.242,5,0.242,8,0.355,9,1.002,10,2.314,11,1.567,12,1.892,13,0.656,14,0.026,15,1.193,16,1.262,17,3.356,18,0.727,23,0.361,24,3.804,25,3.171,27,1.888,40,0.524,49,0.361,57,1.092,66,0.019,67,0.019,116,1.51,124,1.725,195,2.952,201,1.888,209,3.804,210,3.353,211,3.431,229,2.651,230,3.804,231,1.888,234,3.431,261,0.971,270,3.804,271,1.634,272,2.038,276,1.789,299,1.333,550,3.171,551,2.86,632,3.431,638,2.952,642,2.651,959,2.21,960,3.788,961,2.952,962,4.022,966,3.356,967,3.821,968,3.821,1011,3.969,1012,3.969,1013,3.969,1014,3.969,1015,3.969,1016,3.969,1017,3.969]],["title/controllers/RespuestasController.html",[361,1.512,1018,2.285]],["body/controllers/RespuestasController.html",[0,0.062,3,0.153,4,0.133,5,0.133,8,0.195,10,1.764,13,0.56,14,0.026,15,1.276,16,0.962,18,0.554,23,0.368,29,0.918,30,0.753,38,0.782,40,0.888,41,0.832,45,1.713,49,0.153,57,1.263,62,1.009,66,0.012,67,0.012,88,0.684,92,0.524,122,1.841,138,1.541,169,3.893,173,2.314,182,1.118,183,1.118,198,1.036,215,1.484,216,1.866,238,2.914,250,1.349,255,3.455,256,2.275,261,0.899,263,4.054,299,2.162,337,1.589,346,1.619,361,0.962,363,0.962,365,1.454,366,1.594,367,2.896,380,2.183,381,2.183,382,2.678,387,3.881,388,4.611,403,3.686,404,4.386,405,2.834,410,2.834,424,2.834,426,2.834,427,3.893,428,2.914,429,3.065,436,2.729,437,1.454,439,1.619,442,3.881,443,4.426,444,4.883,447,2.098,450,1.454,457,1.594,459,1.619,465,1.322,468,3.455,469,4.76,473,1.866,474,2.555,480,2.183,487,2.729,488,1.322,490,1.454,500,1.866,525,2.493,543,3.881,544,1.454,561,1.619,562,1.841,803,1.322,832,2.493,838,1.619,959,3.561,960,1.322,1018,2.238,1019,1.841,1020,3.455,1021,3.455,1022,4.086,1023,4.086,1024,1.841,1025,6.348,1026,3.352,1027,2.177,1028,2.177,1029,2.177,1030,4.956,1031,3.352,1032,5.629,1033,3.352,1034,3.352,1035,3.352,1036,4.59,1037,4.59,1038,2.177,1039,2.177,1040,2.177,1041,4.086,1042,2.177,1043,2.177,1044,2.177,1045,2.177,1046,4.59,1047,2.834,1048,2.177,1049,3.352,1050,2.177,1051,2.177,1052,2.177,1053,2.177,1054,2.177,1055,1.841,1056,2.177,1057,4.086,1058,2.177,1059,2.177,1060,2.177,1061,1.841,1062,3.352,1063,3.881,1064,4.086,1065,3.352,1066,2.177,1067,3.352,1068,2.177,1069,2.177,1070,2.177,1071,2.177,1072,2.177,1073,2.177,1074,2.177,1075,2.177]],["title/modules/RespuestasModule.html",[68,1.314,82,1.904]],["body/modules/RespuestasModule.html",[0,0.093,3,0.228,4,0.198,5,0.198,14,0.026,23,0.455,29,1.354,30,1.156,32,0.893,37,1.416,38,1.612,40,0.901,41,1.094,46,0.934,49,0.228,51,1.76,62,1.136,66,0.017,67,0.017,68,1.978,70,1.544,71,1.544,72,1.807,73,1.807,74,1.544,75,2.865,76,2.865,82,3.441,83,2.499,84,1.807,85,1.667,87,1.971,88,1.02,91,3.092,92,1.487,93,1.667,97,0.781,98,1.544,99,1.667,104,2.168,107,1.807,108,1.971,109,1.336,110,2.168,111,1.155,137,2.375,138,2.076,168,2.168,215,1.156,271,1.336,273,2.868,325,1.725,326,1.435,330,2.483,342,3.096,348,2.135,363,1.984,402,1.807,434,3.125,435,2.726,447,3.386,461,1.971,462,2.726,551,1.807,570,3.339,571,3.339,573,1.411,576,2.726,577,2.414,579,3.339,580,2.414,581,2.414,582,2.414,583,2.414,584,2.414,585,2.414,586,2.414,587,2.414,794,2.135,796,1.807,878,2.135,879,1.971,1018,3.437,1076,2.744,1077,2.744,1078,2.744,1079,3.246,1080,3.246,1081,3.246,1082,3.246,1083,4.489,1084,3.246,1085,2.744,1086,2.744,1087,2.744,1088,3.246]],["title/injectables/RespuestasService.html",[447,1.756,588,1.512]],["body/injectables/RespuestasService.html",[0,0.041,3,0.102,4,0.089,5,0.089,8,0.13,10,1.397,11,1.429,12,0.979,13,0.362,14,0.027,15,1.088,18,0.439,20,0.558,23,0.397,29,1.167,30,1.249,33,0.997,35,0.598,37,1.111,40,0.812,41,0.659,45,1.371,46,1.09,49,0.102,51,0.666,52,1.729,54,1.081,57,1.2,62,1.02,64,1.118,66,0.009,67,0.009,88,0.456,92,0.749,97,1.049,109,0.598,111,0.374,116,1.689,124,0.813,133,2.023,137,0.931,138,0.813,154,1.228,160,0.931,169,1.081,173,1.928,182,1.244,183,0.746,215,1.362,227,1.481,228,1.228,231,0.691,232,1.081,238,1.348,242,1.734,246,1.729,247,1.244,250,1.29,261,0.72,266,1.397,271,1.905,272,1.866,276,1.454,298,2.08,299,1.465,313,0.97,330,0.598,337,1,346,1.081,353,0.691,366,1.152,367,2.395,380,1.729,381,1.481,382,2.075,385,1.081,396,0.97,397,2.048,398,2.048,400,1.617,402,0.809,403,1.801,428,2.429,429,1.617,441,3.745,447,1.244,450,0.97,457,1.921,459,1.801,463,1.152,464,2.649,471,2.048,473,3.472,474,3.097,480,1.152,481,1.617,485,2.048,488,1.471,500,1.348,505,2.634,506,1.801,507,1.081,508,3.745,509,3.073,510,2.703,511,2.703,512,2.427,513,1.081,514,3.004,515,3.073,516,2.703,520,2.634,525,2.317,538,3.239,539,3.037,546,1.228,547,1.228,549,1.617,550,1.348,552,2.08,553,2.452,573,1.582,576,0.882,588,1.07,589,0.882,596,3.649,597,2.048,599,2.634,614,0.97,620,1.617,626,1.228,627,1.228,633,1.228,635,1.228,637,1.228,642,2.08,648,1.801,678,2.634,697,1.228,725,2.048,726,2.634,727,2.317,728,2.634,732,2.048,753,1.801,758,1.617,759,1.228,766,2.048,767,1.228,773,2.048,794,1.481,795,1.348,796,0.809,799,2.317,800,1.801,805,0.97,810,0.882,811,0.809,812,1.348,818,0.97,851,2.634,853,2.634,856,1.081,857,1.081,878,0.691,879,0.882,885,0.97,887,1.617,890,2.048,950,2.048,959,2.023,960,0.882,993,2.317,1004,2.634,1020,2.634,1021,2.634,1024,1.228,1047,1.228,1055,1.228,1061,1.228,1063,1.228,1085,1.228,1086,1.228,1087,1.228,1089,1.228,1090,1.453,1091,3.114,1092,3.114,1093,1.453,1094,4.627,1095,1.453,1096,1.453,1097,3.114,1098,4.039,1099,1.453,1100,1.453,1101,1.453,1102,1.453,1103,3.114,1104,1.453,1105,2.422,1106,1.453,1107,1.453,1108,1.453,1109,1.453,1110,2.422,1111,2.422,1112,1.453,1113,1.453,1114,1.453,1115,1.453,1116,1.453,1117,1.453,1118,1.453,1119,1.453,1120,1.453,1121,2.422,1122,1.453,1123,1.453,1124,3.114,1125,3.114,1126,1.453,1127,2.422,1128,1.453,1129,1.453,1130,1.453,1131,1.453,1132,1.453,1133,4.848,1134,1.453,1135,2.422,1136,1.453,1137,1.453,1138,2.422,1139,2.422,1140,2.422,1141,2.422,1142,3.114,1143,1.453,1144,1.453,1145,1.453,1146,1.453,1147,1.453,1148,1.453,1149,1.453,1150,1.453,1151,1.453,1152,2.422,1153,2.422,1154,2.422,1155,1.453,1156,1.453,1157,3.114,1158,1.453,1159,3.114,1160,3.114,1161,1.453,1162,1.453,1163,3.634,1164,2.422,1165,2.422,1166,1.453,1167,1.453,1168,2.422,1169,2.422,1170,1.453,1171,1.453,1172,1.453,1173,4.039,1174,3.114,1175,2.422,1176,1.453,1177,1.453,1178,1.453,1179,1.453,1180,1.453,1181,1.453,1182,1.453,1183,1.453,1184,1.453,1185,1.453,1186,1.453,1187,1.453,1188,1.453,1189,1.453,1190,1.453,1191,1.453,1192,2.422,1193,1.453,1194,1.453,1195,1.453,1196,1.453,1197,1.453,1198,2.422,1199,1.453,1200,1.453,1201,1.453,1202,1.453,1203,1.453,1204,1.453,1205,1.453,1206,1.453,1207,1.453,1208,1.453,1209,1.453]],["title/classes/VisualizarRespuestasDto.html",[0,0.098,457,1.627]],["body/classes/VisualizarRespuestasDto.html",[0,0.165,2,1.484,3,0.29,4,0.252,5,0.252,8,0.37,9,1.029,11,1.45,12,1.298,13,0.629,14,0.026,15,1.406,18,0.763,20,2.026,23,0.29,30,0.928,35,1.701,37,1.137,40,0.695,41,0.75,46,0.75,49,0.408,62,0.887,66,0.02,67,0.02,97,0.994,116,1.707,160,2.231,179,1.826,215,1.184,231,1.965,246,2.761,247,2.981,250,1.323,261,1.022,266,2.026,273,2.507,276,1.656,299,1.388,457,2.507,463,1.965,802,3.201,803,3.922,804,2.76,805,2.76,810,2.509,811,2.3,812,3.232,813,3.074,814,3.074,815,3.074,816,3.074,817,3.074,818,2.76,819,3.074,820,3.074,1210,4.132,1211,4.132,1212,4.132,1213,4.132,1214,4.132]],["title/coverage.html",[1215,3.462]],["body/coverage.html",[0,0.191,1,2.267,5,0.228,6,3.157,7,3.671,13,0.372,14,0.026,41,0.895,46,0.895,66,0.018,67,0.018,74,1.776,182,1.917,183,3.02,184,3.671,192,2.494,215,1.109,244,2.494,245,3.157,264,2.079,265,3.157,294,1.674,296,3.157,361,2.6,362,2.494,364,3.157,391,2.494,445,2.079,447,1.917,457,1.776,539,2.079,553,4.275,573,1.173,588,2.6,590,3.157,775,3.157,785,3.157,794,1.776,795,2.748,802,2.267,803,3.357,804,3.693,812,2.079,821,2.494,822,3.157,834,2.079,849,3.157,867,3.157,878,1.776,888,3.157,906,2.494,907,3.157,916,2.079,937,3.157,959,2.079,960,2.997,961,3.671,962,2.494,969,3.157,983,3.157,992,3.157,1003,3.157,1018,2.494,1019,3.157,1089,3.157,1215,2.778,1216,3.157,1217,3.734,1218,3.734,1219,3.157,1220,3.734,1221,6.584,1222,3.734,1223,6.117,1224,4.936,1225,6.284,1226,3.734,1227,4.936,1228,3.734,1229,3.734,1230,3.734,1231,3.734]],["title/dependencies.html",[71,1.955,1232,2.422]],["body/dependencies.html",[0,0.165,14,0.026,27,2.296,66,0.022,67,0.022,71,2.296,88,1.517,96,4.082,109,1.988,111,1.242,198,2.296,201,2.296,619,3.591,621,4.082,622,4.082,623,4.082,1233,6.225,1234,4.827,1235,4.827,1236,4.827,1237,4.827,1238,4.827,1239,4.827,1240,4.827,1241,4.827,1242,4.827,1243,4.827,1244,4.827,1245,4.827,1246,4.827,1247,4.827,1248,4.827,1249,4.827,1250,4.827,1251,4.827,1252,4.827,1253,4.827,1254,4.827,1255,4.827,1256,4.827]],["title/miscellaneous/enumerations.html",[1257,1.913,1258,3.475]],["body/miscellaneous/enumerations.html",[8,0.432,14,0.026,20,2.482,41,1.053,66,0.022,67,0.022,256,3.232,453,3.877,551,3.596,632,3.877,810,2.931,967,4.804,968,4.804,1257,3.224,1258,4.082,1259,4.827,1260,5.805,1261,5.805,1262,6.458,1263,4.827,1264,6.889,1265,4.827]],["title/miscellaneous/functions.html",[1257,1.913,1266,3.475]],["body/miscellaneous/functions.html",[8,0.484,14,0.023,66,0.023,67,0.023,74,3.104,1219,4.572,1257,3.611,1266,4.572,1267,5.406]],["title/index.html",[8,0.256,1268,2.864,1269,2.864]],["body/index.html",[4,0.211,14,0.025,66,0.017,67,0.017,85,3.153,93,3.282,130,3.957,263,2.094,404,4.237,530,2.916,596,2.094,1215,2.565,1216,3.957,1270,3.448,1271,3.448,1272,5.311,1273,4.679,1274,3.448,1275,3.448,1276,3.448,1277,3.448,1278,4.679,1279,5.311,1280,3.448,1281,5.696,1282,3.448,1283,6.391,1284,3.448,1285,6.281,1286,3.448,1287,3.448,1288,3.448,1289,4.679,1290,3.448,1291,3.448,1292,5.311,1293,3.448,1294,4.679,1295,3.448,1296,3.448,1297,3.448,1298,3.448,1299,3.448,1300,5.696,1301,6.141,1302,3.448,1303,4.679,1304,3.448,1305,3.448,1306,3.448,1307,3.448,1308,3.448,1309,6.141,1310,4.679,1311,5.696,1312,3.448,1313,4.679,1314,3.448,1315,3.448,1316,4.679,1317,6.141,1318,5.696,1319,3.448,1320,4.679,1321,3.448,1322,3.448,1323,3.448,1324,3.448,1325,5.696,1326,3.448,1327,3.448,1328,3.448,1329,3.448,1330,4.679,1331,3.448,1332,3.448,1333,3.448,1334,3.448,1335,3.448,1336,4.679,1337,3.448,1338,3.448,1339,3.448,1340,4.679,1341,3.448,1342,3.448,1343,4.817,1344,4.679,1345,3.448,1346,3.448,1347,3.448,1348,3.448,1349,3.448,1350,3.448,1351,3.448,1352,3.448,1353,4.679,1354,3.448,1355,3.448,1356,3.448,1357,3.448,1358,5.311,1359,3.448,1360,3.448,1361,3.448,1362,3.448,1363,3.448,1364,3.448,1365,4.679,1366,3.448,1367,3.448,1368,3.448,1369,3.448,1370,3.448,1371,4.679,1372,3.448,1373,3.448,1374,3.448,1375,4.679,1376,4.679,1377,3.448,1378,3.448,1379,3.448,1380,3.448,1381,3.448,1382,3.448,1383,3.448,1384,3.448,1385,3.448,1386,3.448,1387,3.448,1388,2.916,1389,3.448,1390,3.448,1391,3.448,1392,3.448,1393,3.448,1394,3.448,1395,2.916]],["title/modules.html",[70,2.214]],["body/modules.html",[14,0.022,66,0.022,67,0.022,69,3.459,70,2.463,79,3.144,80,3.144,81,3.144,82,2.883,1343,5.692,1396,6.732,1397,6.732,1398,6.732]],["title/overview.html",[1399,3.935]],["body/overview.html",[2,1.607,14,0.026,66,0.021,67,0.021,68,1.72,69,4.574,70,2.129,71,2.129,72,2.492,73,2.492,74,2.129,75,2.492,76,2.492,77,3.784,78,3.784,79,4.057,80,3.928,81,3.928,82,3.719,83,3.086,84,2.492,85,2.298,295,1.978,363,1.978,445,3.352,447,3.43,565,3.784,567,3.784,589,2.718,782,4.687,834,3.352,842,3.784,843,3.784,916,3.352,931,3.784,932,3.784,1076,3.784,1077,3.784,1078,3.784,1399,3.784,1400,4.475,1401,4.475,1402,4.475]],["title/properties.html",[9,0.802,1232,2.422]],["body/properties.html",[9,1.047,14,0.025,66,0.023,67,0.023,263,3.259,1388,4.538,1395,4.538,1403,5.367,1404,5.367,1405,5.367]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":553,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1404,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["0.3.24",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":500,"title":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["1'})@apiparam({name",{"_index":410,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["1'})@apiresponse({status",{"_index":423,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["1.5.4",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1402,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["11.1.2",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":636,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["2.2.17",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":424,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["201",{"_index":387,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["3.3.2",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":782,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"overview.html":{}}}],["4.0.2",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1036,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["404",{"_index":427,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["5",{"_index":1400,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1401,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["8.14.1",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":535,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["a.numero",{"_index":771,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["abc123def456",{"_index":405,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["abc123def456'})@apibody({type",{"_index":1033,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["abierta",{"_index":551,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"miscellaneous/enumerations.html":{}}}],["abierta.entity",{"_index":879,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["abierta.entity.ts",{"_index":992,"title":{},"body":{"entities/RespuestaAbierta.html":{},"coverage.html":{}}}],["abierta.entity.ts:15",{"_index":994,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:18",{"_index":1000,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:21",{"_index":995,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:24",{"_index":996,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:28",{"_index":997,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abierta.entity.ts:32",{"_index":998,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["abiertas",{"_index":642,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["acceder",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["accesible",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["acortar",{"_index":685,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["activo",{"_index":654,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualiza",{"_index":755,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizada",{"_index":954,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizar",{"_index":44,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizardto",{"_index":911,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarestadoencuesta",{"_index":591,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarestadoencuesta(id",{"_index":600,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["actualizarpregunta",{"_index":908,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["actualizarpregunta(id",{"_index":910,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["actualizarpregunta(idpregunta",{"_index":943,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["actualizarpreguntadto",{"_index":1,"title":{"classes/ActualizarPreguntaDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"coverage.html":{}}}],["agrega",{"_index":630,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ajusta",{"_index":1200,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["al",{"_index":227,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/RespuestasService.html":{}}}],["alias",{"_index":701,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["allowing",{"_index":1331,"title":{},"body":{"index.html":{}}}],["alternativa",{"_index":1067,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["alternativa)'})@apiparam({name",{"_index":1042,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["amazing",{"_index":1381,"title":{},"body":{"index.html":{}}}],["andwhere('encuesta.habilitada",{"_index":708,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["anidados",{"_index":206,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["api",{"_index":356,"title":{},"body":{"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["api/v1/encuestas/resultados/{id}?codigo={codigoresultados",{"_index":665,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["api/v1/respuestas/participar/{id}/{codigorespuesta",{"_index":663,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apibody",{"_index":1057,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apioperation",{"_index":442,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiparam",{"_index":443,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apiprefix",{"_index":658,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["apiproperty",{"_index":197,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty()@isnumber()@isnotempty",{"_index":267,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isstring",{"_index":187,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":190,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiproperty()@isuuid('4')@isnotempty",{"_index":776,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({description",{"_index":251,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["apiproperty({enum",{"_index":283,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["apiproperty({type",{"_index":193,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["apiresponse",{"_index":444,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["apitags",{"_index":1056,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apitags('respuestas",{"_index":1058,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["apiversion",{"_index":660,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["app_url",{"_index":652,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["application",{"_index":1301,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1278,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":69,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["arrayminsize",{"_index":207,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arrayminsize(1",{"_index":225,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arraynotempty",{"_index":208,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["arreglo",{"_index":224,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["asc",{"_index":717,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["asigna",{"_index":952,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["asociadas",{"_index":237,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Pregunta.html":{}}}],["async",{"_index":367,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["author",{"_index":1388,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autogenerada",{"_index":341,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["autoloadentities",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["automaticamente",{"_index":241,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["automáticamente",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{}}}],["await",{"_index":474,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["aws",{"_index":1320,"title":{},"body":{"index.html":{}}}],["añade",{"_index":485,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["añadirlo",{"_index":1114,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["b",{"_index":770,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["b.numero",{"_index":772,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["backers",{"_index":1382,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":441,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["badrequestexception('código",{"_index":540,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["badrequestexception('datos",{"_index":724,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["badrequestexception('encuesta",{"_index":754,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["base",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["based",{"_index":1315,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":655,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/encuestas/${encuestacreada.id}/resultados?codigo=${codigoresultados",{"_index":666,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["baseurl}/${apiprefix}/${apiversion}/respuestas/participar/${encuestacreada.id}/${codigorespuesta",{"_index":664,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["board",{"_index":1374,"title":{},"body":{"index.html":{}}}],["body",{"_index":436,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["body('habilitada",{"_index":560,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["boolean",{"_index":313,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["bootstrap",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":713,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["browse",{"_index":1398,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1396,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1273,"title":{},"body":{"index.html":{}}}],["busca",{"_index":753,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["buscar",{"_index":767,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["búsqueda",{"_index":1112,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cada",{"_index":231,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cadena",{"_index":60,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["cambiarestadoencuesta",{"_index":368,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["cambiarestadoencuesta(id",{"_index":377,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["campo",{"_index":764,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["cantidad",{"_index":1205,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cantidad_respuestas",{"_index":805,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["cantidadrespuestas",{"_index":1198,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["carga",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["cascade",{"_index":321,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["case",{"_index":711,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["caso",{"_index":689,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["catch",{"_index":534,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["channel",{"_index":1346,"title":{},"body":{"index.html":{}}}],["check",{"_index":1309,"title":{},"body":{"index.html":{}}}],["clase",{"_index":43,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["class",{"_index":0,"title":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"overview.html":{}}}],["clave",{"_index":339,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["clicks",{"_index":1330,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1314,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule",{"_index":565,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_encuestasmodule_imports",{"_index":566,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["cluster_encuestasmodule_providers",{"_index":567,"title":{},"body":{"modules/EncuestasModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule",{"_index":842,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_opcionesmodule_providers",{"_index":843,"title":{},"body":{"modules/OpcionesModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule",{"_index":931,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_preguntasmodule_providers",{"_index":932,"title":{},"body":{"modules/PreguntasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule",{"_index":1076,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_exports",{"_index":1078,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["cluster_respuestasmodule_providers",{"_index":1077,"title":{},"body":{"modules/RespuestasModule.html":{},"overview.html":{}}}],["codigo",{"_index":400,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["codigo_respuesta",{"_index":301,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigo_resultados",{"_index":304,"title":{},"body":{"entities/Encuesta.html":{}}}],["codigoparticipacion",{"_index":1094,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["codigoqr",{"_index":185,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigorespuesta",{"_index":246,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigoresultados",{"_index":247,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["codigotipo",{"_index":607,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["codigotipoenum",{"_index":453,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"miscellaneous/enumerations.html":{}}}],["codigotipoenum.respuesta",{"_index":502,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum.resultados",{"_index":537,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["codigotipoenum})@isenum(codigotipoenum)@isnotempty",{"_index":778,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["codigovisualizacion",{"_index":1103,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["column",{"_index":328,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column('int",{"_index":973,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["column({default",{"_index":314,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({name",{"_index":300,"title":{},"body":{"entities/Encuesta.html":{}}}],["column({nullable",{"_index":308,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["column({type",{"_index":875,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/RespuestaAbierta.html":{}}}],["columna",{"_index":338,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["come",{"_index":1337,"title":{},"body":{"index.html":{}}}],["como",{"_index":223,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["compatibilidad",{"_index":1069,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["con",{"_index":37,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["condición",{"_index":1111,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["conexión",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/configuration",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logger",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.logging",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configuraciones",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configuración",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["configuration",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":684,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.error('error",{"_index":692,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["console.log",{"_index":1133,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["console.log('información",{"_index":1180,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["console.log('opciones",{"_index":1140,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["console.log('preguntas",{"_index":1136,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["console.warn",{"_index":677,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["const",{"_index":473,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["construcción",{"_index":698,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor",{"_index":463,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"injectables/OpcionesService.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["constructor(encuestarepository",{"_index":595,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["constructor(opcionrepository",{"_index":850,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["constructor(preguntarepo",{"_index":939,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["constructor(private",{"_index":838,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["constructor(respuestarepository",{"_index":1090,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["construir",{"_index":1110,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["consulta",{"_index":492,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["consultas",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["conteo",{"_index":746,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["contienen",{"_index":583,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["contraseña",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["controlador",{"_index":461,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["controladores",{"_index":580,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["controller",{"_index":361,"title":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"coverage.html":{}}}],["controller('encuestas",{"_index":460,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["controller('preguntas",{"_index":919,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["controller('preguntas/:preguntaid/opciones",{"_index":837,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["controller('respuestas",{"_index":1059,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["controllers",{"_index":363,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["controllers/encuestas.controller",{"_index":569,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["controllers/opciones.controller",{"_index":847,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["controllers/respuestas.controller",{"_index":1080,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["convertir",{"_index":1209,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["convierte",{"_index":921,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["copia",{"_index":645,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["correctamente",{"_index":761,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["corta",{"_index":484,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["corto",{"_index":239,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["courses",{"_index":1352,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1215,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crea",{"_index":471,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["creación",{"_index":643,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["creada",{"_index":48,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{}}}],["crear",{"_index":219,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearencuesta",{"_index":369,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearencuesta(dto",{"_index":383,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["crearopcion",{"_index":824,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["crearopcion(preguntaid",{"_index":826,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["create",{"_index":213,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["create.php?url=${encodeuricomponent(url",{"_index":675,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["createencuestadto",{"_index":182,"title":{"classes/CreateEncuestaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["createencuestaresponsedto",{"_index":244,"title":{"classes/CreateEncuestaResponseDto.html":{}},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"coverage.html":{}}}],["createopciondto",{"_index":264,"title":{"classes/CreateOpcionDto.html":{}},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"coverage.html":{}}}],["createpreguntadto",{"_index":192,"title":{"classes/CreatePreguntaDto.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["createquerybuilder('encuesta",{"_index":700,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["cuantas",{"_index":1197,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuenta",{"_index":1196,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["cuerpo",{"_index":561,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["current_timestamp",{"_index":311,"title":{},"body":{"entities/Encuesta.html":{}}}],["cuántas",{"_index":817,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["código",{"_index":242,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["código'})@apiparam({name",{"_index":422,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["data",{"_index":216,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{}}}],["database",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":307,"title":{},"body":{"entities/Encuesta.html":{}}}],["datos",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["de",{"_index":40,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["debe",{"_index":1142,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["deben",{"_index":639,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["declaración",{"_index":579,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["declarations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["decorador",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["decoradores",{"_index":326,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{}}}],["deeper",{"_index":1348,"title":{},"body":{"index.html":{}}}],["default",{"_index":310,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["defecto",{"_index":881,"title":{},"body":{"entities/Pregunta.html":{}}}],["define",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["definidos",{"_index":291,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["definir",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["del",{"_index":32,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["delete",{"_index":833,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["delete(':id",{"_index":830,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{}}}],["dentro",{"_index":813,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["dependencies",{"_index":71,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1300,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1319,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1310,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1329,"title":{},"body":{"index.html":{}}}],["depuración",{"_index":520,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["depuración'})@apiparam({name",{"_index":399,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["desconocido",{"_index":694,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["description",{"_index":263,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"index.html":{},"properties.html":{}}}],["desde",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"controllers/RespuestasController.html":{}}}],["deshabilita",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["deshabilitada",{"_index":760,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["deshabilitar",{"_index":359,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["detallada",{"_index":398,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["determinar",{"_index":762,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["development",{"_index":1286,"title":{},"body":{"index.html":{}}}],["devolverla",{"_index":355,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["devtools",{"_index":1360,"title":{},"body":{"index.html":{}}}],["devuelve",{"_index":688,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["diferente",{"_index":1204,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["dinámico",{"_index":653,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["disable",{"_index":527,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["discord",{"_index":1345,"title":{},"body":{"index.html":{}}}],["disponibles",{"_index":1174,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["dive",{"_index":1347,"title":{},"body":{"index.html":{}}}],["documenta",{"_index":220,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["documentar",{"_index":199,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["documentation",{"_index":1216,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":33,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["dto.codigo",{"_index":497,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dto.preguntas",{"_index":631,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["dto.tipo",{"_index":498,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/create",{"_index":449,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["dtos/obtener",{"_index":451,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["dtos/visualizar",{"_index":1105,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["e2e",{"_index":1295,"title":{},"body":{"index.html":{}}}],["each",{"_index":230,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["efficient",{"_index":1274,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1307,"title":{},"body":{"index.html":{}}}],["ejecuta",{"_index":719,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ejemplo",{"_index":354,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["ejemplorespuesta",{"_index":548,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["el",{"_index":57,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["elegidas",{"_index":820,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["elemento",{"_index":229,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["elimina",{"_index":928,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminada",{"_index":866,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["eliminan",{"_index":956,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminar",{"_index":927,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["eliminaropcion",{"_index":825,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminaropcion(id",{"_index":829,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["eliminarpregunta",{"_index":909,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpregunta(id",{"_index":914,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["eliminarpreguntaconopciones",{"_index":938,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["eliminarpreguntaconopciones(idpregunta",{"_index":947,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["en",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["encontrada",{"_index":428,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuentra",{"_index":721,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta",{"_index":215,"title":{"entities/Encuesta.html":{}},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["encuesta'})@apiparam({name",{"_index":1031,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["encuesta'})@apiresponse({status",{"_index":386,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encuesta.codigorespuesta",{"_index":547,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.codigoresultados",{"_index":1181,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuesta.dto",{"_index":450,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.dto.ts",{"_index":184,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["encuesta.dto.ts:10",{"_index":777,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:15",{"_index":779,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["encuesta.dto.ts:18",{"_index":191,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:26",{"_index":196,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:31",{"_index":189,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.dto.ts:36",{"_index":188,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["encuesta.enlaceparticipacion",{"_index":478,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["encuesta.entity",{"_index":877,"title":{},"body":{"entities/Pregunta.html":{}}}],["encuesta.habilitada",{"_index":757,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta.id",{"_index":505,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.nombre",{"_index":506,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas",{"_index":890,"title":{},"body":{"entities/Pregunta-1.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas.foreach((pregunta",{"_index":773,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas.map((pregunta",{"_index":507,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuesta.preguntas.sort((a",{"_index":769,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuesta.respuestas",{"_index":735,"title":{},"body":{"injectables/EncuestasService.html":{},"entities/Respuesta-1.html":{}}}],["encuesta.respuestas)@joincolumn({name",{"_index":984,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["encuesta.respuestas.length",{"_index":752,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada",{"_index":649,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigorespuesta",{"_index":671,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.codigoresultados",{"_index":672,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestacreada.id",{"_index":670,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["encuestaid",{"_index":1098,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["encuestarepository",{"_index":599,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["encuestas",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/RespuestasModule.html":{}}}],["encuestas/dtos/actualizar",{"_index":918,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["encuestas/dtos/create",{"_index":836,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["encuestas/entities/encuesta.entity",{"_index":899,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["encuestas/entities/opcion.entity",{"_index":845,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{}}}],["encuestas/entities/pregunta.entity",{"_index":846,"title":{},"body":{"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{}}}],["encuestas/enums/tipos",{"_index":898,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["encuestascontroller",{"_index":362,"title":{"controllers/EncuestasController.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"coverage.html":{}}}],["encuestasmodule",{"_index":79,"title":{"modules/EncuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["encuestasservice",{"_index":445,"title":{"injectables/EncuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["endpoint",{"_index":470,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["enlace",{"_index":238,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["enlacecorto",{"_index":186,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlaceparticipacion",{"_index":248,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["enlacevisualizacion",{"_index":249,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"injectables/EncuestasService.html":{}}}],["ensure",{"_index":1305,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1364,"title":{},"body":{"index.html":{}}}],["entidad",{"_index":330,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["entidades",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["entities",{"_index":295,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"overview.html":{}}}],["entities/encuesta.entity",{"_index":452,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["entities/opcion.entity",{"_index":574,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/pregunta.entity",{"_index":572,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["entities/respuesta",{"_index":1083,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entities/respuesta.entity",{"_index":1082,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["entity",{"_index":294,"title":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["entity('respuestas",{"_index":982,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["entity('respuestas_abiertas",{"_index":1002,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["entity('respuestas_opciones",{"_index":1010,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["entorno",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":36,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["enumerador",{"_index":286,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["enumerations",{"_index":1258,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/codigo",{"_index":454,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["enums/tipos",{"_index":34,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{}}}],["env",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":678,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["error.message",{"_index":687,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["es",{"_index":54,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"injectables/RespuestasService.html":{}}}],["eslint",{"_index":526,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["eslint/no",{"_index":531,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["especifica",{"_index":884,"title":{},"body":{"entities/Pregunta.html":{}}}],["específica",{"_index":1061,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["específico",{"_index":697,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["esquema",{"_index":1203,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["est",{"_index":221,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["esta",{"_index":52,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["estado",{"_index":756,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["este",{"_index":576,"title":{},"body":{"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["esto",{"_index":1201,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["estructura",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["están",{"_index":1126,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["exactamente",{"_index":1162,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["example",{"_index":404,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"index.html":{}}}],["excepción",{"_index":723,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["exclude",{"_index":334,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluir",{"_index":335,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["excluye",{"_index":351,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["existe",{"_index":950,"title":{},"body":{"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["existentes",{"_index":883,"title":{},"body":{"entities/Pregunta.html":{}}}],["exitosamente",{"_index":388,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["exitosamente'})@apiresponse({status",{"_index":426,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["experience",{"_index":1350,"title":{},"body":{"index.html":{}}}],["explicitamente",{"_index":966,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["explícitamente",{"_index":504,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["exporta",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["exportación",{"_index":584,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["express",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["extra",{"_index":358,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["extrae",{"_index":922,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["falla",{"_index":536,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["false",{"_index":293,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["false})@isarray()@isoptional()@validatenested({each",{"_index":280,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["falso",{"_index":637,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["faltan",{"_index":1143,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["faltantes",{"_index":1137,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["fast",{"_index":1323,"title":{},"body":{"index.html":{}}}],["features",{"_index":1333,"title":{},"body":{"index.html":{}}}],["fechaactualizacion",{"_index":297,"title":{},"body":{"entities/Encuesta.html":{}}}],["fetch",{"_index":621,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["few",{"_index":1325,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["filter((ra",{"_index":738,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filter((ro",{"_index":748,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["filtra",{"_index":707,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["fina",{"_index":1208,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["flatmap((r",{"_index":736,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["focus",{"_index":1332,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1368,"title":{},"body":{"index.html":{}}}],["formato",{"_index":662,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["foránea",{"_index":797,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["framework",{"_index":1272,"title":{},"body":{"index.html":{}}}],["fue",{"_index":759,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["fueron",{"_index":819,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["full",{"_index":1363,"title":{},"body":{"index.html":{}}}],["funcionalidad",{"_index":357,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["función",{"_index":616,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["function",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1266,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1328,"title":{},"body":{"index.html":{}}}],["genera",{"_index":646,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generado",{"_index":240,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{}}}],["generamos",{"_index":634,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generando",{"_index":693,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generar",{"_index":476,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["generarcodigoqr",{"_index":592,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarcodigoqr(texto",{"_index":603,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto",{"_index":593,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["generarenlacecorto(url",{"_index":605,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["get(':id",{"_index":392,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados",{"_index":555,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get(':id/resultados')@apioperation({summary",{"_index":421,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo",{"_index":519,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('debug/:codigo')@apioperation({summary",{"_index":395,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo",{"_index":545,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('estructura/:codigo')@apioperation({summary",{"_index":416,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo",{"_index":517,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:codigo')@apioperation({summary",{"_index":413,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:id/:codigo",{"_index":499,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:id/:codigo')@apioperation({summary",{"_index":408,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('participar/:id/:tokenparticipacion",{"_index":1026,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:codigo",{"_index":541,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:codigo')@apioperation({summary",{"_index":432,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["get('resultados/:tokenvisualizacion",{"_index":1070,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["get('resultados/:tokenvisualizacion')@apioperation({summary",{"_index":1045,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["getting",{"_index":1268,"title":{"index.html":{}},"body":{}}],["global",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["globalmente",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":1355,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1378,"title":{},"body":{"index.html":{}}}],["guarda",{"_index":648,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["ha",{"_index":1108,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["habilita",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{}}}],["habilitada",{"_index":298,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["habilitado",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["habilitar/deshabilitar",{"_index":559,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["hace",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1349,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1338,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1353,"title":{},"body":{"index.html":{}}}],["here",{"_index":1386,"title":{},"body":{"index.html":{}}}],["host",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:3000",{"_index":657,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["http://tinyurl.com/api",{"_index":674,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["httpcode",{"_index":1052,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["httpcode(httpstatus.created",{"_index":1062,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["https://nestjs.com",{"_index":1392,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":1053,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["id",{"_index":250,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["id_encuesta",{"_index":885,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["id_encuesta'})@exclude",{"_index":868,"title":{},"body":{"entities/Pregunta.html":{}}}],["id_opcion",{"_index":1004,"title":{},"body":{"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta",{"_index":550,"title":{},"body":{"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["id_pregunta'})@exclude",{"_index":789,"title":{},"body":{"entities/Opcion.html":{}}}],["id_respuesta",{"_index":993,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{}}}],["identificar",{"_index":783,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["identifier",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["idopcion",{"_index":1173,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["idpregunta",{"_index":946,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["ids",{"_index":417,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["ignora",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreenvfile",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["importa",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["importación",{"_index":325,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{}}}],["imports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["imprimir",{"_index":1139,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["incluir",{"_index":503,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indica",{"_index":50,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"entities/Encuesta.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["información",{"_index":397,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["information",{"_index":1312,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1335,"title":{},"body":{"index.html":{}}}],["inicializar",{"_index":1189,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inject",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":588,"title":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["injectables",{"_index":589,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"overview.html":{}}}],["injectrepository",{"_index":614,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(encuesta",{"_index":626,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(opcion",{"_index":856,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(pregunta",{"_index":857,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuesta",{"_index":627,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaabierta",{"_index":1106,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["injectrepository(respuestaopcion",{"_index":1107,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["innerjoinandselect('encuesta.preguntas",{"_index":702,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["insert",{"_index":345,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["insertar",{"_index":347,"title":{},"body":{"entities/Encuesta.html":{}}}],["install",{"_index":1327,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1284,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":686,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["instancia",{"_index":235,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["integración",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["intentar",{"_index":522,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["interact",{"_index":1356,"title":{},"body":{"index.html":{}}}],["invalido",{"_index":1118,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["inválido",{"_index":429,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["inválido'})@apiresponse({status",{"_index":1035,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inválidos",{"_index":1037,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["inyección",{"_index":466,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["inyecta",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["inyectable",{"_index":625,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["inyectar",{"_index":612,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["isarray",{"_index":209,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isarray()@validatenested({each",{"_index":963,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["isenum",{"_index":26,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["isenum(codigotipoenum",{"_index":784,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isenum(tiposrespuestaenum",{"_index":63,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["isglobal",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":210,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber",{"_index":270,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isnumber()@isnotempty",{"_index":1011,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional",{"_index":24,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isarray()@isnumber",{"_index":1013,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isoptional()@isenum(tiposrespuestaenum",{"_index":21,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["isoptional()@isstring",{"_index":17,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring",{"_index":25,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["isstring()@isnotempty()@type(undefined",{"_index":1016,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["isuuid",{"_index":780,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["isuuid('4",{"_index":781,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{}}}],["itera",{"_index":1182,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["job",{"_index":1371,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1373,"title":{},"body":{"index.html":{}}}],["join",{"_index":1384,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":792,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["json.stringify(opcionesdisponibles",{"_index":1178,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["junto",{"_index":929,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["kamil",{"_index":1389,"title":{},"body":{"index.html":{}}}],["key",{"_index":1302,"title":{},"body":{"index.html":{}}}],["la",{"_index":62,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["lanza",{"_index":722,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["las",{"_index":30,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["le",{"_index":629,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["learn",{"_index":1341,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('pregunta.opciones",{"_index":704,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["legend",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["license",{"_index":1395,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1376,"title":{},"body":{"index.html":{}}}],["line",{"_index":529,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["linkedin",{"_index":1370,"title":{},"body":{"index.html":{}}}],["lista",{"_index":236,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["listas",{"_index":1190,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["llama",{"_index":494,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["lo",{"_index":920,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["load",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":1313,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1366,"title":{},"body":{"index.html":{}}}],["los",{"_index":38,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{}}}],["lógica",{"_index":570,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["makes",{"_index":1321,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1334,"title":{},"body":{"index.html":{}}}],["manejar",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["manejarán",{"_index":581,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["manera",{"_index":743,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["manytoone",{"_index":793,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["manytoone(undefined",{"_index":889,"title":{},"body":{"entities/Pregunta-1.html":{},"entities/Respuesta-1.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":788,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["map((ra",{"_index":740,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["marca",{"_index":624,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":1317,"title":{},"body":{"index.html":{}}}],["mayor",{"_index":1068,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["menos",{"_index":228,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["mensaje",{"_index":758,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["message",{"_index":543,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["metadata",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":366,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["mica",{"_index":360,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["miscellaneous",{"_index":1257,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":1375,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1289,"title":{},"body":{"index.html":{}}}],["module",{"_index":68,"title":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["modules",{"_index":70,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/encuestas/encuestas.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/opciones/opciones.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/preguntas/preguntas.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1311,"title":{},"body":{"index.html":{}}}],["muchos",{"_index":350,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["myśliwiec",{"_index":1390,"title":{},"body":{"index.html":{}}}],["método",{"_index":628,"title":{},"body":{"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["módulo",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["módulos",{"_index":434,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["múltiple",{"_index":638,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["name",{"_index":337,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["necesarios",{"_index":435,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["need",{"_index":1361,"title":{},"body":{"index.html":{}}}],["negocio",{"_index":571,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["nest",{"_index":1279,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1394,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":198,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["new",{"_index":539,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["next",{"_index":528,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["nico",{"_index":647,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["node",{"_index":622,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["node.js",{"_index":1271,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["notfoundexception",{"_index":620,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('encuesta",{"_index":732,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["notfoundexception('opción",{"_index":864,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["notfoundexception('pregunta",{"_index":859,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{}}}],["npm",{"_index":1283,"title":{},"body":{"index.html":{}}}],["nueva",{"_index":385,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["nuevo",{"_index":61,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["nuevos",{"_index":925,"title":{},"body":{"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["nullable",{"_index":302,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["nulos",{"_index":344,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["number",{"_index":261,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["numero",{"_index":266,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["número",{"_index":272,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["o",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["object",{"_index":218,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["object.assign(pregunta",{"_index":951,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["objeto",{"_index":232,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["objetos",{"_index":205,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["obligatorias",{"_index":1125,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["obtener",{"_index":396,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuesta",{"_index":370,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuesta(id",{"_index":390,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerencuestadebug",{"_index":371,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(@param('codigo",{"_index":521,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadebug(codigo",{"_index":394,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestadto",{"_index":391,"title":{"classes/ObtenerEncuestaDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["obtenerencuestaparaparticipacion",{"_index":1020,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipacion(id",{"_index":1024,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["obtenerencuestaparaparticipar",{"_index":372,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaparaparticipar(id",{"_index":407,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaparaparticiparlegacy",{"_index":373,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaparaparticiparlegacy(codigo",{"_index":412,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerencuestaporcodigo",{"_index":594,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerencuestaporcodigo(codigo",{"_index":609,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["obtenerestructuraencuesta",{"_index":374,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerestructuraencuesta(codigo",{"_index":415,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultados",{"_index":375,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultados(id",{"_index":420,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["obtenerresultadosencuesta",{"_index":376,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenerresultadosencuesta(codigo",{"_index":431,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtenida",{"_index":1075,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["obtenidas",{"_index":1049,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["obtenidos",{"_index":425,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["obtiene",{"_index":488,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["offer",{"_index":1372,"title":{},"body":{"index.html":{}}}],["official",{"_index":1318,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":329,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["onetomany(undefined",{"_index":319,"title":{},"body":{"entities/Encuesta.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["opcion",{"_index":573,"title":{"entities/Opcion.html":{}},"body":{"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["opcion.dto",{"_index":288,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["opcion.dto.ts",{"_index":265,"title":{},"body":{"classes/CreateOpcionDto.html":{},"coverage.html":{}}}],["opcion.dto.ts:14",{"_index":268,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.dto.ts:9",{"_index":269,"title":{},"body":{"classes/CreateOpcionDto.html":{}}}],["opcion.entity",{"_index":796,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["opcion.entity.ts",{"_index":1003,"title":{},"body":{"entities/RespuestaOpcion.html":{},"coverage.html":{}}}],["opcion.entity.ts:14",{"_index":1005,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:17",{"_index":1007,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:20",{"_index":1006,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:24",{"_index":1009,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.entity.ts:28",{"_index":1008,"title":{},"body":{"entities/RespuestaOpcion.html":{}}}],["opcion.id",{"_index":514,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion.id).length",{"_index":750,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcion.numero",{"_index":515,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["opcion.pregunta",{"_index":872,"title":{},"body":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}}}],["opcion.texto",{"_index":516,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["opcion_multiple_seleccion_multiple",{"_index":968,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcion_multiple_seleccion_simple",{"_index":967,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["opcional",{"_index":55,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["opcionalmente",{"_index":1117,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["opcionconrespuestasdto",{"_index":802,"title":{"classes/OpcionConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["opciones",{"_index":276,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["opcionesconteo",{"_index":745,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["opcionescontroller",{"_index":821,"title":{"controllers/OpcionesController.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"coverage.html":{}}}],["opcionesdisponibles",{"_index":1175,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["opcionesmodule",{"_index":80,"title":{"modules/OpcionesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OpcionesModule.html":{},"modules.html":{},"overview.html":{}}}],["opcionesservice",{"_index":834,"title":{"injectables/OpcionesService.html":{}},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"coverage.html":{},"overview.html":{}}}],["opcionguardada",{"_index":861,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["opcionrepo",{"_index":940,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["opcionrepository",{"_index":853,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["opción",{"_index":271,"title":{},"body":{"classes/CreateOpcionDto.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"injectables/OpcionesService.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["open",{"_index":1377,"title":{},"body":{"index.html":{}}}],["optional",{"_index":10,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["orden",{"_index":274,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["ordena",{"_index":715,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ordenar",{"_index":768,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["original",{"_index":682,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["otros",{"_index":587,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["out",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1399,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1130,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["p.id",{"_index":1135,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["p.numero).join",{"_index":1144,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["package",{"_index":1232,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":29,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["param",{"_index":437,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["param('codigo",{"_index":501,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["param('id",{"_index":487,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["param('preguntaid",{"_index":839,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["param('tokenparticipacion",{"_index":1064,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["param('tokenvisualizacion",{"_index":1072,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["parameters",{"_index":380,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["params",{"_index":493,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["parseintpipe",{"_index":832,"title":{},"body":{"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["part",{"_index":1362,"title":{},"body":{"index.html":{}}}],["participacion",{"_index":1116,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["participación",{"_index":403,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["participación'})@apiparam({name",{"_index":409,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["participado",{"_index":1109,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["participar",{"_index":253,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["parámetro",{"_index":489,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["parámetros",{"_index":491,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["password",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["pasándole",{"_index":924,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch",{"_index":438,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/PreguntasController.html":{}}}],["patch(':id",{"_index":912,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["patch(':id/habilitar",{"_index":378,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["permite",{"_index":346,"title":{},"body":{"entities/Encuesta.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["permitido",{"_index":292,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Pregunta.html":{}}}],["permitidos",{"_index":287,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["permitiendo",{"_index":343,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["permitir",{"_index":880,"title":{},"body":{"entities/Pregunta.html":{}}}],["personalizada",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["personalizado",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["pertenece",{"_index":799,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["petición",{"_index":923,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["pg",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1316,"title":{},"body":{"index.html":{}}}],["please",{"_index":1344,"title":{},"body":{"index.html":{}}}],["por",{"_index":353,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["port",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["posición",{"_index":275,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["possible",{"_index":1308,"title":{},"body":{"index.html":{}}}],["post",{"_index":439,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion",{"_index":1060,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post(':id/:tokenparticipacion')@httpcode(httpstatus.created)@apioperation({summary",{"_index":1029,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post('participar/:id/:tokenparticipacion",{"_index":1066,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post('participar/:id/:tokenparticipacion')@httpcode(httpstatus.created)@apioperation({summary",{"_index":1040,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["post()@apioperation({summary",{"_index":384,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["postgres",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgresql",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":365,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["pregunta",{"_index":46,"title":{"entities/Pregunta.html":{},"entities/Pregunta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["pregunta.dto",{"_index":214,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{}}}],["pregunta.dto.ts",{"_index":7,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"coverage.html":{}}}],["pregunta.dto.ts:12",{"_index":22,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.dto.ts:20",{"_index":277,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:25",{"_index":282,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:30",{"_index":285,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:37",{"_index":281,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["pregunta.dto.ts:8",{"_index":19,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["pregunta.encuesta",{"_index":320,"title":{},"body":{"entities/Encuesta.html":{}}}],["pregunta.entity",{"_index":332,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{}}}],["pregunta.id",{"_index":508,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.numero",{"_index":509,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones",{"_index":512,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.foreach((opcion",{"_index":1141,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["pregunta.opciones.length",{"_index":552,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.map((opcion",{"_index":513,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.opciones.sort((a",{"_index":774,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones?.length",{"_index":641,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["pregunta.opciones[0].id",{"_index":554,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["pregunta.texto",{"_index":510,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["pregunta.tipo",{"_index":511,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas",{"_index":1184,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.id",{"_index":1185,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.numero",{"_index":1186,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones",{"_index":1191,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.opciones.push",{"_index":1206,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.respuestas_abiertas",{"_index":1192,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.texto",{"_index":1187,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestas.tipo",{"_index":1188,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntaconrespuestasdto",{"_index":812,"title":{"classes/PreguntaConRespuestasDto.html":{}},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["preguntaid",{"_index":828,"title":{},"body":{"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{}}}],["preguntaopcion",{"_index":705,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["preguntarepo",{"_index":942,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["preguntarepository",{"_index":851,"title":{},"body":{"injectables/OpcionesService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["preguntas.opciones",{"_index":728,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["preguntas/:preguntaid/opciones",{"_index":823,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["preguntas/controllers/preguntas.controller",{"_index":935,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntas/services/preguntas.service",{"_index":934,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["preguntascontroller",{"_index":906,"title":{"controllers/PreguntasController.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"coverage.html":{}}}],["preguntasfaltantes",{"_index":1128,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.length",{"_index":1132,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasfaltantes.map((p",{"_index":1138,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasmodule",{"_index":81,"title":{"modules/PreguntasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PreguntasModule.html":{},"modules.html":{},"overview.html":{}}}],["preguntasobligatorias",{"_index":1120,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasobligatorias.filter",{"_index":1129,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasobligatorias.map((p",{"_index":1134,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasrespondidas",{"_index":1121,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasrespondidas.includes(p.id",{"_index":1131,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["preguntasservice",{"_index":916,"title":{"injectables/PreguntasService.html":{}},"body":{"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"coverage.html":{},"overview.html":{}}}],["primaria",{"_index":340,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["primarygeneratedcolumn",{"_index":316,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["primero",{"_index":523,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["principal",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["private",{"_index":464,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["procesamos",{"_index":742,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["procesar",{"_index":733,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["process.env.app_url",{"_index":656,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["process.env.global_prefix",{"_index":659,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["process.env.node_env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["producción",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progressive",{"_index":1270,"title":{},"body":{"index.html":{}}}],["project",{"_index":1281,"title":{},"body":{"index.html":{}}}],["promise",{"_index":382,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"classes/VisualizarRespuestasDto.html":{},"properties.html":{}}}],["propiedad",{"_index":53,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["propiedades",{"_index":31,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["proporciona",{"_index":1113,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["proporcionado",{"_index":709,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["proveedores",{"_index":582,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["pueda",{"_index":585,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["puede",{"_index":401,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["puerto",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncuestasService.html":{}}}],["qr",{"_index":243,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["qrcode",{"_index":623,"title":{},"body":{"injectables/EncuestasService.html":{},"dependencies.html":{}}}],["qrcode.todataurl(texto",{"_index":690,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["qu",{"_index":763,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["que",{"_index":51,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["query",{"_index":440,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["query('codigo",{"_index":556,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["query.addorderby('preguntaopcion.numero",{"_index":718,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigorespuesta",{"_index":712,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.andwhere('encuesta.codigoresultados",{"_index":714,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.getone",{"_index":720,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["query.orderby('pregunta.numero",{"_index":716,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["questions",{"_index":1342,"title":{},"body":{"index.html":{}}}],["r",{"_index":800,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["r.id_pregunta",{"_index":1123,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["r.opcion",{"_index":801,"title":{},"body":{"entities/Opcion.html":{}}}],["r.pregunta",{"_index":886,"title":{},"body":{"entities/Pregunta.html":{}}}],["r.respuestasabiertas",{"_index":737,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.respuestasopciones",{"_index":747,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["r.texto",{"_index":1195,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["ra",{"_index":975,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.id_pregunta",{"_index":739,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ra.respuesta",{"_index":976,"title":{},"body":{"entities/Respuesta.html":{}}}],["ra.texto",{"_index":741,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["read",{"_index":1385,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":465,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/OpcionesController.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["ready",{"_index":1299,"title":{},"body":{"index.html":{}}}],["real",{"_index":1357,"title":{},"body":{"index.html":{}}}],["recibe",{"_index":1063,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["reemplaza",{"_index":482,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["referencia",{"_index":798,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["reflect",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["registarrespuestasdto",{"_index":1097,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas",{"_index":1150,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registarrespuestasdto.respuestas.map",{"_index":1122,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registradas",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrar",{"_index":1030,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestas",{"_index":1021,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["registrarrespuestas(codigoparticipacion",{"_index":1096,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["registrarrespuestas(id",{"_index":1028,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestasalternativa",{"_index":1022,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestasalternativa(id",{"_index":1039,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registrarrespuestasdto",{"_index":959,"title":{"classes/RegistrarRespuestasDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["registrarrespuestasdto})@apiresponse({status",{"_index":1034,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["registro",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["registros",{"_index":882,"title":{},"body":{"entities/Pregunta.html":{}}}],["relacionada",{"_index":331,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["relacionadas",{"_index":348,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["relación",{"_index":349,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["relations",{"_index":727,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["relevantes",{"_index":669,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["repositorio",{"_index":615,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["repositorios",{"_index":613,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["repository",{"_index":596,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"index.html":{}}}],["representa",{"_index":273,"title":{},"body":{"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"modules/EncuestasModule.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["requerida",{"_index":1155,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["requerido",{"_index":557,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["required",{"_index":279,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["requiring",{"_index":1324,"title":{},"body":{"index.html":{}}}],["reset",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}],["resources",{"_index":1336,"title":{},"body":{"index.html":{}}}],["responder",{"_index":546,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/RespuestasService.html":{}}}],["responder'})@apiparam({name",{"_index":418,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respondidas",{"_index":1127,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["response",{"_index":673,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.dto",{"_index":456,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["response.dto.ts",{"_index":245,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":257,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:14",{"_index":259,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:17",{"_index":260,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:20",{"_index":258,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:23",{"_index":252,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:5",{"_index":262,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.dto.ts:8",{"_index":254,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{}}}],["response.ok",{"_index":676,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.statustext",{"_index":680,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["response.text",{"_index":683,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuesta",{"_index":41,"title":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["respuesta.encuesta",{"_index":323,"title":{},"body":{"entities/Encuesta.html":{}}}],["respuesta.entity",{"_index":1001,"title":{},"body":{"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{}}}],["respuesta.enum",{"_index":35,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuesta.enum.ts",{"_index":1262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respuestaabierta",{"_index":878,"title":{"entities/RespuestaAbierta.html":{}},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaabierta.respuesta",{"_index":988,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaabiertarepository",{"_index":1091,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada",{"_index":1147,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaguardada.id",{"_index":1157,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestaopcion",{"_index":794,"title":{"entities/RespuestaOpcion.html":{}},"body":{"entities/Opcion.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["respuestaopcion.respuesta",{"_index":990,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["respuestaopciones",{"_index":1084,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["respuestaopcionrepository",{"_index":1092,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta",{"_index":1149,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.id_pregunta",{"_index":1152,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones",{"_index":1159,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones.length",{"_index":1160,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.opciones[0",{"_index":1165,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.texto",{"_index":1154,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapregunta.tipo",{"_index":1153,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestapreguntadto",{"_index":962,"title":{"classes/RespuestaPreguntaDto.html":{}},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestarepository",{"_index":597,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["respuestas",{"_index":299,"title":{},"body":{"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dto",{"_index":1055,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dto.ts",{"_index":961,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"coverage.html":{}}}],["respuestas.dto.ts:14",{"_index":1012,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:19",{"_index":1017,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:27",{"_index":1015,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:33",{"_index":1014,"title":{},"body":{"classes/RespuestaPreguntaDto.html":{}}}],["respuestas.dto.ts:41",{"_index":965,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["respuestas.dtos",{"_index":459,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["respuestas.dtos.ts",{"_index":804,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["respuestas.dtos.ts:12",{"_index":901,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:13",{"_index":902,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:14",{"_index":904,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:15",{"_index":905,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:16",{"_index":903,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:17",{"_index":900,"title":{},"body":{"classes/PreguntaConRespuestasDto.html":{}}}],["respuestas.dtos.ts:25",{"_index":807,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:26",{"_index":809,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:27",{"_index":808,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:28",{"_index":806,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{}}}],["respuestas.dtos.ts:4",{"_index":1212,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:5",{"_index":1213,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:6",{"_index":1210,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:7",{"_index":1211,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.dtos.ts:8",{"_index":1214,"title":{},"body":{"classes/VisualizarRespuestasDto.html":{}}}],["respuestas.respuestasabiertas",{"_index":729,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones",{"_index":730,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas.respuestasopciones.opcion",{"_index":731,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["respuestas/dtos/visualizar",{"_index":458,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas/entities/respuesta",{"_index":981,"title":{},"body":{"entities/Respuesta.html":{}}}],["respuestas/entities/respuesta.entity",{"_index":333,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{}}}],["respuestas/respuestas.module",{"_index":575,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["respuestas/services/respuestas.service",{"_index":448,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["respuestas_abiertas",{"_index":814,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["respuestasabiertas",{"_index":887,"title":{},"body":{"entities/Pregunta.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"injectables/RespuestasService.html":{}}}],["respuestasabiertas.map",{"_index":1194,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["respuestascontroller",{"_index":1018,"title":{"controllers/RespuestasController.html":{}},"body":{"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"coverage.html":{}}}],["respuestasmodule",{"_index":82,"title":{"modules/RespuestasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/RespuestasModule.html":{},"modules.html":{},"overview.html":{}}}],["respuestasopciones",{"_index":970,"title":{},"body":{"entities/Respuesta.html":{},"entities/Respuesta-1.html":{}}}],["respuestasservice",{"_index":447,"title":{"injectables/RespuestasService.html":{}},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"coverage.html":{},"overview.html":{}}}],["respuestastexto",{"_index":734,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["resultado",{"_index":525,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["resultado.preguntas.push(preguntaconrespuestas",{"_index":1207,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["resultados",{"_index":256,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/RespuestasController.html":{},"miscellaneous/enumerations.html":{}}}],["results",{"_index":66,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retorna",{"_index":495,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{}}}],["retornar",{"_index":695,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["return",{"_index":480,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["returns",{"_index":381,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["ro",{"_index":978,"title":{},"body":{"entities/Respuesta.html":{}}}],["ro.opcion?.id",{"_index":749,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["ro.respuesta",{"_index":979,"title":{},"body":{"entities/Respuesta.html":{}}}],["run",{"_index":1285,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1306,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":1041,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["rutas",{"_index":462,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["rxjs",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["saber",{"_index":563,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["scalable",{"_index":1275,"title":{},"body":{"index.html":{}}}],["se",{"_index":481,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["sea",{"_index":59,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["según",{"_index":233,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["seleccion",{"_index":1172,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["seleccionada",{"_index":1163,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["seleccionar",{"_index":1161,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["select",{"_index":1177,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["ser",{"_index":402,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"classes/ObtenerEncuestaDto.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["serialización",{"_index":336,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["serializar",{"_index":352,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["server",{"_index":1276,"title":{},"body":{"index.html":{}}}],["services/encuestas.service",{"_index":446,"title":{},"body":{"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{}}}],["services/opciones.service",{"_index":835,"title":{},"body":{"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{}}}],["services/preguntas.service",{"_index":917,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["services/respuestas.service",{"_index":1081,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["servicio",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"modules/RespuestasModule.html":{}}}],["servicios",{"_index":467,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["setup",{"_index":1282,"title":{},"body":{"index.html":{}}}],["shortid",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["si",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["side",{"_index":1277,"title":{},"body":{"index.html":{}}}],["similar",{"_index":744,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["simple",{"_index":1326,"title":{},"body":{"index.html":{}}}],["sincronizar",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["sino",{"_index":1119,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["sobre",{"_index":1183,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["solicitud",{"_index":562,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["solo",{"_index":1171,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"modules/OpcionesModule.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"index.html":{}}}],["sponsors",{"_index":1380,"title":{},"body":{"index.html":{}}}],["src/.../codigo",{"_index":1259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tipos",{"_index":1261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts",{"_index":364,"title":{},"body":{"controllers/EncuestasController.html":{},"coverage.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:123",{"_index":414,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:161",{"_index":406,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:227",{"_index":433,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:244",{"_index":419,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:308",{"_index":430,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:319",{"_index":379,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:40",{"_index":389,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:62",{"_index":393,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/controllers/encuestas.controller.ts:85",{"_index":411,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["src/modules/encuestas/dtos/actualizar",{"_index":6,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/create",{"_index":183,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/dtos/obtener",{"_index":775,"title":{},"body":{"classes/ObtenerEncuestaDto.html":{},"coverage.html":{}}}],["src/modules/encuestas/encuestas.module.ts",{"_index":568,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["src/modules/encuestas/entities/encuesta.entity",{"_index":1085,"title":{},"body":{"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts",{"_index":296,"title":{},"body":{"entities/Encuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:13",{"_index":317,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:16",{"_index":318,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:23",{"_index":312,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:27",{"_index":322,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:30",{"_index":303,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:34",{"_index":306,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:38",{"_index":315,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/encuesta.entity.ts:41",{"_index":324,"title":{},"body":{"entities/Encuesta.html":{}}}],["src/modules/encuestas/entities/opcion.entity",{"_index":1087,"title":{},"body":{"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts",{"_index":785,"title":{},"body":{"entities/Opcion.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:19",{"_index":786,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:22",{"_index":791,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:25",{"_index":787,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/opcion.entity.ts:30",{"_index":790,"title":{},"body":{"entities/Opcion.html":{}}}],["src/modules/encuestas/entities/pregunta.entity",{"_index":1086,"title":{},"body":{"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts",{"_index":867,"title":{},"body":{"entities/Pregunta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:23",{"_index":870,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:26",{"_index":871,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:29",{"_index":874,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:38",{"_index":876,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:43",{"_index":869,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/pregunta.entity.ts:46",{"_index":873,"title":{},"body":{"entities/Pregunta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts",{"_index":969,"title":{},"body":{"entities/Respuesta.html":{},"coverage.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:16",{"_index":972,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:19",{"_index":974,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:23",{"_index":971,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:26",{"_index":977,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/entities/respuesta.entity.ts:29",{"_index":980,"title":{},"body":{"entities/Respuesta.html":{}}}],["src/modules/encuestas/enums/codigo",{"_index":1263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/enums/tipos",{"_index":810,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts",{"_index":590,"title":{},"body":{"injectables/EncuestasService.html":{},"coverage.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:107",{"_index":606,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:128",{"_index":604,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:142",{"_index":608,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:180",{"_index":611,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:22",{"_index":598,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:258",{"_index":601,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:281",{"_index":610,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/encuestas/services/encuestas.service.ts:32",{"_index":602,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts",{"_index":822,"title":{},"body":{"controllers/OpcionesController.html":{},"coverage.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:17",{"_index":827,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/controllers/opciones.controller.ts:25",{"_index":831,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["src/modules/opciones/opciones.module.ts",{"_index":844,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["src/modules/opciones/services/opciones.service.ts",{"_index":849,"title":{},"body":{"injectables/OpcionesService.html":{},"coverage.html":{}}}],["src/modules/opciones/services/opciones.service.ts:17",{"_index":854,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:41",{"_index":855,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/opciones/services/opciones.service.ts:9",{"_index":852,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts",{"_index":907,"title":{},"body":{"controllers/PreguntasController.html":{},"coverage.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:20",{"_index":913,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/controllers/preguntas.controller.ts:29",{"_index":915,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts",{"_index":888,"title":{},"body":{"entities/Pregunta-1.html":{},"coverage.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:15",{"_index":892,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:18",{"_index":893,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:21",{"_index":895,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:28",{"_index":897,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:31",{"_index":891,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/entities/pregunta.entity.ts:34",{"_index":894,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["src/modules/preguntas/enums/tipos",{"_index":1265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/preguntas/preguntas.module.ts",{"_index":933,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts",{"_index":937,"title":{},"body":{"injectables/PreguntasService.html":{},"coverage.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:15",{"_index":941,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:26",{"_index":945,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/preguntas/services/preguntas.service.ts:40",{"_index":948,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts",{"_index":1019,"title":{},"body":{"controllers/RespuestasController.html":{},"coverage.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:124",{"_index":1051,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:132",{"_index":1027,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:54",{"_index":1038,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/controllers/respuestas.controller.ts:95",{"_index":1043,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/dtos/registrar",{"_index":960,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/dtos/visualizar",{"_index":803,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta",{"_index":795,"title":{},"body":{"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity",{"_index":1104,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts",{"_index":983,"title":{},"body":{"entities/Respuesta-1.html":{},"coverage.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:16",{"_index":986,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:19",{"_index":987,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:23",{"_index":985,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:29",{"_index":989,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/entities/respuesta.entity.ts:35",{"_index":991,"title":{},"body":{"entities/Respuesta-1.html":{}}}],["src/modules/respuestas/respuestas.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/respuestas/respuestas.module.ts",{"_index":1079,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["src/modules/respuestas/services/respuestas.service",{"_index":1054,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts",{"_index":1089,"title":{},"body":{"injectables/RespuestasService.html":{},"coverage.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:21",{"_index":1093,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:226",{"_index":1102,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:309",{"_index":1095,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["src/modules/respuestas/services/respuestas.service.ts:37",{"_index":1099,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["start",{"_index":1287,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1290,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1291,"title":{},"body":{"index.html":{}}}],["started",{"_index":1269,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1280,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":469,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["stay",{"_index":1365,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1303,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1322,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["su",{"_index":486,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{}}}],["summary",{"_index":468,"title":{},"body":{"controllers/EncuestasController.html":{},"controllers/RespuestasController.html":{}}}],["support",{"_index":1343,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sus",{"_index":811,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["svg",{"_index":1397,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":200,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["switch",{"_index":710,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["synchronize",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["tabla",{"_index":342,"title":{},"body":{"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["table",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1304,"title":{},"body":{"index.html":{}}}],["temporalmente",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["tener",{"_index":640,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["tenga",{"_index":226,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"injectables/EncuestasService.html":{}}}],["test",{"_index":1294,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1297,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1296,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1292,"title":{},"body":{"index.html":{}}}],["text",{"_index":999,"title":{},"body":{"entities/RespuestaAbierta.html":{}}}],["texto",{"_index":11,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/RespuestaAbierta.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["thanks",{"_index":1379,"title":{},"body":{"index.html":{}}}],["this.encuestarepository",{"_index":699,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.create",{"_index":644,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestarepository.findone",{"_index":726,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["this.encuestarepository.save(encuesta",{"_index":650,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.encuestasservice.actualizarestadoencuesta(id",{"_index":564,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.crearencuesta(dto",{"_index":475,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarcodigoqr(enlacecorto",{"_index":479,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.generarenlacecorto",{"_index":477,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuesta",{"_index":496,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerencuestaporcodigo",{"_index":518,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.encuestasservice.obtenerresultados(id",{"_index":558,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.generarcodigoqr(enlacecorto",{"_index":668,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.generarenlacecorto(enlaceparticipacion",{"_index":667,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["this.opciones",{"_index":815,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.opcionesservice.crearopcion(preguntaid",{"_index":840,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionesservice.eliminaropcion(id",{"_index":841,"title":{},"body":{"controllers/OpcionesController.html":{}}}],["this.opcionrepo.delete",{"_index":957,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.opcionrepository.create",{"_index":860,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.delete(id",{"_index":865,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.find",{"_index":1176,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findone",{"_index":1164,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.opcionrepository.findoneby",{"_index":863,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.opcionrepository.save(opcion",{"_index":862,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntarepo.delete(idpregunta",{"_index":958,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findone",{"_index":955,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.findoneby",{"_index":949,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepo.save(pregunta",{"_index":953,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["this.preguntarepository.findone",{"_index":1151,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.preguntarepository.findoneby",{"_index":858,"title":{},"body":{"injectables/OpcionesService.html":{}}}],["this.preguntasservice.actualizarpregunta(id",{"_index":926,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.preguntasservice.eliminarpreguntaconopciones(id",{"_index":930,"title":{},"body":{"controllers/PreguntasController.html":{}}}],["this.respuestaabiertarepository.create",{"_index":1156,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.find",{"_index":1193,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaabiertarepository.save(respuestasabiertas",{"_index":1158,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.count",{"_index":1199,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.create",{"_index":1168,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestaopcionrepository.save(respuestaopcion",{"_index":1169,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.create",{"_index":1146,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestarepository.save(respuesta",{"_index":1148,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["this.respuestas_abiertas",{"_index":816,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["this.respuestasservice.obtenerencuestaparaparticipacion",{"_index":1074,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.registrarrespuestas",{"_index":1065,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(codigo",{"_index":542,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["this.respuestasservice.visualizarrespuestasdto(tokenvisualizacion",{"_index":1073,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["throw",{"_index":538,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/OpcionesService.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["time",{"_index":1358,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":309,"title":{},"body":{"entities/Encuesta.html":{}}}],["tinyurl",{"_index":679,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["tipo",{"_index":12,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["tipo.enum",{"_index":455,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["tipo.enum.ts",{"_index":1260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tipo_respuesta",{"_index":896,"title":{},"body":{"entities/Pregunta-1.html":{}}}],["tipos",{"_index":39,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["tiposrespuestaenum",{"_index":20,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"miscellaneous/enumerations.html":{}}}],["tiposrespuestaenum.abierta",{"_index":549,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"entities/Pregunta.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.opcion_multiple_seleccion_simple",{"_index":1170,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum.verdadero_falso",{"_index":633,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["tiposrespuestaenum})@isenum(tiposrespuestaenum)@isnotempty",{"_index":284,"title":{},"body":{"classes/CreatePreguntaDto.html":{}}}],["todas",{"_index":1124,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["token",{"_index":1032,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["tokenparticipacion",{"_index":1025,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["tokenvisualizacion",{"_index":1046,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["totalrespuestas",{"_index":751,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["touch",{"_index":1387,"title":{},"body":{"index.html":{}}}],["trabajar",{"_index":577,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["transfer",{"_index":217,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["transforma",{"_index":234,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["transformar",{"_index":203,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{}}}],["transformer",{"_index":201,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["true",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"injectables/RespuestasService.html":{}}}],["true})@exclude",{"_index":305,"title":{},"body":{"entities/Encuesta.html":{}}}],["true})@type(undefined",{"_index":195,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["true})@type(undefined)@isnotempty",{"_index":964,"title":{},"body":{"classes/RegistrarRespuestasDto.html":{}}}],["try",{"_index":524,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["tu",{"_index":1202,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["twitter",{"_index":1393,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateEncuestaResponseDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"controllers/OpcionesController.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"classes/RegistrarRespuestasDto.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"classes/RespuestaPreguntaDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["typeorm",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"entities/Encuesta.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"injectables/OpcionesService.html":{},"entities/Pregunta.html":{},"entities/Pregunta-1.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/Respuesta.html":{},"entities/Respuesta-1.html":{},"entities/RespuestaAbierta.html":{},"entities/RespuestaOpcion.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature",{"_index":1088,"title":{},"body":{"modules/RespuestasModule.html":{}}}],["typeormmodule.forfeature([encuesta",{"_index":578,"title":{},"body":{"modules/EncuestasModule.html":{}}}],["typeormmodule.forfeature([opcion",{"_index":848,"title":{},"body":{"modules/OpcionesModule.html":{}}}],["typeormmodule.forfeature([pregunta",{"_index":936,"title":{},"body":{"modules/PreguntasModule.html":{}}}],["typeormmodule.forrootasync",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":530,"title":{},"body":{"controllers/EncuestasController.html":{},"index.html":{}}}],["un",{"_index":64,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"injectables/RespuestasService.html":{}}}],["una",{"_index":45,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"controllers/PreguntasController.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["undefined",{"_index":278,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"entities/Pregunta.html":{}}}],["undefined})@isarray()@arraynotempty()@arrayminsize(1)@validatenested({each",{"_index":194,"title":{},"body":{"classes/CreateEncuestaDto.html":{}}}],["une",{"_index":703,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unit",{"_index":1293,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":691,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["unlicensed",{"_index":1405,"title":{},"body":{"properties.html":{}}}],["uno",{"_index":289,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{}}}],["unused",{"_index":532,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["updatedto",{"_index":944,"title":{},"body":{"injectables/PreguntasService.html":{}}}],["updates",{"_index":1367,"title":{},"body":{"index.html":{}}}],["url",{"_index":490,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"controllers/PreguntasController.html":{},"controllers/RespuestasController.html":{}}}],["usamos",{"_index":651,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["usando",{"_index":681,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["usar",{"_index":765,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["usefactory",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["username",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":1359,"title":{},"body":{"index.html":{}}}],["usuario",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/RespuestasService.html":{}}}],["utilidad",{"_index":202,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["utilidades",{"_index":327,"title":{},"body":{"entities/Encuesta.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"entities/RespuestaAbierta.html":{}}}],["utilizado",{"_index":586,"title":{},"body":{"modules/EncuestasModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{}}}],["utilizando",{"_index":472,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["uuid",{"_index":619,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/ObtenerEncuestaDto.html":{},"dependencies.html":{}}}],["uuids",{"_index":617,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v1",{"_index":661,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["v4",{"_index":618,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacía",{"_index":696,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["vacío",{"_index":222,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["valida",{"_index":56,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"controllers/PreguntasController.html":{}}}],["validaciones",{"_index":28,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["validadores",{"_index":212,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["validar",{"_index":204,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{}}}],["validatenested",{"_index":211,"title":{},"body":{"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{}}}],["validator",{"_index":27,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"dependencies.html":{}}}],["valor",{"_index":58,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreateOpcionDto.html":{},"classes/CreatePreguntaDto.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Pregunta.html":{}}}],["valores",{"_index":290,"title":{},"body":{"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"classes/ObtenerEncuestaDto.html":{},"entities/Opcion.html":{},"entities/Pregunta.html":{},"injectables/PreguntasService.html":{}}}],["value",{"_index":1264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["variables",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["vars",{"_index":533,"title":{},"body":{"controllers/EncuestasController.html":{}}}],["veces",{"_index":818,"title":{},"body":{"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["verdadero",{"_index":635,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["verdadero/falso",{"_index":1167,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["verdadero_falso",{"_index":632,"title":{},"body":{"injectables/EncuestasService.html":{},"classes/RegistrarRespuestasDto.html":{},"classes/RespuestaPreguntaDto.html":{},"miscellaneous/enumerations.html":{}}}],["verificar",{"_index":725,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["version",{"_index":1403,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":483,"title":{},"body":{"controllers/EncuestasController.html":{},"classes/ObtenerEncuestaDto.html":{}}}],["video",{"_index":1351,"title":{},"body":{"index.html":{}}}],["vinculada",{"_index":1145,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visit",{"_index":1340,"title":{},"body":{"index.html":{}}}],["visualización",{"_index":1047,"title":{},"body":{"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{}}}],["visualizar",{"_index":255,"title":{},"body":{"classes/CreateEncuestaResponseDto.html":{},"controllers/RespuestasController.html":{}}}],["visualizarlas",{"_index":1179,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestas",{"_index":1023,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestas(tokenvisualizacion",{"_index":1044,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualizarrespuestasdto",{"_index":457,"title":{"classes/VisualizarRespuestasDto.html":{}},"body":{"controllers/EncuestasController.html":{},"classes/OpcionConRespuestasDto.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/RespuestasController.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{},"coverage.html":{}}}],["visualizarrespuestasdto(codigovisualizacion",{"_index":1101,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["visualizarrespuestasdto})@apiresponse({status",{"_index":1050,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["visualize",{"_index":1354,"title":{},"body":{"index.html":{}}}],["válida",{"_index":1166,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["válido",{"_index":65,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{}}}],["válidos",{"_index":42,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{},"injectables/EncuestasService.html":{}}}],["watch",{"_index":1288,"title":{},"body":{"index.html":{}}}],["website",{"_index":1391,"title":{},"body":{"index.html":{}}}],["where('encuesta.id",{"_index":706,"title":{},"body":{"injectables/EncuestasService.html":{}}}],["wherecondition",{"_index":766,"title":{},"body":{"injectables/EncuestasService.html":{},"injectables/RespuestasService.html":{}}}],["wherecondition.id",{"_index":1115,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["working",{"_index":1339,"title":{},"body":{"index.html":{}}}],["x",{"_index":1369,"title":{},"body":{"index.html":{}}}],["xito",{"_index":544,"title":{},"body":{"controllers/EncuestasController.html":{},"injectables/EncuestasService.html":{},"injectables/PreguntasService.html":{},"controllers/RespuestasController.html":{}}}],["xyz789uvw012",{"_index":1071,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["xyz789uvw012'})@apiresponse({status",{"_index":1048,"title":{},"body":{"controllers/RespuestasController.html":{}}}],["y",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEncuestaDto.html":{},"classes/CreatePreguntaDto.html":{},"entities/Encuesta.html":{},"controllers/EncuestasController.html":{},"modules/EncuestasModule.html":{},"injectables/EncuestasService.html":{},"entities/Opcion.html":{},"classes/OpcionConRespuestasDto.html":{},"entities/Pregunta.html":{},"classes/PreguntaConRespuestasDto.html":{},"controllers/PreguntasController.html":{},"modules/PreguntasModule.html":{},"injectables/PreguntasService.html":{},"entities/RespuestaAbierta.html":{},"modules/RespuestasModule.html":{},"injectables/RespuestasService.html":{},"classes/VisualizarRespuestasDto.html":{}}}],["ya",{"_index":47,"title":{},"body":{"classes/ActualizarPreguntaDto.html":{}}}],["yes",{"_index":1100,"title":{},"body":{"injectables/RespuestasService.html":{}}}],["you'd",{"_index":1383,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1298,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/EncuestasModule.html":{},"modules/OpcionesModule.html":{},"modules/PreguntasModule.html":{},"modules/RespuestasModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ActualizarPreguntaDto.html":{"url":"classes/ActualizarPreguntaDto.html","title":"class - ActualizarPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActualizarPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(TiposRespuestaEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/actualizar-pregunta.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, IsEnum } from 'class-validator'; // Validaciones para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enum con los tipos de respuesta válidos\n\n// Clase DTO para actualizar una pregunta ya creada\nexport class ActualizarPreguntaDto {\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsString() // Valida que el valor sea una cadena de texto\n  texto?: string; // Nuevo texto de la pregunta\n\n  @IsOptional() // Indica que esta propiedad es opcional\n  @IsEnum(TiposRespuestaEnum) // Valida que sea un valor válido del enum TiposRespuestaEnum\n  tipo?: TiposRespuestaEnum; // Nuevo tipo de respuesta para la pregunta\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EncuestasModule\n                        \n                        \n                            OpcionesModule\n                        \n                        \n                            PreguntasModule\n                        \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'; // Decorador para definir un módulo en NestJS\nimport { ConfigModule, ConfigService } from '@nestjs/config'; // Módulo y servicio para manejar configuraciones\nimport configuration from './config/configuration'; // Archivo de configuración personalizado\nimport { EncuestasModule } from './modules/encuestas/encuestas.module'; // Módulo de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo para la integración con TypeORM\nimport { PreguntasModule } from './modules/preguntas/preguntas.module';\nimport { RespuestasModule } from 'src/modules/respuestas/respuestas.module';\nimport { OpcionesModule } from './modules/opciones/opciones.module';\n\n@Module({\n  imports: [\n    // Importa el módulo de encuestas y preguntas\n    EncuestasModule,\n    PreguntasModule,\n    RespuestasModule,\n    OpcionesModule,\n    // Configuración global del módulo de configuración\n    ConfigModule.forRoot({\n      load: [configuration], // Carga la configuración personalizada desde un archivo\n      isGlobal: true, // Hace que el módulo de configuración sea accesible globalmente\n      ignoreEnvFile: process.env.NODE_ENV === 'production', // Ignora el archivo .env si el entorno es producción\n    }),\n\n    // Configuración de TypeORM para la conexión con la base de datos\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule], // Importa el módulo de configuración para acceder a las variables de entorno\n      inject: [ConfigService], // Inyecta el servicio de configuración\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres', // Tipo de base de datos (PostgreSQL)\n        host: configService.get('database.host'), // Host de la base de datos\n        port: configService.get('database.port'), // Puerto de la base de datos\n        username: configService.get('database.username'), // Usuario de la base de datos\n        password: configService.get('database.password'), // Contraseña de la base de datos\n        database: configService.get('database.name'), // Nombre de la base de datos\n        synchronize: true, // Temporalmente habilitado para sincronizar la estructura de la base de datos\n        autoLoadEntities: true, // Carga automáticamente las entidades registradas\n        logging: configService.get('database.logging'), // Habilita o deshabilita el registro de consultas\n        logger: configService.get('database.logger'), // Define el tipo de logger para la base de datos\n      }),\n    }),\n  ],\n})\nexport class AppModule {} // Exporta la clase del módulo principal\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaDto.html":{"url":"classes/CreateEncuestaDto.html","title":"class - CreateEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                codigoQR\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                enlaceCorto\n                            \n                            \n                                    \n                                    \n                                    \n                                nombre\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()@ArrayNotEmpty()@ArrayMinSize(1)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport {\n  ArrayMinSize,\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CreatePreguntaDto } from './create-pregunta.dto'; // DTO para las preguntas de la encuesta\n\n// Clase DTO (Data Transfer Object) para crear una encuesta\nexport class CreateEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"nombre\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  nombre: string; // Nombre de la encuesta\n\n  @ApiProperty({ type: [CreatePreguntaDto] }) // Documenta la propiedad \"preguntas\" en Swagger como un arreglo de CreatePreguntaDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @ArrayNotEmpty() // Valida que el arreglo no esté vacío\n  @ArrayMinSize(1) // Valida que el arreglo tenga al menos un elemento\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreatePreguntaDto\n  @Type(() => CreatePreguntaDto) // Transforma cada elemento del arreglo en una instancia de CreatePreguntaDto\n  preguntas: CreatePreguntaDto[]; // Lista de preguntas asociadas a la encuesta\n\n  //Propiedad para el enlace corto\n  @ApiProperty()\n  @IsString()\n  enlaceCorto?: string; // generado automaticamente\n\n  // Propiedad para el código QR\n  @ApiProperty()\n  @IsString()\n  codigoQR?: string; // generado automáticamente\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncuestaResponseDto.html":{"url":"classes/CreateEncuestaResponseDto.html","title":"class - CreateEncuestaResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncuestaResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoQR\n                            \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                enlaceCorto\n                            \n                            \n                                    \n                                enlaceParticipacion\n                            \n                            \n                                    \n                                enlaceVisualizacion\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoQR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código QR generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Código para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceCorto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace corto generado automáticamente'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceParticipacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para participar en la encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enlaceVisualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enlace para visualizar resultados'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID de la encuesta creada'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-encuesta-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateEncuestaResponseDto {\n  @ApiProperty({ description: 'ID de la encuesta creada' })\n  id: number;\n\n  @ApiProperty({ description: 'Código para participar en la encuesta' })\n  codigoRespuesta: string;\n\n  @ApiProperty({ description: 'Código para visualizar resultados' })\n  codigoResultados: string;\n\n  @ApiProperty({ description: 'Enlace para participar en la encuesta' })\n  enlaceParticipacion: string;\n\n  @ApiProperty({ description: 'Enlace para visualizar resultados' })\n  enlaceVisualizacion: string;\n\n  @ApiProperty({ description: 'Enlace corto generado automáticamente' })\n  enlaceCorto: string;\n\n  @ApiProperty({ description: 'Código QR generado automáticamente' })\n  codigoQR: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOpcionDto.html":{"url":"classes/CreateOpcionDto.html","title":"class - CreateOpcionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOpcionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-opcion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-opcion.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator'; // Validadores para las propiedades del DTO\n\n// Clase DTO (Data Transfer Object) para crear una opción\nexport class CreateOpcionDto {\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la opción\n\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la opción\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePreguntaDto.html":{"url":"classes/CreatePreguntaDto.html","title":"class - CreatePreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/create-pregunta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                opciones\n                            \n                            \n                                    \n                                    \n                                    \n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateOpcionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, required: false})@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: TiposRespuestaEnum})@IsEnum(TiposRespuestaEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/create-pregunta.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport {\n  IsArray,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator'; // Validadores para las propiedades del DTO\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum'; // Enumerador para los tipos de respuesta permitidos\nimport { Type } from 'class-transformer'; // Utilidad para transformar y validar objetos anidados\nimport { CreateOpcionDto } from './create-opcion.dto'; // DTO para las opciones de una pregunta\n\n// Clase DTO (Data Transfer Object) para crear una pregunta\nexport class CreatePreguntaDto {\n  @ApiProperty() // Documenta la propiedad \"numero\" en Swagger\n  @IsNumber() // Valida que el valor sea un número\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  numero: number; // Número que representa el orden o posición de la pregunta\n\n  @ApiProperty() // Documenta la propiedad \"texto\" en Swagger\n  @IsString() // Valida que el valor sea una cadena de texto\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  texto: string; // Texto de la pregunta\n\n  @ApiProperty({ enum: TiposRespuestaEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(TiposRespuestaEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: TiposRespuestaEnum; // Tipo de respuesta permitido para la pregunta\n\n  @ApiProperty({ type: [CreateOpcionDto], required: false }) // Documenta la propiedad \"opciones\" en Swagger como un arreglo de CreateOpcionDto\n  @IsArray() // Valida que el valor sea un arreglo\n  @IsOptional() // Valida que esta propiedad sea opcional\n  @ValidateNested({ each: true }) // Valida que cada elemento del arreglo sea un objeto válido según CreateOpcionDto\n  @Type(() => CreateOpcionDto) // Transforma cada elemento del arreglo en una instancia de CreateOpcionDto\n  opciones: CreateOpcionDto[]; // Opciones asociadas a la pregunta (opcional)\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Encuesta.html":{"url":"entities/Encuesta.html","title":"entity - Encuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Encuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/encuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                codigoRespuesta\n                            \n                            \n                                    \n                                    \n                                codigoResultados\n                            \n                            \n                                    \n                                fechaActualizacion\n                            \n                            \n                                    \n                                habilitada\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                nombre\n                            \n                            \n                                    \n                                preguntas\n                            \n                            \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_respuesta', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'codigo_resultados', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fechaActualizacion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        habilitada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Pregunta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, pregunta => pregunta.encuesta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Respuesta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuesta => respuesta.encuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/encuesta.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n// Importación de la entidad relacionada \"Respuesta\"\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n\n@Entity({ name: 'encuestas' }) // Define la clase como una entidad de la base de datos con el nombre \"encuestas\"\nexport class Encuesta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"nombre\" en la tabla, permitiendo valores nulos temporalmente\n  nombre: string;\n\n  @Column({\n    nullable: true,\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  fechaActualizacion: Date;\n  @OneToMany(() => Pregunta, (pregunta) => pregunta.encuesta, {\n    cascade: ['insert'], // Permite insertar automáticamente las preguntas relacionadas\n  })\n  preguntas: Pregunta[]; // Relación uno a muchos con la entidad \"Pregunta\"\n\n  @Column({ name: 'codigo_respuesta', nullable: true }) // Define la columna \"codigo_respuesta\" en la tabla, permitiendo valores nulos temporalmente\n  codigoRespuesta: string;\n\n  @Column({ name: 'codigo_resultados', nullable: true }) // Define la columna \"codigo_resultados\" en la tabla, permitiendo valores nulos temporalmente\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  codigoResultados: string;\n\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  @Column({ default: true })\n  habilitada: boolean; // Columna que indica si la encuesta está habilitada o no\n\n  @OneToMany(() => Respuesta, (respuesta) => respuesta.encuesta)\n  respuestas: Respuesta[]; // Relación uno a muchos con la entidad \"Respuesta\"\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EncuestasController.html":{"url":"controllers/EncuestasController.html","title":"controller - EncuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EncuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/controllers/encuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                encuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                cambiarEstadoEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaDebug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipar\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEncuestaParaParticiparLegacy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerEstructuraEncuesta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                obtenerResultados\n                            \n                            \n                                    \n                                    \n                                    Async\n                                obtenerResultadosEncuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cambiarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    cambiarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/habilitar')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:319\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Crear una nueva encuesta'})@ApiResponse({status: 201, description: 'Encuesta creada exitosamente', type: CreateEncuestaResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, dto: ObtenerEncuestaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ObtenerEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaDebug\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaDebug(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('debug/:codigo')@ApiOperation({summary: 'Obtener información detallada de la encuesta para depuración'})@ApiParam({name: 'codigo', description: 'Código de la encuesta (puede ser de participación o resultados)', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticipar\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipar(id: number, codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:id/:codigo')@ApiOperation({summary: 'Obtener encuesta para participación'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiParam({name: 'codigo', description: 'Código de participación de la encuesta', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        obtenerEncuestaParaParticiparLegacy\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticiparLegacy(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:codigo')@ApiOperation({summary: 'Obtener encuesta para participación'})@ApiParam({name: 'codigo', description: 'Código de participación de la encuesta', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        obtenerEstructuraEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEstructuraEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('estructura/:codigo')@ApiOperation({summary: 'Obtener estructura de la encuesta con IDs para responder'})@ApiParam({name: 'codigo', description: 'Código de participación de la encuesta', example: 'abc123def456'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:244\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/resultados')@ApiOperation({summary: 'Obtener resultados de una encuesta por ID y código'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiResponse({status: 200, description: 'Resultados obtenidos exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o código inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        obtenerResultadosEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultadosEncuesta(codigo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:codigo')@ApiOperation({summary: 'Obtener resultados de una encuesta'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/encuestas/controllers/encuestas.controller.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  BadRequestException,\n} from '@nestjs/common';\nimport { ApiOperation, ApiParam, ApiResponse } from '@nestjs/swagger';\n// Importación del servicio de encuestas\nimport { EncuestasService } from '../services/encuestas.service';\n// Importación del servicio de respuestas\nimport { RespuestasService } from '../../respuestas/services/respuestas.service';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación del DTO para obtener encuestas\nimport { ObtenerEncuestaDto } from '../dtos/obtener-encuesta.dto';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { CreateEncuestaResponseDto } from '../dtos/create-encuesta-response.dto';\nimport { VisualizarRespuestasDto } from '../../respuestas/dtos/visualizar-respuestas.dtos';\n@Controller('encuestas') // Define el controlador para manejar las rutas relacionadas con \"encuestas\"\nexport class EncuestasController {\n  constructor(\n    private readonly encuestasService: EncuestasService,\n    private readonly respuestasService: RespuestasService,\n  ) {} // Inyección de los servicios\n  @Post()\n  @ApiOperation({ summary: 'Crear una nueva encuesta' })\n  @ApiResponse({\n    status: 201,\n    description: 'Encuesta creada exitosamente',\n    type: CreateEncuestaResponseDto,\n  }) // Define un endpoint POST para crear una nueva encuesta\n  async crearEncuesta(\n    @Body() dto: CreateEncuestaDto,\n  ): Promise {\n    // Crea la encuesta utilizando el servicio\n    const encuesta = await this.encuestasService.crearEncuesta(dto);\n\n    //  Generar enlace corto\n    const enlaceCorto = await this.encuestasService.generarEnlaceCorto(\n      encuesta.enlaceParticipacion,\n    );\n\n    //  Generar código QR\n    const codigoQR = await this.encuestasService.generarCodigoQR(enlaceCorto);\n\n    return {\n      ...encuesta,\n      enlaceParticipacion: enlaceCorto, // Se reemplaza el enlace con la versión corta\n      codigoQR, // Se añade el código QR\n    };\n  }\n\n  @Get(':id') // Define un endpoint GET para obtener una encuesta por su ID\n  async obtenerEncuesta(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Query() dto: ObtenerEncuestaDto, // Obtiene los parámetros de consulta (query params)\n  ): Promise {\n    // Llama al servicio para obtener la encuesta y la retorna\n    return await this.encuestasService.obtenerEncuesta(\n      id,\n      dto.codigo, // Código de respuesta o resultados\n      dto.tipo, // Tipo de código (respuesta o resultados)\n    );\n  }\n  @Get('participar/:id/:codigo')\n  @ApiOperation({ summary: 'Obtener encuesta para participación' })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  async obtenerEncuestaParaParticipar(\n    @Param('id') id: number,\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuesta(\n      id,\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n    // Transformar la respuesta para incluir explícitamente los IDs\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n    };\n  }\n\n  @Get('participar/:codigo')\n  @ApiOperation({\n    summary: 'Obtener encuesta para participación',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  async obtenerEncuestaParaParticiparLegacy(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    // Transformar la respuesta para incluir explícitamente los IDs\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n    };\n  }\n\n  @Get('debug/:codigo')\n  @ApiOperation({\n    summary: 'Obtener información detallada de la encuesta para depuración',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description:\n      'Código de la encuesta (puede ser de participación o resultados)',\n    example: 'abc123def456',\n  })\n  async obtenerEncuestaDebug(@Param('codigo') codigo: string): Promise {\n    // Intentar primero con código de respuesta\n    try {\n      const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n        codigo,\n        CodigoTipoEnum.RESPUESTA,\n      );\n\n      // Transformar la respuesta para incluir explícitamente los IDs\n      const resultado = {\n        id: encuesta.id,\n        nombre: encuesta.nombre,\n        preguntas: encuesta.preguntas.map((pregunta) => ({\n          id: pregunta.id,\n          numero: pregunta.numero,\n          texto: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: pregunta.opciones\n            ? pregunta.opciones.map((opcion) => ({\n                id: opcion.id,\n                numero: opcion.numero,\n                texto: opcion.texto,\n              }))\n            : [],\n        })),\n      };\n\n      return resultado;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      // Si falla, intentar con código de resultados\n      try {\n        const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n          codigo,\n          CodigoTipoEnum.RESULTADOS,\n        );\n\n        // Transformar la respuesta para incluir explícitamente los IDs\n        const resultado = {\n          id: encuesta.id,\n          nombre: encuesta.nombre,\n          preguntas: encuesta.preguntas.map((pregunta) => ({\n            id: pregunta.id,\n            numero: pregunta.numero,\n            texto: pregunta.texto,\n            tipo: pregunta.tipo,\n            opciones: pregunta.opciones\n              ? pregunta.opciones.map((opcion) => ({\n                  id: opcion.id,\n                  numero: opcion.numero,\n                  texto: opcion.texto,\n                }))\n              : [],\n          })),\n        };\n\n        return resultado;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (_) {\n        throw new BadRequestException('Código de encuesta no válido');\n      }\n    }\n  }\n\n  @Get('resultados/:codigo')\n  @ApiOperation({ summary: 'Obtener resultados de una encuesta' })\n  async obtenerResultadosEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(codigo);\n    return { message: 'Éxito', data: resultado };\n  }\n\n  @Get('estructura/:codigo')\n  @ApiOperation({\n    summary: 'Obtener estructura de la encuesta con IDs para responder',\n  })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  async obtenerEstructuraEncuesta(\n    @Param('codigo') codigo: string,\n  ): Promise {\n    const encuesta = await this.encuestasService.obtenerEncuestaPorCodigo(\n      codigo,\n      CodigoTipoEnum.RESPUESTA,\n    );\n\n    return {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        id: pregunta.id,\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones\n          ? pregunta.opciones.map((opcion) => ({\n              id: opcion.id,\n              numero: opcion.numero,\n              texto: opcion.texto,\n            }))\n          : [],\n      })),\n      ejemploRespuesta: {\n        respuestas: encuesta.preguntas.map((pregunta) => {\n          if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              texto: 'Ejemplo de respuesta abierta',\n            };\n          } else {\n            return {\n              id_pregunta: pregunta.id,\n              tipo: pregunta.tipo,\n              opciones:\n                pregunta.opciones && pregunta.opciones.length > 0\n                  ? [pregunta.opciones[0].id]\n                  : [],\n            };\n          }\n        }),\n      },\n    };\n  }\n  @Get(':id/resultados')\n  @ApiOperation({\n    summary: 'Obtener resultados de una encuesta por ID y código',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Resultados obtenidos exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o código inválido',\n  })\n  async obtenerResultados(\n    @Param('id') id: number,\n    @Query('codigo') codigo: string,\n  ): Promise {\n    if (!codigo) {\n      throw new BadRequestException('Código de resultados requerido');\n    }\n    return this.encuestasService.obtenerResultados(id, codigo);\n  }\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  @Patch(':id/habilitar') // Define un endpoint PATCH para habilitar/deshabilitar una encuesta\n  async cambiarEstadoEncuesta(\n    @Param('id') id: number, // Obtiene el parámetro \"id\" de la URL\n    @Body('habilitada') habilitada: boolean, // Obtiene el cuerpo de la solicitud para saber si se habilita o deshabilita\n  ): Promise {\n    return await this.encuestasService.actualizarEstadoEncuesta(id, habilitada);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EncuestasModule.html":{"url":"modules/EncuestasModule.html","title":"module - EncuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    EncuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_imports\n\n\n\ncluster_EncuestasModule_providers\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\n\n\nEncuestasModule\n\nEncuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/encuestas/encuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EncuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EncuestasController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RespuestasModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { EncuestasController } from './controllers/encuestas.controller'; // Controlador para manejar las rutas relacionadas con encuestas\nimport { EncuestasService } from './services/encuestas.service'; // Servicio para la lógica de negocio de encuestas\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Encuesta } from './entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from './entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from './entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { Respuesta } from '../respuestas/entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestasModule } from '../respuestas/respuestas.module'; // Importación del módulo de respuestas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Encuesta, Pregunta, Opcion, Respuesta]),\n    RespuestasModule,\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [EncuestasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [EncuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class EncuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncuestasService.html":{"url":"injectables/EncuestasService.html","title":"injectable - EncuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/services/encuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarEstadoEncuesta\n                            \n                            \n                                    Async\n                                crearEncuesta\n                            \n                            \n                                    Async\n                                generarCodigoQR\n                            \n                            \n                                    Async\n                                generarEnlaceCorto\n                            \n                            \n                                    Async\n                                obtenerEncuesta\n                            \n                            \n                                    Async\n                                obtenerEncuestaPorCodigo\n                            \n                            \n                                    Async\n                                obtenerResultados\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(encuestaRepository: Repository, respuestaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/encuestas/services/encuestas.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarEstadoEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarEstadoEncuesta(id: number, habilitada: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:258\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                habilitada\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearEncuesta(dto: CreateEncuestaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateEncuestaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarCodigoQR\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarCodigoQR(texto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                texto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generarEnlaceCorto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generarEnlaceCorto(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuesta\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuesta(id: number, codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaPorCodigo\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaPorCodigo(codigo: string, codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:281\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoTipo\n                                            \n                                                            CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerResultados\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerResultados(id: number, codigoResultados: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/encuestas/services/encuestas.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoResultados\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación de la entidad Encuesta\nimport { Encuesta } from '../entities/encuesta.entity';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación del DTO para crear encuestas\nimport { CreateEncuestaDto } from '../dtos/create-encuesta.dto';\n// Importación de la función para generar UUIDs\nimport { v4 } from 'uuid';\n// Importación del enumerador para los tipos de código\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum';\nimport { NotFoundException } from '@nestjs/common';\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\nimport { Respuesta } from '../../respuestas/entities/respuesta.entity';\nimport fetch from 'node-fetch';\nimport * as QRCode from 'qrcode';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class EncuestasService {\n  constructor(\n    // Inyección del repositorio de la entidad Encuesta\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n  ) {}\n\n  // Método para crear una nueva encuesta se le agrega codigo de enlace corto y codigoqr\n  async crearEncuesta(dto: CreateEncuestaDto): Promise {\n    for (const pregunta of dto.preguntas) {\n      // FUNCIÓN EXTRA: Manejar preguntas de tipo VERDADERO_FALSO\n      if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, generamos automáticamente las opciones\n        pregunta.opciones = [\n          { numero: 1, texto: 'Verdadero' },\n          { numero: 2, texto: 'Falso' },\n        ];\n      } else if (\n        pregunta.tipo !== TiposRespuestaEnum.ABIERTA &&\n        (!pregunta.opciones || pregunta.opciones.length === 0)\n      ) {\n        throw new BadRequestException(\n          `Las preguntas de opción múltiple deben tener opciones`,\n        );\n      }\n      if (\n        pregunta.tipo === TiposRespuestaEnum.ABIERTA &&\n        pregunta.opciones?.length > 0\n      ) {\n        throw new BadRequestException(\n          `Las preguntas abiertas no deben tener opciones`,\n        );\n      }\n    }\n    const codigoRespuesta = v4();\n    const codigoResultados = v4();\n\n    // Creación de una nueva instancia de Encuesta con los datos del DTO\n    const encuesta: Encuesta = this.encuestaRepository.create({\n      ...dto, // Copia las propiedades del DTO\n      codigoRespuesta, // Genera un código único para las respuestas\n      codigoResultados, // Genera un código único para los resultados\n    });\n\n    // Guarda la encuesta en la base de datos\n    const encuestaCreada = await this.encuestaRepository.save(encuesta);\n\n    // Usamos APP_URL para que sea dinámico con el puerto que esté activo\n    const baseUrl = process.env.APP_URL || 'http://localhost:3000';\n    const apiPrefix = process.env.GLOBAL_PREFIX || 'api';\n    const apiVersion = 'v1';\n\n    // Formato: /api/v1/respuestas/participar/{id}/{codigoRespuesta}\n    const enlaceParticipacion = `${baseUrl}/${apiPrefix}/${apiVersion}/respuestas/participar/${encuestaCreada.id}/${codigoRespuesta}`;\n\n    // Formato: /api/v1/encuestas/resultados/{id}?codigo={codigoResultados}\n    const enlaceVisualizacion = `${baseUrl}/${apiPrefix}/${apiVersion}/encuestas/${encuestaCreada.id}/resultados?codigo=${codigoResultados}`;\n\n    //Generar enlace corto\n    const enlaceCorto = await this.generarEnlaceCorto(enlaceParticipacion);\n\n    //Generar QR\n    const codigoQR = await this.generarCodigoQR(enlaceCorto);\n\n    // Retorna los datos relevantes de la encuesta creada\n    return {\n      id: encuestaCreada.id,\n      codigoRespuesta: encuestaCreada.codigoRespuesta,\n      codigoResultados: encuestaCreada.codigoResultados,\n      enlaceParticipacion: enlaceCorto, // usamos el enlace corto\n      enlaceVisualizacion,\n      enlaceCorto,\n      codigoQR,\n    };\n  }\n  async generarEnlaceCorto(url: string): Promise {\n    try {\n      const response = await fetch(\n        `http://tinyurl.com/api-create.php?url=${encodeURIComponent(url)}`,\n      );\n      if (!response.ok) {\n        console.warn(\n          `Error en la API de TinyURL: ${response.statusText}, usando URL original`,\n        );\n        return url; // Se retorna la URL original\n      }\n      return await response.text();\n    } catch (error) {\n      console.error(\n        'Error al acortar enlace:',\n        error instanceof Error ? error.message : error,\n      );\n      return url; // Devuelve la URL original en caso de error\n    }\n  }\n\n  async generarCodigoQR(texto: string): Promise {\n    try {\n      const qr = await QRCode.toDataURL(texto);\n      return qr;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error('Error generando QR:', error.message);\n      } else {\n        console.error('Error desconocido generando QR:', error);\n      }\n      return ''; // En caso de error, retornar cadena vacía\n    }\n  }\n  // Método para obtener una encuesta por su ID y un código específico\n  async obtenerEncuesta(\n    id: number, // ID de la encuesta\n    codigo: string, // Código de respuesta o resultados\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS, // Tipo de código\n  ): Promise {\n    // Construcción de la consulta para obtener la encuesta\n    const query = this.encuestaRepository\n      .createQueryBuilder('encuesta') // Alias para la tabla Encuesta\n      .innerJoinAndSelect('encuesta.preguntas', 'pregunta') // Une las preguntas relacionadas\n      .leftJoinAndSelect('pregunta.opciones', 'preguntaOpcion') // Une las opciones de las preguntas\n      .where('encuesta.id = :id', { id }) // Filtra por el ID de la encuesta\n      .andWhere('encuesta.habilitada = true');\n    // Filtra según el tipo de código proporcionado\n    switch (codigoTipo) {\n      case CodigoTipoEnum.RESPUESTA:\n        query.andWhere('encuesta.codigoRespuesta = :codigo', { codigo });\n        break;\n\n      case CodigoTipoEnum.RESULTADOS:\n        query.andWhere('encuesta.codigoResultados = :codigo', { codigo });\n        break;\n    }\n\n    // Ordena las preguntas y opciones por su número\n    query.orderBy('pregunta.numero', 'ASC');\n    query.addOrderBy('preguntaOpcion.numero', 'ASC');\n\n    // Ejecuta la consulta y obtiene la encuesta\n    const encuesta = await query.getOne();\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Datos de encuesta no válidos');\n    }\n\n    // Retorna la encuesta encontrada\n    return encuesta;\n  }\n  async obtenerResultados(id: number, codigoResultados: string): Promise {\n    // Verificar primero que el código sea válido\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoResultados: codigoResultados, habilitada: true },\n      relations: [\n        'preguntas',\n        'preguntas.opciones',\n        'respuestas',\n        'respuestas.respuestasAbiertas',\n        'respuestas.respuestasOpciones',\n        'respuestas.respuestasOpciones.opcion',\n      ],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o código inválido');\n    }\n\n    // Procesar resultados\n    const resultados = encuesta.preguntas.map((pregunta) => {\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasTexto = encuesta.respuestas\n          .flatMap((r) => r.respuestasAbiertas)\n          .filter((ra) => ra.id_pregunta === pregunta.id)\n          .map((ra) => ra.texto);\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: 'ABIERTA',\n          respuestas: respuestasTexto,\n        };\n      } else if (pregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO) {\n        // Para preguntas de tipo VERDADERO_FALSO, procesamos de manera similar a las de opción múltiple\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: TiposRespuestaEnum.VERDADERO_FALSO,\n          opciones: opcionesConteo,\n        };\n      } else {\n        const opcionesConteo = pregunta.opciones.map((opcion) => {\n          const conteo = encuesta.respuestas\n            .flatMap((r) => r.respuestasOpciones)\n            .filter((ro) => ro.opcion?.id === opcion.id).length;\n\n          return {\n            id: opcion.id,\n            opcion: opcion.texto,\n            conteo,\n          };\n        });\n\n        return {\n          pregunta: pregunta.texto,\n          tipo: pregunta.tipo,\n          opciones: opcionesConteo,\n        };\n      }\n    });\n\n    return {\n      encuesta: encuesta.nombre,\n      totalRespuestas: encuesta.respuestas.length,\n      resultados,\n    };\n  }\n  // Funcionalidad Extra para deshabilitar una encuesta (MICA)\n  async actualizarEstadoEncuesta(\n    id: number,\n    habilitada: boolean,\n  ): Promise {\n    // Busca la encuesta por su ID\n    const encuesta = await this.encuestaRepository.findOne({ where: { id } });\n\n    // Si no se encuentra la encuesta, lanza una excepción\n    if (!encuesta) {\n      throw new BadRequestException('Encuesta no encontrada');\n    }\n\n    // Actualiza el estado de la encuesta\n    encuesta.habilitada = habilitada;\n    await this.encuestaRepository.save(encuesta);\n\n    // Retorna un mensaje de éxito\n    return {\n      mensaje: `La encuesta fue ${habilitada ? 'habilitada' : 'deshabilitada'} correctamente`,\n    };\n  }\n\n  // Método para obtener una encuesta por su código de respuesta\n  async obtenerEncuestaPorCodigo(\n    codigo: string,\n    codigoTipo: CodigoTipoEnum.RESPUESTA | CodigoTipoEnum.RESULTADOS,\n  ): Promise {\n    // Determinar qué campo usar según el tipo de código\n    const whereCondition =\n      codigoTipo === CodigoTipoEnum.RESPUESTA\n        ? { codigoRespuesta: codigo, habilitada: true }\n        : { codigoResultados: codigo, habilitada: true };\n\n    // Buscar la encuesta que tenga este código\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition,\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new BadRequestException('Código de encuesta no válido');\n    }\n\n    // Ordenar las preguntas y opciones\n    encuesta.preguntas.sort((a, b) => a.numero - b.numero);\n    encuesta.preguntas.forEach((pregunta) => {\n      if (pregunta.opciones) {\n        pregunta.opciones.sort((a, b) => a.numero - b.numero);\n      }\n    });\n\n    return encuesta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObtenerEncuestaDto.html":{"url":"classes/ObtenerEncuestaDto.html","title":"class - ObtenerEncuestaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObtenerEncuestaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                codigo\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        codigo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsUUID('4')@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CodigoTipoEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CodigoTipoEnum})@IsEnum(CodigoTipoEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/dtos/obtener-encuesta.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'; // Decorador para documentar propiedades en Swagger\nimport { IsEnum, IsNotEmpty, IsUUID } from 'class-validator'; // Validadores para las propiedades del DTO\nimport { CodigoTipoEnum } from '../enums/codigo-tipo.enum'; // Enumerador para los tipos de código permitidos\n\n// Clase DTO (Data Transfer Object) para obtener una encuesta\nexport class ObtenerEncuestaDto {\n  @ApiProperty() // Documenta la propiedad \"codigo\" en Swagger\n  @IsUUID('4') // Valida que el valor sea un UUID versión 4\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  codigo: string; // Código único para identificar la encuesta\n\n  @ApiProperty({ enum: CodigoTipoEnum }) // Documenta la propiedad \"tipo\" en Swagger como un enumerador\n  @IsEnum(CodigoTipoEnum) // Valida que el valor sea uno de los valores definidos en el enumerador\n  @IsNotEmpty() // Valida que el valor no esté vacío\n  tipo: CodigoTipoEnum; // Tipo de código (puede ser \"RESULTADOS\" o \"RESPUESTA\")\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Opcion.html":{"url":"entities/Opcion.html","title":"entity - Opcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Opcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/opcion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/opcion.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  //OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación de la entidad relacionada \"Pregunta\"\nimport { Pregunta } from './pregunta.entity';\n//import { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\n\n@Entity({ name: 'opciones' }) // Define la clase como una entidad de la base de datos con el nombre \"opciones\"\nexport class Opcion {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @ManyToOne(() => Pregunta) // Relación muchos a uno con la entidad \"Pregunta\"\n  @JoinColumn({ name: 'id_pregunta' }) // Define la columna \"id_pregunta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  pregunta: Pregunta; // Referencia a la pregunta a la que pertenece esta opción\n\n  // EXTRA POR MÓDULO RESPUESTAS\n  // @OneToMany(() => RespuestaOpcion, (r) => r.opcion)\n  // respuestas: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OpcionConRespuestasDto.html":{"url":"classes/OpcionConRespuestasDto.html","title":"class - OpcionConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OpcionConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cantidad_respuestas\n                            \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cantidad_respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OpcionesController.html":{"url":"controllers/OpcionesController.html","title":"controller - OpcionesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OpcionesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/controllers/opciones.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas/:preguntaId/opciones\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/opciones/controllers/opciones.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  ParseIntPipe,\n  Delete,\n} from '@nestjs/common';\nimport { OpcionesService } from '../services/opciones.service';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n@Controller('preguntas/:preguntaId/opciones')\nexport class OpcionesController {\n  constructor(private readonly opcionesService: OpcionesService) {}\n\n  @Post()\n  async crearOpcion(\n    @Param('preguntaId', ParseIntPipe) preguntaId: number,\n    @Body() createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    return this.opcionesService.crearOpcion(preguntaId, createOpcionDto);\n  }\n\n  @Delete(':id')\n  async eliminarOpcion(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return this.opcionesService.eliminarOpcion(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpcionesModule.html":{"url":"modules/OpcionesModule.html","title":"module - OpcionesModule","body":"\n                   \n\n\n\n\n    Modules\n    OpcionesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\n\nOpcionesService\n\nOpcionesService\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/opciones/opciones.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpcionesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OpcionesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Opcion } from '../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../encuestas/entities/pregunta.entity';\nimport { OpcionesService } from './services/opciones.service';\nimport { OpcionesController } from './controllers/opciones.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Opcion, Pregunta])],\n  controllers: [OpcionesController],\n  providers: [OpcionesService],\n})\nexport class OpcionesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpcionesService.html":{"url":"injectables/OpcionesService.html","title":"injectable - OpcionesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpcionesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/opciones/services/opciones.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                crearOpcion\n                            \n                            \n                                    Async\n                                eliminarOpcion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(opcionRepository: Repository, preguntaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/opciones/services/opciones.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        crearOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    crearOpcion(preguntaId: number, createOpcionDto: CreateOpcionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preguntaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOpcionDto\n                                            \n                                                            CreateOpcionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarOpcion\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarOpcion(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/opciones/services/opciones.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { CreateOpcionDto } from '../../encuestas/dtos/create-opcion.dto';\n\n@Injectable()\nexport class OpcionesService {\n  constructor(\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n  ) {}\n\n  async crearOpcion(\n    preguntaId: number,\n    createOpcionDto: CreateOpcionDto,\n  ): Promise {\n    const pregunta = await this.preguntaRepository.findOneBy({\n      id: preguntaId,\n    });\n    if (!pregunta) {\n      throw new NotFoundException('Pregunta no encontrada');\n    }\n\n    const opcion = this.opcionRepository.create({\n      ...createOpcionDto,\n      pregunta,\n    });\n\n    const opcionGuardada = await this.opcionRepository.save(opcion);\n\n    return {\n      mensaje: 'Opción creada correctamente',\n      opcion: opcionGuardada,\n    };\n  }\n\n  async eliminarOpcion(id: number): Promise {\n    const opcion = await this.opcionRepository.findOneBy({ id });\n    if (!opcion) {\n      throw new NotFoundException('Opción no encontrada');\n    }\n\n    await this.opcionRepository.delete(id);\n    return { mensaje: 'Opción eliminada correctamente' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta.html":{"url":"entities/Pregunta.html","title":"entity - Pregunta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/pregunta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/pregunta.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n// Importación del enumerador para los tipos de respuesta\nimport { TiposRespuestaEnum } from '../enums/tipos-respuesta.enum';\n// Importación del decorador \"Exclude\" para excluir propiedades en la serialización\nimport { Exclude } from 'class-transformer';\n// Importación de la entidad relacionada \"Encuesta\"\nimport { Encuesta } from './encuesta.entity';\n// Importación de la entidad relacionada \"Opcion\"\nimport { Opcion } from './opcion.entity';\n//import { RespuestaAbierta } from 'src/modules/respuestas/entities/respuesta-abierta.entity';\n\n@Entity({ name: 'preguntas' }) // Define la clase como una entidad de la base de datos con el nombre \"preguntas\"\nexport class Pregunta {\n  @PrimaryGeneratedColumn() // Define la columna \"id\" como clave primaria autogenerada\n  id: number;\n\n  @Column({ nullable: true }) // Define la columna \"numero\" en la tabla, permitiendo valores nulos temporalmente\n  numero: number;\n\n  @Column({ nullable: true }) // Define la columna \"texto\" en la tabla, permitiendo valores nulos temporalmente\n  texto: string;\n\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo', // Nombre de la columna en la base de datos\n    nullable: true, // Permitir valores nulos temporalmente\n    default: TiposRespuestaEnum.ABIERTA, // Valor por defecto para registros existentes\n  }) // Define la columna \"tipo\" como un enumerador\n  tipo: TiposRespuestaEnum; // Especifica el tipo de respuesta permitido para la pregunta\n\n  @ManyToOne(() => Encuesta) // Relación muchos a uno con la entidad \"Encuesta\"\n  @JoinColumn({ name: 'id_encuesta' }) // Define la columna \"id_encuesta\" como la clave foránea\n  @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  encuesta: Encuesta; // Referencia a la encuesta a la que pertenece esta pregunta\n\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta, { cascade: ['insert'] }) // Relación uno a muchos con la entidad \"Opcion\"\n  opciones: Opcion[]; // Lista de opciones asociadas a la pregunta\n\n  // EXTRA POR EL MÓDULO DE RESPUESTAS\n  // @Exclude() // Excluye esta propiedad al serializar la entidad (por ejemplo, al devolverla en una API)\n  // @OneToMany(() => RespuestaAbierta, (r) => r.pregunta)\n  // respuestasAbiertas: RespuestaAbierta[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Pregunta-1.html":{"url":"entities/Pregunta-1.html","title":"entity - Pregunta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Pregunta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/entities/pregunta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                numero\n                            \n                            \n                                    \n                                opciones\n                            \n                            \n                                    \n                                texto\n                            \n                            \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.preguntas)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, opcion => opcion.pregunta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: TiposRespuestaEnum, name: 'tipo_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/preguntas/entities/pregunta.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { TiposRespuestaEnum } from '../../encuestas/enums/tipos-respuesta.enum';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n@Entity({ name: 'preguntas' })\nexport class Pregunta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  numero: number;\n\n  @Column()\n  texto: string;\n\n  @Column({\n    type: 'enum',\n    enum: TiposRespuestaEnum,\n    name: 'tipo_respuesta', // Nombre de la columna en la base de datos\n  })\n  tipo: TiposRespuestaEnum;\n\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.preguntas)\n  encuesta: Encuesta;\n\n  @OneToMany(() => Opcion, (opcion) => opcion.pregunta)\n  opciones: Opcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PreguntaConRespuestasDto.html":{"url":"classes/PreguntaConRespuestasDto.html","title":"class - PreguntaConRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PreguntaConRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                numero\n                            \n                            \n                                opciones\n                            \n                            \n                                respuestas_abiertas\n                            \n                            \n                                texto\n                            \n                            \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numero\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OpcionConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        respuestas_abiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TiposRespuestaEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PreguntasController.html":{"url":"controllers/PreguntasController.html","title":"controller - PreguntasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PreguntasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/controllers/preguntas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preguntas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    \n                                    Async\n                                eliminarPregunta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(id: number, actualizarDto: ActualizarPreguntaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                actualizarDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        eliminarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPregunta(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/preguntas/controllers/preguntas.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport {\n  Body,\n  Controller,\n  Param,\n  Patch,\n  Delete,\n  ParseIntPipe,\n} from '@nestjs/common';\n// Importación del servicio de preguntas\nimport { PreguntasService } from '../services/preguntas.service';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Controller('preguntas') // Define el controlador para manejar las rutas relacionadas con \"/preguntas\"\nexport class PreguntasController {\n  constructor(private readonly preguntasService: PreguntasService) {} // Inyección del servicio de preguntas\n\n  @Patch(':id') // Define un endpoint PATCH para actualizar una pregunta por su ID\n  async actualizarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n    @Body() actualizarDto: ActualizarPreguntaDto, // Extrae el cuerpo de la petición y lo valida según ActualizarPreguntaDto.\n  ): Promise {\n    // Llama al método actualizarPregunta del servicio, pasándole el id y los nuevos datos.\n    return this.preguntasService.actualizarPregunta(id, actualizarDto);\n  }\n\n  @Delete(':id') // Define un endpoint DELETE para eliminar una pregunta y sus opciones\n  async eliminarPregunta(\n    @Param('id', ParseIntPipe) id: number, // Obtiene el parámetro \"id\" de la URL y lo convierte en número.\n  ): Promise {\n    // Llama al método del servicio que elimina la pregunta junto con sus opciones\n    return this.preguntasService.eliminarPreguntaConOpciones(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PreguntasModule.html":{"url":"modules/PreguntasModule.html","title":"module - PreguntasModule","body":"\n                   \n\n\n\n\n    Modules\n    PreguntasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\n\nPreguntasService\n\nPreguntasService\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/preguntas/preguntas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PreguntasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PreguntasController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Pregunta } from '../encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from '../encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\nimport { PreguntasService } from '../preguntas/services/preguntas.service'; // Servicio para la lógica de negocio de preguntas\nimport { PreguntasController } from '../preguntas/controllers/preguntas.controller'; // Controlador para manejar las rutas relacionadas con preguntas\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([Pregunta, Opcion]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  controllers: [PreguntasController],\n  // Declaración de los proveedores que contienen la lógica de negocio\n  providers: [PreguntasService],\n})\n// Exportación del módulo de preguntas para que pueda ser utilizado en otros módulos\nexport class PreguntasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreguntasService.html":{"url":"injectables/PreguntasService.html","title":"injectable - PreguntasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PreguntasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/preguntas/services/preguntas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                actualizarPregunta\n                            \n                            \n                                    Async\n                                eliminarPreguntaConOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(preguntaRepo: Repository, opcionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/preguntas/services/preguntas.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        preguntaRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        actualizarPregunta\n                        \n                    \n                \n            \n            \n                \n                        \n                    actualizarPregunta(idPregunta: number, updateDto: ActualizarPreguntaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            ActualizarPreguntaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eliminarPreguntaConOpciones\n                        \n                    \n                \n            \n            \n                \n                        \n                    eliminarPreguntaConOpciones(idPregunta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/preguntas/services/preguntas.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idPregunta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NotFoundException, Injectable } from '@nestjs/common';\n// Decorador para inyectar repositorios de TypeORM\nimport { InjectRepository } from '@nestjs/typeorm';\n// Importación del repositorio de TypeORM\nimport { Repository } from 'typeorm';\n// Importación de la entidad Pregunta\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\n// Importación de la entidad Opcion\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n// Importación del DTO para actualizar una pregunta\nimport { ActualizarPreguntaDto } from '../../encuestas/dtos/actualizar-pregunta.dto';\n\n@Injectable() // Decorador que marca esta clase como un servicio inyectable\nexport class PreguntasService {\n  constructor(\n    // Inyección del repositorio de la entidad Pregunta\n    @InjectRepository(Pregunta)\n    private readonly preguntaRepo: Repository,\n    // Inyección del repositorio de la entidad Opcion\n    @InjectRepository(Opcion)\n    private readonly opcionRepo: Repository,\n  ) {}\n\n  // Método para actualizar una pregunta\n  async actualizarPregunta(\n    idPregunta: number,\n    updateDto: ActualizarPreguntaDto,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOneBy({ id: idPregunta }); // Busca la pregunta por ID\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza una excepción 404\n\n    Object.assign(pregunta, updateDto); // Asigna los nuevos valores a la entidad pregunta\n    await this.preguntaRepo.save(pregunta); // Guarda la entidad actualizada en la base de datos\n\n    return { mensaje: 'Pregunta actualizada correctamente' }; // Retorna un mensaje de éxito\n  }\n\n  // Método para eliminar una pregunta y sus opciones\n  async eliminarPreguntaConOpciones(\n    idPregunta: number,\n  ): Promise {\n    const pregunta = await this.preguntaRepo.findOne({\n      // Busca la pregunta junto con sus opciones\n      where: { id: idPregunta },\n      relations: ['opciones'],\n    });\n\n    if (!pregunta) throw new NotFoundException('Pregunta no encontrada'); // Si no existe, lanza excepción 404\n\n    // Se eliminan las opciones relacionadas\n    if (pregunta.opciones && pregunta.opciones.length > 0) {\n      await this.opcionRepo.delete({ pregunta: { id: idPregunta } });\n    }\n\n    // Se elimina la pregunta\n    await this.preguntaRepo.delete(idPregunta);\n\n    return { mensaje: 'Pregunta eliminada correctamente' }; // Retorna un mensaje de éxito\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarRespuestasDto.html":{"url":"classes/RegistrarRespuestasDto.html","title":"class - RegistrarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                respuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        respuestas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RespuestaPreguntaDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta.html":{"url":"entities/Respuesta.html","title":"entity - Respuesta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/encuestas/entities/respuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ra => ra.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ro => ro.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/encuestas/entities/respuesta.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from '../../respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from '../../respuestas/entities/respuesta-opcion.entity';\n\n@Entity('respuestas')\nexport class Respuesta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int')\n  id_encuesta: number;\n\n  @ManyToOne(() => Encuesta)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  @OneToMany(() => RespuestaAbierta, (ra) => ra.respuesta)\n  respuestasAbiertas: RespuestaAbierta[];\n\n  @OneToMany(() => RespuestaOpcion, (ro) => ro.respuesta)\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Respuesta-1.html":{"url":"entities/Respuesta-1.html","title":"entity - Respuesta-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Respuesta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                encuesta\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_encuesta\n                            \n                            \n                                    \n                                respuestasAbiertas\n                            \n                            \n                                    \n                                respuestasOpciones\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Encuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, encuesta => encuesta.respuestas)@JoinColumn({name: 'id_encuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_encuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasAbiertas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaAbierta[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaAbierta => respuestaAbierta.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        respuestasOpciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RespuestaOpcion[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, respuestaOpcion => respuestaOpcion.respuesta)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  JoinColumn,\n} from 'typeorm';\nimport { Encuesta } from '../../encuestas/entities/encuesta.entity';\nimport { RespuestaAbierta } from './respuesta-abierta.entity';\nimport { RespuestaOpcion } from './respuesta-opcion.entity';\n\n@Entity('respuestas')\nexport class Respuesta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int', { nullable: true })\n  id_encuesta: number;\n\n  @ManyToOne(() => Encuesta, (encuesta) => encuesta.respuestas)\n  @JoinColumn({ name: 'id_encuesta' })\n  encuesta: Encuesta;\n\n  @OneToMany(\n    () => RespuestaAbierta,\n    (respuestaAbierta) => respuestaAbierta.respuesta,\n  )\n  respuestasAbiertas: RespuestaAbierta[];\n\n  @OneToMany(\n    () => RespuestaOpcion,\n    (respuestaOpcion) => respuestaOpcion.respuesta,\n  )\n  respuestasOpciones: RespuestaOpcion[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaAbierta.html":{"url":"entities/RespuestaAbierta.html","title":"entity - RespuestaAbierta","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaAbierta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-abierta.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                pregunta\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                            \n                                    \n                                texto\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pregunta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_pregunta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-abierta.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // Importación de decoradores y utilidades de TypeORM\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Pregunta } from '../../encuestas/entities/pregunta.entity';\nimport { Respuesta } from './respuesta.entity';\n\n@Entity('respuestas_abiertas')\nexport class RespuestaAbierta {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'text', nullable: true })\n  texto: string;\n\n  @Column('int', { nullable: true })\n  id_pregunta: number;\n\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  @ManyToOne(() => Pregunta)\n  @JoinColumn({ name: 'id_pregunta' })\n  pregunta: Pregunta;\n\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RespuestaOpcion.html":{"url":"entities/RespuestaOpcion.html","title":"entity - RespuestaOpcion","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RespuestaOpcion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/entities/respuesta-opcion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                id_opcion\n                            \n                            \n                                    \n                                id_respuesta\n                            \n                            \n                                    \n                                    \n                                opcion\n                            \n                            \n                                    \n                                    \n                                respuesta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id_respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        opcion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Opcion\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_opcion'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        respuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Respuesta\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'id_respuesta'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/entities/respuesta-opcion.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Respuesta } from './respuesta.entity';\nimport { Opcion } from '../../encuestas/entities/opcion.entity';\n\n@Entity('respuestas_opciones')\nexport class RespuestaOpcion {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int', { nullable: true })\n  id_respuesta: number;\n\n  @Column('int', { nullable: true })\n  id_opcion: number;\n\n  @ManyToOne(() => Respuesta)\n  @JoinColumn({ name: 'id_respuesta' })\n  respuesta: Respuesta;\n\n  @ManyToOne(() => Opcion)\n  @JoinColumn({ name: 'id_opcion' })\n  opcion: Opcion;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaPreguntaDto.html":{"url":"classes/RespuestaPreguntaDto.html","title":"class - RespuestaPreguntaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaPreguntaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id_pregunta\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                opciones\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                texto\n                            \n                            \n                                    \n                                    \n                                    \n                                tipo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id_pregunta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        opciones\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        texto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tipo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ABIERTA\" | \"OPCION_MULTIPLE_SELECCION_SIMPLE\" | \"OPCION_MULTIPLE_SELECCION_MULTIPLE\" | \"VERDADERO_FALSO\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/registrar-respuestas.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class RespuestaPreguntaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  id_pregunta: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @Type(() => String) // Transforma explicitamente el tipo\n  tipo:\n    | 'ABIERTA'\n    | 'OPCION_MULTIPLE_SELECCION_SIMPLE'\n    | 'OPCION_MULTIPLE_SELECCION_MULTIPLE'\n    | 'VERDADERO_FALSO';\n\n  @IsOptional()\n  @IsString()\n  texto?: string; // preguntas abiertas\n\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number) // Transforma cada elemento a número\n  opciones?: number[]; // preguntas de opción múltiple\n}\n\nexport class RegistrarRespuestasDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => RespuestaPreguntaDto)\n  @IsNotEmpty()\n  respuestas: RespuestaPreguntaDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RespuestasController.html":{"url":"controllers/RespuestasController.html","title":"controller - RespuestasController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RespuestasController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/controllers/respuestas.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                respuestas\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                registrarRespuestasAlternativa\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                visualizarRespuestas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, tokenParticipacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('participar/:id/:tokenParticipacion')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(id: number, tokenParticipacion: string, registrarRespuestasDto: RegistrarRespuestasDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/:tokenParticipacion')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Registrar respuestas de una encuesta'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiParam({name: 'tokenParticipacion', description: 'Token de participación de la encuesta', example: 'abc123def456'})@ApiBody({type: RegistrarRespuestasDto})@ApiResponse({status: 201, description: 'Respuestas registradas exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o enlace inválido'})@ApiResponse({status: 400, description: 'Datos de respuesta inválidos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                registrarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        registrarRespuestasAlternativa\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestasAlternativa(id: number, tokenParticipacion: string, registrarRespuestasDto: RegistrarRespuestasDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('participar/:id/:tokenParticipacion')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Registrar respuestas de una encuesta (ruta alternativa)'})@ApiParam({name: 'id', description: 'ID de la encuesta', example: '1'})@ApiParam({name: 'tokenParticipacion', description: 'Token de participación de la encuesta', example: 'abc123def456'})@ApiBody({type: RegistrarRespuestasDto})@ApiResponse({status: 201, description: 'Respuestas registradas exitosamente'})@ApiResponse({status: 404, description: 'Encuesta no encontrada o enlace inválido'})@ApiResponse({status: 400, description: 'Datos de respuesta inválidos'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tokenParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                registrarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        visualizarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestas(tokenVisualizacion: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('resultados/:tokenVisualizacion')@ApiOperation({summary: 'Visualizar respuestas de una encuesta'})@ApiParam({name: 'tokenVisualizacion', description: 'Token de visualización de resultados', example: 'xyz789uvw012'})@ApiResponse({status: 200, description: 'Respuestas obtenidas exitosamente', type: VisualizarRespuestasDto})@ApiResponse({status: 404, description: 'Encuesta no encontrada o enlace inválido'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/respuestas/controllers/respuestas.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  HttpCode,\n  HttpStatus,\n  Get,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { CreateEncuestaDto } from 'src/modules/encuestas/dtos/create-encuesta.dto';\nimport { RespuestasService } from 'src/modules/respuestas/services/respuestas.service';\nimport { RegistrarRespuestasDto } from 'src/modules/respuestas/dtos/registrar-respuestas.dto';\nimport { VisualizarRespuestasDto } from 'src/modules/respuestas/dtos/visualizar-respuestas.dtos';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiParam,\n  ApiBody,\n  ApiResponse,\n} from '@nestjs/swagger';\n\n@ApiTags('respuestas')\n@Controller('respuestas')\nexport class RespuestasController {\n  constructor(private readonly respuestasService: RespuestasService) {}\n\n  @Post(':id/:tokenParticipacion') // Permite registrar respuestas para una encuesta específica.\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Registrar respuestas de una encuesta' })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  @ApiBody({ type: RegistrarRespuestasDto })\n  @ApiResponse({\n    status: 201,\n    description: 'Respuestas registradas exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o enlace inválido',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de respuesta inválidos',\n  })\n  async registrarRespuestas(\n    @Param('id') id: number, // Recibe el ID de la encuesta\n    @Param('tokenParticipacion') tokenParticipacion: string, //Recibe el token de participación desde la URL.\n    @Body() registrarRespuestasDto: RegistrarRespuestasDto, // Recibe las respuestas en el cuerpo de la solicitud.\n  ): Promise {\n    await this.respuestasService.registrarRespuestas(\n      tokenParticipacion,\n      registrarRespuestasDto,\n      id,\n    );\n    return { message: 'Respuestas registradas exitosamente' };\n  }\n\n  @Post('participar/:id/:tokenParticipacion') // Ruta alternativa para mayor compatibilidad\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({\n    summary: 'Registrar respuestas de una encuesta (ruta alternativa)',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID de la encuesta',\n    example: '1',\n  })\n  @ApiParam({\n    name: 'tokenParticipacion',\n    description: 'Token de participación de la encuesta',\n    example: 'abc123def456',\n  })\n  @ApiBody({ type: RegistrarRespuestasDto })\n  @ApiResponse({\n    status: 201,\n    description: 'Respuestas registradas exitosamente',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o enlace inválido',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Datos de respuesta inválidos',\n  })\n  async registrarRespuestasAlternativa(\n    @Param('id') id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n    @Body() registrarRespuestasDto: RegistrarRespuestasDto,\n  ): Promise {\n    await this.respuestasService.registrarRespuestas(\n      tokenParticipacion,\n      registrarRespuestasDto,\n      id,\n    );\n    return { message: 'Respuestas registradas exitosamente' };\n  }\n\n  @Get('resultados/:tokenVisualizacion') //obtiene las respuestas\n  @ApiOperation({ summary: 'Visualizar respuestas de una encuesta' })\n  @ApiParam({\n    name: 'tokenVisualizacion',\n    description: 'Token de visualización de resultados',\n    example: 'xyz789uvw012',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Respuestas obtenidas exitosamente',\n    type: VisualizarRespuestasDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Encuesta no encontrada o enlace inválido',\n  })\n  async visualizarRespuestas(\n    @Param('tokenVisualizacion') tokenVisualizacion: string, //Recibe el token para visualizar los resultados.\n  ): Promise {\n    const resultado =\n      await this.respuestasService.visualizarRespuestasDto(tokenVisualizacion);\n    return { message: 'Éxito', data: resultado };\n  }\n  @Get('participar/:id/:tokenParticipacion')\n  async obtenerEncuestaParaParticipacion(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('tokenParticipacion') tokenParticipacion: string,\n  ): Promise {\n    const encuesta =\n      await this.respuestasService.obtenerEncuestaParaParticipacion(\n        id,\n        tokenParticipacion,\n      );\n    return { message: 'Encuesta obtenida exitosamente', data: encuesta };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RespuestasModule.html":{"url":"modules/RespuestasModule.html","title":"module - RespuestasModule","body":"\n                   \n\n\n\n\n    Modules\n    RespuestasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_providers\n\n\n\ncluster_RespuestasModule_exports\n\n\n\n\nRespuestasService \n\nRespuestasService \n\n\n\nRespuestasModule\n\nRespuestasModule\n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/respuestas/respuestas.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RespuestasController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RespuestasService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Importación de decoradores y módulos necesarios de NestJS\nimport { Module } from '@nestjs/common';\nimport { RespuestasController } from './controllers/respuestas.controller'; // Controlador para manejar las rutas relacionadas con respuesta\nimport { RespuestasService } from './services/respuestas.service'; // Servicio para la lógica de negocio de respuesta\nimport { TypeOrmModule } from '@nestjs/typeorm'; // Módulo de TypeORM para la integración con la base de datos\nimport { Respuesta } from './entities/respuesta.entity'; // Entidad que representa la tabla \"Respuesta\" en la base de datos\nimport { RespuestaAbierta } from './entities/respuesta-abierta.entity'; //Entidad que representa la tabla \"Respuesta Abierta\" en la base de datos\nimport { RespuestaOpcion } from './entities/respuesta-opcion.entity'; //Entidad que representa la tabla \"RespuestaOpciones\" en la base de datos\nimport { Encuesta } from 'src/modules/encuestas/entities/encuesta.entity'; // Entidad que representa la tabla \"Encuesta\" en la base de datos\nimport { Pregunta } from 'src/modules/encuestas/entities/pregunta.entity'; // Entidad que representa la tabla \"Pregunta\" en la base de datos\nimport { Opcion } from 'src/modules/encuestas/entities/opcion.entity'; // Entidad que representa la tabla \"Opción\" en la base de datos\n\n@Module({\n  // Importación de módulos necesarios para este módulo\n  imports: [\n    // Configuración de TypeORM para trabajar con las entidades relacionadas\n    TypeOrmModule.forFeature([\n      Encuesta,\n      Pregunta,\n      Opcion,\n      Respuesta,\n      RespuestaAbierta,\n      RespuestaOpcion,\n    ]),\n  ],\n  // Declaración de los controladores que manejarán las rutas de este módulo\n  // Declaración de los proveedores que contienen la lógica de negocio\n  controllers: [RespuestasController],\n  providers: [RespuestasService],\n  exports: [RespuestasService],\n})\n// Exportación del módulo de encuestas para que pueda ser utilizado en otros módulos\nexport class RespuestasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RespuestasService.html":{"url":"injectables/RespuestasService.html","title":"injectable - RespuestasService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RespuestasService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/services/respuestas.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                obtenerEncuestaParaParticipacion\n                            \n                            \n                                    Async\n                                registrarRespuestas\n                            \n                            \n                                    Async\n                                visualizarRespuestasDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(respuestaRepository: Repository, respuestaAbiertaRepository: Repository, respuestaOpcionRepository: Repository, encuestaRepository: Repository, preguntaRepository: Repository, opcionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/respuestas/services/respuestas.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        respuestaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaAbiertaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        respuestaOpcionRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encuestaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        preguntaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        opcionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        obtenerEncuestaParaParticipacion\n                        \n                    \n                \n            \n            \n                \n                        \n                    obtenerEncuestaParaParticipacion(id: number, codigoParticipacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:309\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registrarRespuestas\n                        \n                    \n                \n            \n            \n                \n                        \n                    registrarRespuestas(codigoParticipacion: string, registarRespuestasDto: RegistrarRespuestasDto, encuestaId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigoParticipacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                registarRespuestasDto\n                                            \n                                                            RegistrarRespuestasDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encuestaId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        visualizarRespuestasDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    visualizarRespuestasDto(codigoVisualizacion: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/respuestas/services/respuestas.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                codigoVisualizacion\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Respuesta } from 'src/modules/respuestas/entities/respuesta.entity';\nimport { RespuestaAbierta } from 'src/modules/respuestas/entities/respuesta-abierta.entity';\nimport { RespuestaOpcion } from 'src/modules/respuestas/entities/respuesta-opcion.entity';\nimport { Encuesta } from 'src/modules/encuestas/entities/encuesta.entity';\nimport { Pregunta } from 'src/modules/encuestas/entities/pregunta.entity';\nimport { Opcion } from 'src/modules/encuestas/entities/opcion.entity';\nimport { RegistrarRespuestasDto } from 'src/modules/respuestas/dtos/registrar-respuestas.dto';\nimport { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\nimport { VisualizarRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { PreguntaConRespuestasDto } from '../dtos/visualizar-respuestas.dtos';\nimport { CreateEncuestaDto } from 'src/modules/encuestas/dtos/create-encuesta.dto';\n\n@Injectable()\nexport class RespuestasService {\n  constructor(\n    @InjectRepository(Respuesta)\n    private respuestaRepository: Repository,\n    @InjectRepository(RespuestaAbierta)\n    private respuestaAbiertaRepository: Repository,\n    @InjectRepository(RespuestaOpcion)\n    private respuestaOpcionRepository: Repository,\n    @InjectRepository(Encuesta)\n    private encuestaRepository: Repository,\n    @InjectRepository(Pregunta)\n    private preguntaRepository: Repository,\n    @InjectRepository(Opcion)\n    private opcionRepository: Repository,\n  ) {}\n  //recibe las respuestas de un usuario que ha participado en una encuesta y las guarda en la base de datos\n  async registrarRespuestas(\n    codigoParticipacion: string,\n    registarRespuestasDto: RegistrarRespuestasDto,\n    encuestaId?: number,\n  ): Promise {\n    // Construir la condición de búsqueda con un tipo específico\n    const whereCondition: {\n      codigoRespuesta: string;\n      habilitada: boolean;\n      id?: number;\n    } = {\n      codigoRespuesta: codigoParticipacion,\n      habilitada: true,\n    };\n\n    // Si se proporciona el ID de la encuesta, añadirlo a la condición\n    if (encuestaId) {\n      whereCondition.id = encuestaId;\n    }\n\n    const encuesta = await this.encuestaRepository.findOne({\n      where: whereCondition, //busca la encuesta con el codigo de participacion y opcionalmente el ID\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace invalido'); //sino existe el codigo mensaje de error\n    }\n\n    const preguntasObligatorias = encuesta.preguntas;\n    const preguntasRespondidas = registarRespuestasDto.respuestas.map(\n      (r) => r.id_pregunta,\n    );\n\n    // Verificar si todas las preguntas obligatorias están respondidas\n    const preguntasFaltantes = preguntasObligatorias.filter(\n      (p) => !preguntasRespondidas.includes(p.id),\n    );\n\n    if (preguntasFaltantes.length > 0) {\n      console.log(\n        'Preguntas obligatorias:',\n        preguntasObligatorias.map((p) => p.id),\n      );\n      console.log('Preguntas respondidas:', preguntasRespondidas);\n      console.log(\n        'Preguntas faltantes:',\n        preguntasFaltantes.map((p) => p.id),\n      );\n      // Imprimir información detallada de las preguntas y opciones\n      encuesta.preguntas.forEach((pregunta) => {\n        console.log(\n          `Pregunta ID: ${pregunta.id}, Número: ${pregunta.numero}, Texto: \"${pregunta.texto}\"`,\n        );\n        if (pregunta.opciones && pregunta.opciones.length > 0) {\n          console.log('Opciones:');\n          pregunta.opciones.forEach((opcion) => {\n            console.log(\n              `  Opción ID: ${opcion.id}, Número: ${opcion.numero}, Texto: \"${opcion.texto}\"`,\n            );\n          });\n        }\n      });\n\n      throw new BadRequestException(\n        `Debe responder todas las preguntas obligatorias. Faltan las preguntas: ${preguntasFaltantes.map((p) => p.numero).join(', ')}`,\n      );\n    }\n    //crea una nueva respuesta vinculada a la encuesta\n    const respuesta = this.respuestaRepository.create({\n      id_encuesta: encuesta.id,\n    });\n\n    const respuestaGuardada = await this.respuestaRepository.save(respuesta); //guarda las respuestas en la base de datos\n    for (const respuestaPregunta of registarRespuestasDto.respuestas) {\n      const pregunta = await this.preguntaRepository.findOne({\n        where: {\n          id: respuestaPregunta.id_pregunta,\n          encuesta: { id: encuesta.id },\n        },\n      });\n\n      if (!pregunta) {\n        throw new BadRequestException(\n          `Pregunta ${respuestaPregunta.id_pregunta} no encontrada o no pertenece a la encuesta`,\n        );\n      }\n\n      if (respuestaPregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        if (!respuestaPregunta.texto) {\n          throw new BadRequestException(\n            'Respuesta de texto requerida para preguntas abiertas',\n          );\n        }\n\n        const respuestasAbiertas = this.respuestaAbiertaRepository.create({\n          texto: respuestaPregunta.texto,\n          id_pregunta: pregunta.id,\n          id_respuesta: respuestaGuardada.id,\n        });\n        await this.respuestaAbiertaRepository.save(respuestasAbiertas);\n      } else if (\n        respuestaPregunta.tipo === TiposRespuestaEnum.VERDADERO_FALSO\n      ) {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length !== 1\n        ) {\n          throw new BadRequestException(\n            'Debe seleccionar exactamente una opción (Verdadero o Falso)',\n          );\n        }\n\n        // Verificar que la opción seleccionada pertenece a la pregunta\n        const opcion = await this.opcionRepository.findOne({\n          where: {\n            id: respuestaPregunta.opciones[0],\n            pregunta: { id: pregunta.id },\n          },\n        });\n\n        if (!opcion) {\n          throw new BadRequestException(\n            `Opción seleccionada no válida para esta pregunta de Verdadero/Falso`,\n          );\n        }\n\n        const respuestaOpcion = this.respuestaOpcionRepository.create({\n          id_respuesta: respuestaGuardada.id,\n          id_opcion: respuestaPregunta.opciones[0],\n        });\n        await this.respuestaOpcionRepository.save(respuestaOpcion);\n      } else {\n        if (\n          !respuestaPregunta.opciones ||\n          respuestaPregunta.opciones.length === 0\n        ) {\n          throw new BadRequestException(\n            'Al menos una opcion debe ser seleccionada',\n          );\n        }\n\n        if (\n          pregunta.tipo ===\n            TiposRespuestaEnum.OPCION_MULTIPLE_SELECCION_SIMPLE &&\n          respuestaPregunta.opciones.length > 1\n        ) {\n          throw new BadRequestException(\n            'Solo se permite una seleccion para este tipo de pregunta',\n          );\n        }\n\n        for (const idOpcion of respuestaPregunta.opciones) {\n          const opcion = await this.opcionRepository.findOne({\n            where: {\n              id: idOpcion,\n              pregunta: { id: pregunta.id },\n            },\n          });\n\n          if (!opcion) {\n            // Obtener todas las opciones disponibles para esta pregunta para depuración\n            const opcionesDisponibles = await this.opcionRepository.find({\n              where: { pregunta: { id: pregunta.id } },\n              select: ['id', 'texto', 'numero'],\n            });\n\n            console.log(\n              `Error: Opción ${idOpcion} no encontrada para la pregunta ${pregunta.id}`,\n            );\n            console.log(\n              'Opciones disponibles para esta pregunta:',\n              opcionesDisponibles,\n            );\n\n            throw new BadRequestException(\n              `Opcion ${idOpcion} no encontrada o no pertenece a esta pregunta. Opciones disponibles: ${JSON.stringify(opcionesDisponibles)}`,\n            );\n          }\n          const respuestaOpcion = this.respuestaOpcionRepository.create({\n            id_respuesta: respuestaGuardada.id,\n            id_opcion: idOpcion,\n          });\n          await this.respuestaOpcionRepository.save(respuestaOpcion);\n        }\n      }\n    }\n  }\n  // obtiene las respuestas registradas de una encuesta específica para visualizarlas.\n  async visualizarRespuestasDto(\n    codigoVisualizacion: string,\n  ): Promise {\n    // Busca la encuesta con el código de visualización\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { codigoResultados: codigoVisualizacion },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException('Encuesta no encontrada o enlace inválido'); //si no existe mensaje de error.\n    }\n\n    // Imprimir información detallada de las preguntas y opciones para depuración\n    console.log('Información de la encuesta para depuración:');\n    encuesta.preguntas.forEach((pregunta) => {\n      console.log(\n        `Pregunta ID: ${pregunta.id}, Número: ${pregunta.numero}, Texto: \"${pregunta.texto}\"`,\n      );\n      if (pregunta.opciones && pregunta.opciones.length > 0) {\n        console.log('Opciones:');\n        pregunta.opciones.forEach((opcion) => {\n          console.log(\n            `  Opción ID: ${opcion.id}, Número: ${opcion.numero}, Texto: \"${opcion.texto}\"`,\n          );\n        });\n      }\n    });\n\n    // Construir el objeto\n    const resultado: VisualizarRespuestasDto = {\n      id: encuesta.id,\n      nombre: encuesta.nombre,\n      codigoRespuesta: encuesta.codigoRespuesta,\n      codigoResultados: encuesta.codigoResultados,\n      preguntas: [],\n    };\n    //itera sobre las preguntas de la encuesta\n    for (const pregunta of encuesta.preguntas) {\n      const preguntaConRespuestas = new PreguntaConRespuestasDto(); //crea un dto de la pregunta.\n\n      preguntaConRespuestas.id = pregunta.id;\n      preguntaConRespuestas.numero = pregunta.numero;\n      preguntaConRespuestas.texto = pregunta.texto;\n      preguntaConRespuestas.tipo = pregunta.tipo;\n      // Inicializar las listas de opciones y respuestas abiertas\n      preguntaConRespuestas.opciones = [];\n      preguntaConRespuestas.respuestas_abiertas = [];\n      //obtiene las preguntas abiertas\n      if (pregunta.tipo === TiposRespuestaEnum.ABIERTA) {\n        const respuestasAbiertas = await this.respuestaAbiertaRepository.find({\n          where: { id_pregunta: pregunta.id },\n        });\n        preguntaConRespuestas.respuestas_abiertas = respuestasAbiertas.map(\n          (r) => r.texto,\n        );\n      }\n\n      if (pregunta.opciones && pregunta.opciones.length > 0) {\n        for (const opcion of pregunta.opciones) {\n          // cuenta cuantas veces fue seleccionada cada opcion\n          const cantidadRespuestas = await this.respuestaOpcionRepository.count(\n            {\n              where: { id_opcion: opcion.id }, // Ajusta esto a tu esquema si es diferente\n            },\n          );\n\n          //  Añade la opción con la cantidad de respuestas al DTO\n\n          preguntaConRespuestas.opciones.push({\n            id: opcion.id,\n            texto: opcion.texto,\n            numero: opcion.numero,\n            cantidad_respuestas: cantidadRespuestas,\n          });\n        }\n      }\n\n      resultado.preguntas.push(preguntaConRespuestas); //Añade la pregunta con sus respuestas al resultado fina\n    }\n\n    return resultado;\n  }\n  async obtenerEncuestaParaParticipacion(\n    id: number,\n    codigoParticipacion: string,\n  ): Promise {\n    // Buscar la encuesta por ID y código de participación\n    const encuesta = await this.encuestaRepository.findOne({\n      where: { id, codigoRespuesta: codigoParticipacion, habilitada: true },\n      relations: ['preguntas', 'preguntas.opciones'],\n    });\n\n    if (!encuesta) {\n      throw new NotFoundException(\n        'Encuesta no encontrada o código de participación inválido',\n      );\n    }\n\n    // Convertir la entidad `Encuesta` a `CreateEncuestaDto`\n    return {\n      nombre: encuesta.nombre,\n      preguntas: encuesta.preguntas.map((pregunta) => ({\n        numero: pregunta.numero,\n        texto: pregunta.texto,\n        tipo: pregunta.tipo,\n        opciones: pregunta.opciones.map((opcion) => ({\n          id: opcion.id,\n          texto: opcion.texto,\n          numero: opcion.numero,\n        })),\n      })),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisualizarRespuestasDto.html":{"url":"classes/VisualizarRespuestasDto.html","title":"class - VisualizarRespuestasDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisualizarRespuestasDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                codigoRespuesta\n                            \n                            \n                                codigoResultados\n                            \n                            \n                                id\n                            \n                            \n                                nombre\n                            \n                            \n                                preguntas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        codigoRespuesta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        codigoResultados\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nombre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preguntas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PreguntaConRespuestasDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TiposRespuestaEnum } from 'src/modules/encuestas/enums/tipos-respuesta.enum';\n// Representa la encuesta con sus respuestas.\nexport class VisualizarRespuestasDto {\n  id: number;\n  nombre: string;\n  codigoRespuesta: string;\n  codigoResultados: string;\n  preguntas: PreguntaConRespuestasDto[];\n}\n//Representa cada pregunta dentro de la encuesta.\nexport class PreguntaConRespuestasDto {\n  id: number;\n  numero: number;\n  texto: string;\n  tipo: TiposRespuestaEnum;\n  opciones: OpcionConRespuestasDto[];\n  respuestas_abiertas: string[];\n  constructor() {\n    this.opciones = [];\n    this.respuestas_abiertas = [];\n  }\n}\n//Define las opciones de respuesta y cuántas veces fueron elegidas.\nexport class OpcionConRespuestasDto {\n  id: number;\n  texto: string;\n  numero: number;\n  cantidad_respuestas: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/controllers/encuestas.controller.ts\n            \n            controller\n            EncuestasController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/actualizar-pregunta.dto.ts\n            \n            class\n            ActualizarPreguntaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta-response.dto.ts\n            \n            class\n            CreateEncuestaResponseDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-encuesta.dto.ts\n            \n            class\n            CreateEncuestaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-opcion.dto.ts\n            \n            class\n            CreateOpcionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/create-pregunta.dto.ts\n            \n            class\n            CreatePreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/encuestas/dtos/obtener-encuesta.dto.ts\n            \n            class\n            ObtenerEncuestaDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/encuesta.entity.ts\n            \n            entity\n            Encuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/opcion.entity.ts\n            \n            entity\n            Opcion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/encuestas/services/encuestas.service.ts\n            \n            injectable\n            EncuestasService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/opciones/controllers/opciones.controller.ts\n            \n            controller\n            OpcionesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/opciones/services/opciones.service.ts\n            \n            injectable\n            OpcionesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/preguntas/controllers/preguntas.controller.ts\n            \n            controller\n            PreguntasController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/preguntas/entities/pregunta.entity.ts\n            \n            entity\n            Pregunta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/preguntas/services/preguntas.service.ts\n            \n            injectable\n            PreguntasService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/respuestas/controllers/respuestas.controller.ts\n            \n            controller\n            RespuestasController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RegistrarRespuestasDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/registrar-respuestas.dto.ts\n            \n            class\n            RespuestaPreguntaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            OpcionConRespuestasDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            PreguntaConRespuestasDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/respuestas/dtos/visualizar-respuestas.dtos.ts\n            \n            class\n            VisualizarRespuestasDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-abierta.entity.ts\n            \n            entity\n            RespuestaAbierta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta-opcion.entity.ts\n            \n            entity\n            RespuestaOpcion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/entities/respuesta.entity.ts\n            \n            entity\n            Respuesta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/respuestas/services/respuestas.service.ts\n            \n            injectable\n            RespuestasService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.2\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            helmet : ^8.1.0\n        \n            node-fetch : ^3.3.2\n        \n            pg : ^8.14.1\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            shortid : ^2.2.17\n        \n            typeorm : ^0.3.24\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CodigoTipoEnum   (src/.../codigo-tipo.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                        \n                            TiposRespuestaEnum   (src/.../tipos-respuesta.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/encuestas/enums/codigo-tipo.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CodigoTipoEnum\n                    \n                \n                        \n                            \n                                 RESULTADOS\n                            \n                        \n                        \n                            \n                                Value : RESULTADOS\n                            \n                        \n                        \n                            \n                                 RESPUESTA\n                            \n                        \n                        \n                            \n                                Value : RESPUESTA\n                            \n                        \n            \n        \n\n    src/modules/encuestas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                 VERDADERO_FALSO\n                            \n                        \n                        \n                            \n                                Value : VERDADERO_FALSO\n                            \n                        \n            \n        \n\n    src/modules/preguntas/enums/tipos-respuesta.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TiposRespuestaEnum\n                    \n                \n                        \n                            \n                                 ABIERTA\n                            \n                        \n                        \n                            \n                                Value : ABIERTA\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_SIMPLE\n                            \n                        \n                        \n                            \n                                 OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n                        \n                            \n                                Value : OPCION_MULTIPLE_SELECCION_MULTIPLE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EncuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpcionesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PreguntasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RespuestasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_EncuestasModule\n\n\n\ncluster_EncuestasModule_providers\n\n\n\ncluster_OpcionesModule\n\n\n\ncluster_OpcionesModule_providers\n\n\n\ncluster_PreguntasModule\n\n\n\ncluster_PreguntasModule_providers\n\n\n\ncluster_RespuestasModule\n\n\n\ncluster_RespuestasModule_exports\n\n\n\ncluster_RespuestasModule_providers\n\n\n\n\nEncuestasModule\n\nEncuestasModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEncuestasModule->AppModule\n\n\n\n\n\nOpcionesModule\n\nOpcionesModule\n\nAppModule -->\n\nOpcionesModule->AppModule\n\n\n\n\n\nPreguntasModule\n\nPreguntasModule\n\nAppModule -->\n\nPreguntasModule->AppModule\n\n\n\n\n\nRespuestasModule\n\nRespuestasModule\n\nEncuestasModule -->\n\nRespuestasModule->EncuestasModule\n\n\n\nAppModule -->\n\nRespuestasModule->AppModule\n\n\n\n\n\nRespuestasService \n\nRespuestasService \n\nRespuestasService  -->\n\nRespuestasModule->RespuestasService \n\n\n\n\n\nEncuestasService\n\nEncuestasService\n\nEncuestasModule -->\n\nEncuestasService->EncuestasModule\n\n\n\n\n\nOpcionesService\n\nOpcionesService\n\nOpcionesModule -->\n\nOpcionesService->OpcionesModule\n\n\n\n\n\nPreguntasService\n\nPreguntasService\n\nPreguntasModule -->\n\nPreguntasService->PreguntasModule\n\n\n\n\n\nRespuestasService\n\nRespuestasService\n\nRespuestasModule -->\n\nRespuestasService->RespuestasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
